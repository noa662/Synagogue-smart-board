{"version":3,"sources":["webpack://KosherZmanim/webpack/universalModuleDefinition","webpack://KosherZmanim/webpack/bootstrap","webpack://KosherZmanim/./node_modules/luxon/build/cjs-browser/luxon.js","webpack://KosherZmanim/./node_modules/big.js/big.js","webpack://KosherZmanim/./src/polyfills/Utils.ts","webpack://KosherZmanim/./src/polyfills/errors.ts","webpack://KosherZmanim/./src/util/GeoLocation.ts","webpack://KosherZmanim/./src/util/AstronomicalCalculator.ts","webpack://KosherZmanim/./src/util/NOAACalculator.ts","webpack://KosherZmanim/./src/AstronomicalCalendar.ts","webpack://KosherZmanim/./src/hebrewcalendar/JewishDate.ts","webpack://KosherZmanim/./src/hebrewcalendar/JewishCalendar.ts","webpack://KosherZmanim/./src/ZmanimCalendar.ts","webpack://KosherZmanim/./src/ComplexZmanimCalendar.ts","webpack://KosherZmanim/./src/util/Time.ts","webpack://KosherZmanim/./src/util/Zman.ts","webpack://KosherZmanim/./src/util/ZmanimFormatter.ts","webpack://KosherZmanim/./src/util/GeoLocationUtils.ts","webpack://KosherZmanim/./src/util/SunTimesCalculator.ts","webpack://KosherZmanim/./src/hebrewcalendar/Daf.ts","webpack://KosherZmanim/./src/hebrewcalendar/YomiCalculator.ts","webpack://KosherZmanim/./src/hebrewcalendar/YerushalmiYomiCalculator.ts","webpack://KosherZmanim/./src/hebrewcalendar/HebrewDateFormatter.ts","webpack://KosherZmanim/./src/kosher-zmanim.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFa;;AAEb,8CAA8C,cAAc;;AAE5D;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2EAA2E;AAC3E;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wCAAwC,SAAS;;AAEjD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI;AACP;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA,wGAAwG,uEAAuE;;AAE/K;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA,yCAAyC;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,MAAM,iBAAiB,MAAM,eAAe,MAAM;;AAE/E;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sEAAsE,6BAA6B;AACnG;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B;;AAE/B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oJAAoJ;AACpJ,aAAa,OAAO;AACpB;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,oDAAoD,IAAI;;AAExD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,sCAAsC,IAAI,SAAS,EAAE;;AAErD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,gDAAgD,oFAAoF;AACpI;AACA;AACA,KAAK,4EAA4E;AACjF,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oEAAoE;;;AAGpE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH,yEAAyE;;AAEzE;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,qCAAqC;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,iBAAiB,QAAQ;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,qCAAqC;;AAErC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA,iFAAiF,wBAAwB;AACzG;AACA;AACA;AACA;AACA;;AAEA;AACA,wEAAwE,aAAa;AACrF;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,8EAA8E,eAAe;AAC7F;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK,KAAK;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gGAAgG,eAAe;AAC/G;AACA;;AAEA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wEAAwE,eAAe;AACvF;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,iBAAiB;AAChC;AACA;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA,+DAA+D,KAAK;AACpE;AACA;AACA,2BAA2B,EAAE,IAAI,EAAE;AACnC,wBAAwB,EAAE;AAC1B,2BAA2B,EAAE,OAAO,EAAE;AACtC;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA,YAAY;AACZ,CAAC;;;AAGD,gEAAgE;;AAEhE,mCAAmC,IAAI,aAAa,IAAI,aAAa,IAAI,aAAa,IAAI,iBAAiB,IAAI,aAAa,IAAI,aAAa,KAAK,cAAc,IAAI;;AAEpK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;;AAGD,yDAAyD,IAAI,0DAA0D,IAAI;;AAE3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;AAGD,4GAA4G,EAAE;AAC9G;AACA,kIAAkI,EAAE;;AAEpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kBAAkB;;AAEnB;AACA,mDAAmD;;AAEnD;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,+BAA+B;AACjF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,2VAA2V,2BAA2B,oBAAoB;AAC1Y;AACA;AACA;AACA,6CAA6C,0BAA0B,GAAG,0BAA0B,MAAM,uBAAuB;AACjI,8BAA8B,qBAAqB,GAAG,sBAAsB,GAAG,qBAAqB,GAAG,oBAAoB,GAAG,qBAAqB,GAAG,uBAAuB,GAAG,uBAAuB,GAAG,4BAA4B;AACtO,6BAA6B,sBAAsB,MAAM,+BAA+B;AACxF,qEAAqE,oBAAoB,GAAG,qBAAqB,GAAG,yBAAyB,GAAG,mBAAmB,GAAG,2BAA2B,GAAG,uBAAuB,OAAO,sBAAsB;AACxP,yEAAyE,kBAAkB,GAAG,qBAAqB,GAAG,wBAAwB,OAAO;AACrJ;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uIAAuI;AACvI;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,sEAAsE;AACtE,yDAAyD;AACzD,yDAAyD;AACzD,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,oEAAoE;AACpE,6DAA6D;AAC7D,8DAA8D;AAC9D,4DAA4D;AAC5D,6DAA6D;AAC7D,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,uBAAuB;AAC7G,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,mCAAmC,gCAAgC;AACnE,mCAAmC,gCAAgC;AACnE,mCAAmC,gCAAgC;AACnE,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC,kCAAkC;AAClC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,mCAAmC,gCAAgC,mBAAmB;AACtF,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D,mCAAmC,yBAAyB;AAC5D,mCAAmC,YAAY;AAC/C,mCAAmC,aAAa;AAChD,mCAAmC,kBAAkB;AACrD,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,mCAAmC,YAAY;AAC/C,mCAAmC,YAAY,aAAa,6BAA6B;AACzF,mCAAmC,YAAY,aAAa,wBAAwB;AACpF,mCAAmC,YAAY,aAAa,sBAAsB;AAClF,mCAAmC,YAAY,aAAa,kBAAkB;AAC9E,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,uBAAuB;AACpC,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8EAA8E,6BAA6B;AAC3G;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,uBAAuB;AACpC,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,mCAAmC,wBAAwB,4BAA4B;AACvF,mCAAmC,wBAAwB,oDAAoD;AAC/G,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA,6DAA6D,0BAA0B;AACvF;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,OAAO;AACpB,mCAAmC,kBAAkB;AACrD,mCAAmC,kBAAkB;AACrD,mCAAmC,kBAAkB;AACrD,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,uBAAuB,cAAc;AACrC,uBAAuB,wBAAwB;AAC/C,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD,cAAc;AACd;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,mCAAmC,SAAS;AAC5C,mCAAmC,SAAS;AAC5C,mCAAmC,UAAU;AAC7C,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uBAAuB,+BAA+B;AACzF,mCAAmC,0BAA0B,+BAA+B;AAC5F,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mCAAmC,wBAAwB,sDAAsD;AACjH,cAAc;AACd;AACA;;AAEA;AACA,wEAAwE,aAAa;AACrF;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL,kBAAkB;AAClB,wBAAwB;AACxB;AACA;;AAEA,gFAAgF,+BAA+B;AAC/G;;AAEA;AACA;AACA,oBAAoB;;AAEpB;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET,OAAO;AACP;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mCAAmC,wBAAwB,4BAA4B;AACvF,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA,+DAA+D,4BAA4B;AAC3F;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF,+BAA+B;AAC/G;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;AACD;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA,mCAAmC;;AAEnC;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,yFAAyF,eAAe;AACxG;AACA;AACA;AACA,8CAA8C,oBAAoB,GAAG,YAAY,GAAG,aAAa,MAAM,cAAc;AACrH,wBAAwB,YAAY,MAAM,UAAU;AACpD,qDAAqD,YAAY,GAAG,aAAa,GAAG,cAAc,GAAG,eAAe,GAAG,cAAc,MAAM,eAAe;AAC1J,wEAAwE,UAAU,GAAG,cAAc,GAAG,cAAc,GAAG,oBAAoB,GAAG,YAAY,GAAG,UAAU,GAAG,YAAY,GAAG,mBAAmB,MAAM,iBAAiB;AACnO,kEAAkE,aAAa,GAAG,eAAe,GAAG,iBAAiB,GAAG,eAAe,GAAG,cAAc;AACxJ,yEAAyE,eAAe,GAAG,YAAY,GAAG,gBAAgB,GAAG,gBAAgB,GAAG,eAAe,OAAO,iBAAiB;AACvL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,qBAAqB;AAClC,aAAa,qBAAqB;AAClC,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,qBAAqB;AAClC,aAAa,uBAAuB;AACpC,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qBAAqB;AAClC,aAAa,uBAAuB;AACpC,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO,2BAA2B,uBAAuB,iBAAiB;AACvF;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;;AAEA,4EAA4E,aAAa;AACzF;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,uBAAuB;AACpC,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL,qEAAqE,6BAA6B;AAClG;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,cAAc;AACd;AACA;;AAEA;AACA;;AAEA,+EAA+E,eAAe;AAC9F;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO,6BAA6B;AACjD,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO,6BAA6B;AACjD,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO,kFAAkF,wBAAwB;AAC9H,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,6EAA6E;AAC7E,mFAAmF;AACnF,iGAAiG;AACjG,4GAA4G;AAC5G,sFAAsF;AACtF,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA,uFAAuF,WAAW;AAClG;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,YAAY;AACzB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA,aAAa,mBAAmB;AAChC,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD,sCAAsC,eAAe;AACrD,mCAAmC,4BAA4B;AAC/D,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA,sCAAsC,kBAAkB;AACxD,sCAAsC,eAAe;AACrD,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,8BAA8B,eAAe;AAC7C,cAAc;AACd;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA,iCAAiC,eAAe;AAChD,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;;AAEA,sCAAsC,sBAAsB;AAC5D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gDAAgD;;AAEhD;AACA;;AAEA,gDAAgD;AAChD;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,iDAAiD;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA,8BAA8B,EAAE;AAChC,gCAAgC,EAAE;AAClC,+BAA+B,EAAE;AACjC,8BAA8B,EAAE;AAChC,mCAAmC,IAAI;AACvC,qCAAqC,IAAI;AACzC,mCAAmC,IAAI;AACvC,oCAAoC,IAAI;AACxC,oCAAoC,IAAI;AACxC,oCAAoC,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,MAAM;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG,IAAI;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,GAAG;AACH,CAAC;AACD;;;AAGA;AACA;AACA,yCAAyC;;AAEzC,+BAA+B;;AAE/B;AACA;AACA,GAAG;;;AAGH,mCAAmC;;AAEnC;;AAEA;AACA;AACA,GAAG;;;AAGH;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,yFAAyF;;AAEzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;AACD;AACA;;;AAGA;AACA;AACA,8EAA8E,6BAA6B;AAC3G;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4EAA4E,+BAA+B;AAC3G;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG,YAAY,GAAG,UAAU,uBAAuB,iBAAiB,oDAAoD,cAAc,GAAG,eAAe,OAAO,kBAAkB,kDAAkD,iBAAiB,4CAA4C,iBAAiB;AAClZ,8IAA8I,eAAe,YAAY,WAAW,GAAG,YAAY;AACnM,IAAI,UAAU,GAAG,WAAW,GAAG,aAAa,GAAG,aAAa,GAAG,kBAAkB;AACjF,mEAAmE,eAAe,GAAG,iBAAiB,OAAO,cAAc;AAC3H,gCAAgC,aAAa,MAAM,sBAAsB;AACzE,8EAA8E,UAAU,GAAG,kBAAkB,GAAG,cAAc,GAAG,gBAAgB,GAAG,WAAW,GAAG,YAAY,GAAG,YAAY,GAAG,cAAc,GAAG,YAAY,OAAO,cAAc;AAClP,4EAA4E,iBAAiB,GAAG,yBAAyB,GAAG,aAAa,GAAG,YAAY,GAAG,aAAa,GAAG,eAAe,GAAG,gBAAgB,GAAG,eAAe,GAAG,qBAAqB,GAAG,eAAe,GAAG,eAAe,MAAM,eAAe;AAChT;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;;AAGA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,mCAAmC,+BAA+B;AAClE,mCAAmC,aAAa;AAChD,mCAAmC,kCAAkC;AACrE,mCAAmC,+CAA+C;AAClF,mCAAmC,iDAAiD;AACpF,mCAAmC,4DAA4D;AAC/F,mCAAmC,4CAA4C;AAC/E,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+EAA+E;;AAE/E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;;AAGL;;AAEA,yEAAyE,+BAA+B;AACxG;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,KAAK;;;AAGL;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE;;;AAGP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA,iEAAiE,cAAc;AAC/E,2DAA2D,YAAY;AACvE;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA,+EAA+E,gBAAgB;AAC/F,2DAA2D,8BAA8B;AACzF;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB,sDAAsD;AACtD,oDAAoD;AACpD,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,oBAAoB,cAAc;AAClC,aAAa,OAAO;AACpB,aAAa,OAAO,SAAS;AAC7B,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wMAAwM,WAAW,uBAAuB,cAAc,MAAM,YAAY;AAC1Q,aAAa,YAAY,kOAAkO,WAAW;AACtQ,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;;AAEA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,uDAAuD,kBAAkB;AACzE,cAAc;AACd;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,6CAA6C,8BAA8B,kBAAkB,MAAM,cAAc;AACjH,aAAa,OAAO;AACpB,sBAAsB,aAAa;AACnC,sBAAsB,sBAAsB;AAC5C,sBAAsB,aAAa;AACnC,sBAAsB,2BAA2B;AACjD,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,yDAAyD;AACzD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uOAAuO,YAAY,iDAAiD,UAAU;AAC9S,aAAa,uBAAuB;AACpC;AACA,mCAAmC,cAAc;AACjD,mCAAmC,UAAU;AAC7C,mCAAmC,WAAW;AAC9C,mCAAmC,wBAAwB;AAC3D,uDAAuD,wBAAwB;AAC/E,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,uBAAuB;AACpC,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,sEAAsE;AACtE,qEAAqE;AACrE,qEAAqE;AACrE,2EAA2E;AAC3E,4EAA4E;AAC5E,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,gEAAgE;AAChE,+DAA+D;AAC/D,+DAA+D;AAC/D,qEAAqE;AACrE,sEAAsE;AACtE,cAAc;AACd;AACA;;AAEA;AACA;;AAEA,oDAAoD;AACpD,GAAG;;AAEH;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA,sDAAsD,eAAe;AACrE;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,8CAA8C;AAC9C,iEAAiE;AACjE,6CAA6C,kBAAkB,EAAE;AACjE,gEAAgE;AAChE,kEAAkE;AAClE,qEAAqE;AACrE,6CAA6C,iDAAiD,EAAE;AAChG,6CAA6C,uFAAuF,EAAE;AACtI,6CAA6C,oDAAoD,EAAE;AACnG,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,6CAA6C;AAC7C,+CAA+C,2BAA2B;AAC1E,+CAA+C,8BAA8B;AAC7E,+CAA+C,6BAA6B;AAC5E,+CAA+C,8BAA8B;AAC7E,+CAA+C;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB;AACA;AACA,oCAAoC,uBAAuB;AAC3D,oCAAoC,kBAAkB;AACtD,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,mDAAmD,kBAAkB;AACrE,cAAc;AACd;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,kCAAkC,sBAAsB;AACxD,kCAAkC,mDAAmD,aAAa,wBAAwB;AAC1H,kCAAkC,sBAAsB,aAAa,kBAAkB;AACvF,kCAAkC,sBAAsB,aAAa,sBAAsB;AAC3F,cAAc;AACd;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA,oCAAoC,uBAAuB;AAC3D,oCAAoC,qBAAqB;AACzD,cAAc;AACd;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA,iDAAiD,uBAAuB;AACxE,iDAAiD,oBAAoB;AACrE,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,8CAA8C;AAC9C,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB,aAAa,gBAAgB;AAC7B,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA,kCAAkC;AAClC,2CAA2C;AAC3C,sDAAsD;AACtD,+DAA+D;AAC/D,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,gBAAgB;AAC7B,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,cAAc;AAC7H,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,qDAAqD;AACrD,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,aAAa,OAAO,oCAAoC;AACxD,aAAa,QAAQ;AACrB,aAAa,OAAO,uJAAuJ,aAAa;AACxL,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,mCAAmC,UAAU;AAC7C,yDAAyD,UAAU;AACnE,mCAAmC,UAAU,cAAc,eAAe;AAC1E,oCAAoC,UAAU;AAC9C,oCAAoC,UAAU,cAAc,gBAAgB;AAC5E,oCAAoC,YAAY,cAAc,eAAe;AAC7E;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,aAAa,OAAO,oCAAoC;AACxD,aAAa,OAAO;AACpB,mCAAmC,UAAU;AAC7C,mDAAmD,UAAU;AAC7D,mCAAmC,UAAU,sBAAsB,eAAe;AAClF,oCAAoC,UAAU;AAC9C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,YAAY;AACzB,cAAc,SAAS;AACvB;AACA;;AAEA;AACA,4EAA4E,aAAa;AACzF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,YAAY;AACzB,cAAc,SAAS;AACvB;AACA;;AAEA;AACA,+EAA+E,eAAe;AAC9F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA,MAAM,qBAAqB;AAC3B,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,cAAc;AACd;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;AACD;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrvQA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;AAGA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,kBAAkB;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,QAAQ,IAAI;AACZ,QAAQ,cAAc;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,8BAA8B;;AAE7C;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,YAAY,iCAAiC;AAC7C;AACA;;AAEA;AACA,iBAAiB,SAAS;AAC1B;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,QAAQ,IAAI;AACZ,SAAS,OAAO;AAChB,SAAS,OAAO;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,WAAW;AACrC;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL,YAAY,KAAK;AACjB;AACA,KAAK;AACL;AACA,oBAAoB,KAAK;AACzB,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;;AAErC;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,WAAW;;AAErB;;AAEA;AACA,iBAAiB,QAAQ;;AAEzB;AACA;AACA;AACA,SAAS;AACT,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sCAAsC,IAAI;AAC1C;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,iBAAiB,KAAK;AACtB;AACA,KAAK;;AAEL;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2DAA2D,KAAK;;AAEhE;AACA,eAAe,OAAO;AACtB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,eAAe;;AAEzB;AACA,UAAU,aAAa;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,YAAY,KAAK;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,GAAG;;AAElB;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,eAAe;;AAEtC;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,QAAQ,OAAO;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,SAAS,OAAO;AAChB,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,KAAK;;AAEvC;;AAEA;AACA,eAAe,KAAK;AACpB;;AAEA;AACA,qBAAqB,OAAO;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;A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","file":"kosher-zmanim.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"KosherZmanim\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"KosherZmanim\"] = factory();\n\telse\n\t\troot[\"KosherZmanim\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o) {\n  var i = 0;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  i = o[Symbol.iterator]();\n  return i.next.bind(i);\n}\n\n// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nvar LuxonError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(LuxonError, _Error);\n\n  function LuxonError() {\n    return _Error.apply(this, arguments) || this;\n  }\n\n  return LuxonError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * @private\n */\n\n\nvar InvalidDateTimeError = /*#__PURE__*/function (_LuxonError) {\n  _inheritsLoose(InvalidDateTimeError, _LuxonError);\n\n  function InvalidDateTimeError(reason) {\n    return _LuxonError.call(this, \"Invalid DateTime: \" + reason.toMessage()) || this;\n  }\n\n  return InvalidDateTimeError;\n}(LuxonError);\n/**\n * @private\n */\n\nvar InvalidIntervalError = /*#__PURE__*/function (_LuxonError2) {\n  _inheritsLoose(InvalidIntervalError, _LuxonError2);\n\n  function InvalidIntervalError(reason) {\n    return _LuxonError2.call(this, \"Invalid Interval: \" + reason.toMessage()) || this;\n  }\n\n  return InvalidIntervalError;\n}(LuxonError);\n/**\n * @private\n */\n\nvar InvalidDurationError = /*#__PURE__*/function (_LuxonError3) {\n  _inheritsLoose(InvalidDurationError, _LuxonError3);\n\n  function InvalidDurationError(reason) {\n    return _LuxonError3.call(this, \"Invalid Duration: \" + reason.toMessage()) || this;\n  }\n\n  return InvalidDurationError;\n}(LuxonError);\n/**\n * @private\n */\n\nvar ConflictingSpecificationError = /*#__PURE__*/function (_LuxonError4) {\n  _inheritsLoose(ConflictingSpecificationError, _LuxonError4);\n\n  function ConflictingSpecificationError() {\n    return _LuxonError4.apply(this, arguments) || this;\n  }\n\n  return ConflictingSpecificationError;\n}(LuxonError);\n/**\n * @private\n */\n\nvar InvalidUnitError = /*#__PURE__*/function (_LuxonError5) {\n  _inheritsLoose(InvalidUnitError, _LuxonError5);\n\n  function InvalidUnitError(unit) {\n    return _LuxonError5.call(this, \"Invalid unit \" + unit) || this;\n  }\n\n  return InvalidUnitError;\n}(LuxonError);\n/**\n * @private\n */\n\nvar InvalidArgumentError = /*#__PURE__*/function (_LuxonError6) {\n  _inheritsLoose(InvalidArgumentError, _LuxonError6);\n\n  function InvalidArgumentError() {\n    return _LuxonError6.apply(this, arguments) || this;\n  }\n\n  return InvalidArgumentError;\n}(LuxonError);\n/**\n * @private\n */\n\nvar ZoneIsAbstractError = /*#__PURE__*/function (_LuxonError7) {\n  _inheritsLoose(ZoneIsAbstractError, _LuxonError7);\n\n  function ZoneIsAbstractError() {\n    return _LuxonError7.call(this, \"Zone is an abstract class\") || this;\n  }\n\n  return ZoneIsAbstractError;\n}(LuxonError);\n\n/**\n * @private\n */\nvar n = \"numeric\",\n    s = \"short\",\n    l = \"long\";\nvar DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n\n};\nvar DATE_MED = {\n  year: n,\n  month: s,\n  day: n\n};\nvar DATE_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s\n};\nvar DATE_FULL = {\n  year: n,\n  month: l,\n  day: n\n};\nvar DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l\n};\nvar TIME_SIMPLE = {\n  hour: n,\n  minute: n\n};\nvar TIME_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n\n};\nvar TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s\n};\nvar TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l\n};\nvar TIME_24_SIMPLE = {\n  hour: n,\n  minute: n,\n  hour12: false\n};\n/**\n * {@link toLocaleString}; format like '09:30:23', always 24-hour.\n */\n\nvar TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n  hour12: false\n};\n/**\n * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.\n */\n\nvar TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hour12: false,\n  timeZoneName: s\n};\n/**\n * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.\n */\n\nvar TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hour12: false,\n  timeZoneName: l\n};\n/**\n * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n */\n\nvar DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n\n};\n/**\n * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n */\n\nvar DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n\n};\nvar DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n\n};\nvar DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n\n};\nvar DATETIME_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n  hour: n,\n  minute: n\n};\nvar DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  timeZoneName: s\n};\nvar DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s\n};\nvar DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  timeZoneName: l\n};\nvar DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l\n};\n\n/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n/**\n * @private\n */\n// TYPES\n\nfunction isUndefined(o) {\n  return typeof o === \"undefined\";\n}\nfunction isNumber(o) {\n  return typeof o === \"number\";\n}\nfunction isInteger(o) {\n  return typeof o === \"number\" && o % 1 === 0;\n}\nfunction isString(o) {\n  return typeof o === \"string\";\n}\nfunction isDate(o) {\n  return Object.prototype.toString.call(o) === \"[object Date]\";\n} // CAPABILITIES\n\nfunction hasIntl() {\n  try {\n    return typeof Intl !== \"undefined\" && Intl.DateTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\nfunction hasFormatToParts() {\n  return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n}\nfunction hasRelative() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\n  } catch (e) {\n    return false;\n  }\n} // OBJECTS AND ARRAYS\n\nfunction maybeArray(thing) {\n  return Array.isArray(thing) ? thing : [thing];\n}\nfunction bestBy(arr, by, compare) {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\n  return arr.reduce(function (best, next) {\n    var pair = [by(next), next];\n\n    if (!best) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, null)[1];\n}\nfunction pick(obj, keys) {\n  return keys.reduce(function (a, k) {\n    a[k] = obj[k];\n    return a;\n  }, {});\n}\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n} // NUMBERS AND STRINGS\n\nfunction integerBetween(thing, bottom, top) {\n  return isInteger(thing) && thing >= bottom && thing <= top;\n} // x % n but takes the sign of n instead of x\n\nfunction floorMod(x, n) {\n  return x - n * Math.floor(x / n);\n}\nfunction padStart(input, n) {\n  if (n === void 0) {\n    n = 2;\n  }\n\n  var minus = input < 0 ? \"-\" : \"\";\n  var target = minus ? input * -1 : input;\n  var result;\n\n  if (target.toString().length < n) {\n    result = (\"0\".repeat(n) + target).slice(-n);\n  } else {\n    result = target.toString();\n  }\n\n  return \"\" + minus + result;\n}\nfunction parseInteger(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseInt(string, 10);\n  }\n}\nfunction parseMillis(fraction) {\n  // Return undefined (instead of 0) in these cases, where fraction is not set\n  if (isUndefined(fraction) || fraction === null || fraction === \"\") {\n    return undefined;\n  } else {\n    var f = parseFloat(\"0.\" + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\nfunction roundTo(number, digits, towardZero) {\n  if (towardZero === void 0) {\n    towardZero = false;\n  }\n\n  var factor = Math.pow(10, digits),\n      rounder = towardZero ? Math.trunc : Math.round;\n  return rounder(number * factor) / factor;\n} // DATE BASICS\n\nfunction isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\nfunction daysInMonth(year, month) {\n  var modMonth = floorMod(month - 1, 12) + 1,\n      modYear = year + (month - modMonth) / 12;\n\n  if (modMonth === 2) {\n    return isLeapYear(modYear) ? 29 : 28;\n  } else {\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n  }\n} // covert a calendar object to a local timestamp (epoch, but with the offset baked in)\n\nfunction objToLocalTS(obj) {\n  var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond); // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\n  }\n\n  return +d;\n}\nfunction weeksInWeekYear(weekYear) {\n  var p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7,\n      last = weekYear - 1,\n      p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\nfunction untruncateYear(year) {\n  if (year > 99) {\n    return year;\n  } else return year > 60 ? 1900 + year : 2000 + year;\n} // PARSING\n\nfunction parseZoneInfo(ts, offsetFormat, locale, timeZone) {\n  if (timeZone === void 0) {\n    timeZone = null;\n  }\n\n  var date = new Date(ts),\n      intlOpts = {\n    hour12: false,\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n  };\n\n  if (timeZone) {\n    intlOpts.timeZone = timeZone;\n  }\n\n  var modified = Object.assign({\n    timeZoneName: offsetFormat\n  }, intlOpts),\n      intl = hasIntl();\n\n  if (intl && hasFormatToParts()) {\n    var parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(function (m) {\n      return m.type.toLowerCase() === \"timezonename\";\n    });\n    return parsed ? parsed.value : null;\n  } else if (intl) {\n    // this probably doesn't work for all locales\n    var without = new Intl.DateTimeFormat(locale, intlOpts).format(date),\n        included = new Intl.DateTimeFormat(locale, modified).format(date),\n        diffed = included.substring(without.length),\n        trimmed = diffed.replace(/^[, \\u200e]+/, \"\");\n    return trimmed;\n  } else {\n    return null;\n  }\n} // signedOffset('-5', '30') -> -330\n\nfunction signedOffset(offHourStr, offMinuteStr) {\n  var offHour = parseInt(offHourStr, 10); // don't || this because we want to preserve -0\n\n  if (Number.isNaN(offHour)) {\n    offHour = 0;\n  }\n\n  var offMin = parseInt(offMinuteStr, 10) || 0,\n      offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n} // COERCION\n\nfunction asNumber(value) {\n  var numericValue = Number(value);\n  if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue)) throw new InvalidArgumentError(\"Invalid unit value \" + value);\n  return numericValue;\n}\nfunction normalizeObject(obj, normalizer, nonUnitKeys) {\n  var normalized = {};\n\n  for (var u in obj) {\n    if (hasOwnProperty(obj, u)) {\n      if (nonUnitKeys.indexOf(u) >= 0) continue;\n      var v = obj[u];\n      if (v === undefined || v === null) continue;\n      normalized[normalizer(u)] = asNumber(v);\n    }\n  }\n\n  return normalized;\n}\nfunction formatOffset(offset, format) {\n  var hours = Math.trunc(Math.abs(offset / 60)),\n      minutes = Math.trunc(Math.abs(offset % 60)),\n      sign = offset >= 0 ? \"+\" : \"-\";\n\n  switch (format) {\n    case \"short\":\n      return \"\" + sign + padStart(hours, 2) + \":\" + padStart(minutes, 2);\n\n    case \"narrow\":\n      return \"\" + sign + hours + (minutes > 0 ? \":\" + minutes : \"\");\n\n    case \"techie\":\n      return \"\" + sign + padStart(hours, 2) + padStart(minutes, 2);\n\n    default:\n      throw new RangeError(\"Value format \" + format + \" is out of range for property format\");\n  }\n}\nfunction timeObject(obj) {\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\n}\nvar ianaRegex = /[A-Za-z_+-]{1,256}(:?\\/[A-Za-z_+-]{1,256}(\\/[A-Za-z_+-]{1,256})?)?/;\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n/**\n * @private\n */\n\n\nvar monthsLong = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nvar monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nvar monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\nfunction months(length) {\n  switch (length) {\n    case \"narrow\":\n      return monthsNarrow;\n\n    case \"short\":\n      return monthsShort;\n\n    case \"long\":\n      return monthsLong;\n\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n\n    case \"2-digit\":\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n\n    default:\n      return null;\n  }\n}\nvar weekdaysLong = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\nvar weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\nvar weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\nfunction weekdays(length) {\n  switch (length) {\n    case \"narrow\":\n      return weekdaysNarrow;\n\n    case \"short\":\n      return weekdaysShort;\n\n    case \"long\":\n      return weekdaysLong;\n\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n\n    default:\n      return null;\n  }\n}\nvar meridiems = [\"AM\", \"PM\"];\nvar erasLong = [\"Before Christ\", \"Anno Domini\"];\nvar erasShort = [\"BC\", \"AD\"];\nvar erasNarrow = [\"B\", \"A\"];\nfunction eras(length) {\n  switch (length) {\n    case \"narrow\":\n      return erasNarrow;\n\n    case \"short\":\n      return erasShort;\n\n    case \"long\":\n      return erasLong;\n\n    default:\n      return null;\n  }\n}\nfunction meridiemForDateTime(dt) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\nfunction weekdayForDateTime(dt, length) {\n  return weekdays(length)[dt.weekday - 1];\n}\nfunction monthForDateTime(dt, length) {\n  return months(length)[dt.month - 1];\n}\nfunction eraForDateTime(dt, length) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\nfunction formatRelativeTime(unit, count, numeric, narrow) {\n  if (numeric === void 0) {\n    numeric = \"always\";\n  }\n\n  if (narrow === void 0) {\n    narrow = false;\n  }\n\n  var units = {\n    years: [\"year\", \"yr.\"],\n    quarters: [\"quarter\", \"qtr.\"],\n    months: [\"month\", \"mo.\"],\n    weeks: [\"week\", \"wk.\"],\n    days: [\"day\", \"day\", \"days\"],\n    hours: [\"hour\", \"hr.\"],\n    minutes: [\"minute\", \"min.\"],\n    seconds: [\"second\", \"sec.\"]\n  };\n  var lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(unit) === -1;\n\n  if (numeric === \"auto\" && lastable) {\n    var isDay = unit === \"days\";\n\n    switch (count) {\n      case 1:\n        return isDay ? \"tomorrow\" : \"next \" + units[unit][0];\n\n      case -1:\n        return isDay ? \"yesterday\" : \"last \" + units[unit][0];\n\n      case 0:\n        return isDay ? \"today\" : \"this \" + units[unit][0];\n\n    }\n  }\n\n  var isInPast = Object.is(count, -0) || count < 0,\n      fmtValue = Math.abs(count),\n      singular = fmtValue === 1,\n      lilUnits = units[unit],\n      fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;\n  return isInPast ? fmtValue + \" \" + fmtUnit + \" ago\" : \"in \" + fmtValue + \" \" + fmtUnit;\n}\nfunction formatString(knownFormat) {\n  // these all have the offsets removed because we don't have access to them\n  // without all the intl stuff this is backfilling\n  var filtered = pick(knownFormat, [\"weekday\", \"era\", \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"timeZoneName\", \"hour12\"]),\n      key = stringify(filtered),\n      dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\n\n  switch (key) {\n    case stringify(DATE_SHORT):\n      return \"M/d/yyyy\";\n\n    case stringify(DATE_MED):\n      return \"LLL d, yyyy\";\n\n    case stringify(DATE_MED_WITH_WEEKDAY):\n      return \"EEE, LLL d, yyyy\";\n\n    case stringify(DATE_FULL):\n      return \"LLLL d, yyyy\";\n\n    case stringify(DATE_HUGE):\n      return \"EEEE, LLLL d, yyyy\";\n\n    case stringify(TIME_SIMPLE):\n      return \"h:mm a\";\n\n    case stringify(TIME_WITH_SECONDS):\n      return \"h:mm:ss a\";\n\n    case stringify(TIME_WITH_SHORT_OFFSET):\n      return \"h:mm a\";\n\n    case stringify(TIME_WITH_LONG_OFFSET):\n      return \"h:mm a\";\n\n    case stringify(TIME_24_SIMPLE):\n      return \"HH:mm\";\n\n    case stringify(TIME_24_WITH_SECONDS):\n      return \"HH:mm:ss\";\n\n    case stringify(TIME_24_WITH_SHORT_OFFSET):\n      return \"HH:mm\";\n\n    case stringify(TIME_24_WITH_LONG_OFFSET):\n      return \"HH:mm\";\n\n    case stringify(DATETIME_SHORT):\n      return \"M/d/yyyy, h:mm a\";\n\n    case stringify(DATETIME_MED):\n      return \"LLL d, yyyy, h:mm a\";\n\n    case stringify(DATETIME_FULL):\n      return \"LLLL d, yyyy, h:mm a\";\n\n    case stringify(DATETIME_HUGE):\n      return dateTimeHuge;\n\n    case stringify(DATETIME_SHORT_WITH_SECONDS):\n      return \"M/d/yyyy, h:mm:ss a\";\n\n    case stringify(DATETIME_MED_WITH_SECONDS):\n      return \"LLL d, yyyy, h:mm:ss a\";\n\n    case stringify(DATETIME_MED_WITH_WEEKDAY):\n      return \"EEE, d LLL yyyy, h:mm a\";\n\n    case stringify(DATETIME_FULL_WITH_SECONDS):\n      return \"LLLL d, yyyy, h:mm:ss a\";\n\n    case stringify(DATETIME_HUGE_WITH_SECONDS):\n      return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\n\n    default:\n      return dateTimeHuge;\n  }\n}\n\nfunction stringifyTokens(splits, tokenToString) {\n  var s = \"\";\n\n  for (var _iterator = _createForOfIteratorHelperLoose(splits), _step; !(_step = _iterator()).done;) {\n    var token = _step.value;\n\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n\n  return s;\n}\n\nvar _macroTokenToFormatOpts = {\n  D: DATE_SHORT,\n  DD: DATE_MED,\n  DDD: DATE_FULL,\n  DDDD: DATE_HUGE,\n  t: TIME_SIMPLE,\n  tt: TIME_WITH_SECONDS,\n  ttt: TIME_WITH_SHORT_OFFSET,\n  tttt: TIME_WITH_LONG_OFFSET,\n  T: TIME_24_SIMPLE,\n  TT: TIME_24_WITH_SECONDS,\n  TTT: TIME_24_WITH_SHORT_OFFSET,\n  TTTT: TIME_24_WITH_LONG_OFFSET,\n  f: DATETIME_SHORT,\n  ff: DATETIME_MED,\n  fff: DATETIME_FULL,\n  ffff: DATETIME_HUGE,\n  F: DATETIME_SHORT_WITH_SECONDS,\n  FF: DATETIME_MED_WITH_SECONDS,\n  FFF: DATETIME_FULL_WITH_SECONDS,\n  FFFF: DATETIME_HUGE_WITH_SECONDS\n};\n/**\n * @private\n */\n\nvar Formatter = /*#__PURE__*/function () {\n  Formatter.create = function create(locale, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new Formatter(locale, opts);\n  };\n\n  Formatter.parseFormat = function parseFormat(fmt) {\n    var current = null,\n        currentFull = \"\",\n        bracketed = false;\n    var splits = [];\n\n    for (var i = 0; i < fmt.length; i++) {\n      var c = fmt.charAt(i);\n\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({\n            literal: bracketed,\n            val: currentFull\n          });\n        }\n\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({\n            literal: false,\n            val: currentFull\n          });\n        }\n\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({\n        literal: bracketed,\n        val: currentFull\n      });\n    }\n\n    return splits;\n  };\n\n  Formatter.macroTokenToFormatOpts = function macroTokenToFormatOpts(token) {\n    return _macroTokenToFormatOpts[token];\n  };\n\n  function Formatter(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  var _proto = Formatter.prototype;\n\n  _proto.formatWithSystemDefault = function formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n\n    var df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  };\n\n  _proto.formatDateTime = function formatDateTime(dt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  };\n\n  _proto.formatDateTimeParts = function formatDateTimeParts(dt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.formatToParts();\n  };\n\n  _proto.resolvedOptions = function resolvedOptions(dt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.resolvedOptions();\n  };\n\n  _proto.num = function num(n, p) {\n    if (p === void 0) {\n      p = 0;\n    }\n\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    var opts = Object.assign({}, this.opts);\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  };\n\n  _proto.formatDateTimeFromString = function formatDateTimeFromString(dt, fmt) {\n    var _this = this;\n\n    var knownEnglish = this.loc.listingMode() === \"en\",\n        useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\" && hasFormatToParts(),\n        string = function string(opts, extract) {\n      return _this.loc.extract(dt, opts, extract);\n    },\n        formatOffset = function formatOffset(opts) {\n      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n        return \"Z\";\n      }\n\n      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n    },\n        meridiem = function meridiem() {\n      return knownEnglish ? meridiemForDateTime(dt) : string({\n        hour: \"numeric\",\n        hour12: true\n      }, \"dayperiod\");\n    },\n        month = function month(length, standalone) {\n      return knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {\n        month: length\n      } : {\n        month: length,\n        day: \"numeric\"\n      }, \"month\");\n    },\n        weekday = function weekday(length, standalone) {\n      return knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {\n        weekday: length\n      } : {\n        weekday: length,\n        month: \"long\",\n        day: \"numeric\"\n      }, \"weekday\");\n    },\n        maybeMacro = function maybeMacro(token) {\n      var formatOpts = Formatter.macroTokenToFormatOpts(token);\n\n      if (formatOpts) {\n        return _this.formatWithSystemDefault(dt, formatOpts);\n      } else {\n        return token;\n      }\n    },\n        era = function era(length) {\n      return knownEnglish ? eraForDateTime(dt, length) : string({\n        era: length\n      }, \"era\");\n    },\n        tokenToString = function tokenToString(token) {\n      // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n      switch (token) {\n        // ms\n        case \"S\":\n          return _this.num(dt.millisecond);\n\n        case \"u\": // falls through\n\n        case \"SSS\":\n          return _this.num(dt.millisecond, 3);\n        // seconds\n\n        case \"s\":\n          return _this.num(dt.second);\n\n        case \"ss\":\n          return _this.num(dt.second, 2);\n        // minutes\n\n        case \"m\":\n          return _this.num(dt.minute);\n\n        case \"mm\":\n          return _this.num(dt.minute, 2);\n        // hours\n\n        case \"h\":\n          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n\n        case \"hh\":\n          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n\n        case \"H\":\n          return _this.num(dt.hour);\n\n        case \"HH\":\n          return _this.num(dt.hour, 2);\n        // offset\n\n        case \"Z\":\n          // like +6\n          return formatOffset({\n            format: \"narrow\",\n            allowZ: _this.opts.allowZ\n          });\n\n        case \"ZZ\":\n          // like +06:00\n          return formatOffset({\n            format: \"short\",\n            allowZ: _this.opts.allowZ\n          });\n\n        case \"ZZZ\":\n          // like +0600\n          return formatOffset({\n            format: \"techie\",\n            allowZ: _this.opts.allowZ\n          });\n\n        case \"ZZZZ\":\n          // like EST\n          return dt.zone.offsetName(dt.ts, {\n            format: \"short\",\n            locale: _this.loc.locale\n          });\n\n        case \"ZZZZZ\":\n          // like Eastern Standard Time\n          return dt.zone.offsetName(dt.ts, {\n            format: \"long\",\n            locale: _this.loc.locale\n          });\n        // zone\n\n        case \"z\":\n          // like America/New_York\n          return dt.zoneName;\n        // meridiems\n\n        case \"a\":\n          return meridiem();\n        // dates\n\n        case \"d\":\n          return useDateTimeFormatter ? string({\n            day: \"numeric\"\n          }, \"day\") : _this.num(dt.day);\n\n        case \"dd\":\n          return useDateTimeFormatter ? string({\n            day: \"2-digit\"\n          }, \"day\") : _this.num(dt.day, 2);\n        // weekdays - standalone\n\n        case \"c\":\n          // like 1\n          return _this.num(dt.weekday);\n\n        case \"ccc\":\n          // like 'Tues'\n          return weekday(\"short\", true);\n\n        case \"cccc\":\n          // like 'Tuesday'\n          return weekday(\"long\", true);\n\n        case \"ccccc\":\n          // like 'T'\n          return weekday(\"narrow\", true);\n        // weekdays - format\n\n        case \"E\":\n          // like 1\n          return _this.num(dt.weekday);\n\n        case \"EEE\":\n          // like 'Tues'\n          return weekday(\"short\", false);\n\n        case \"EEEE\":\n          // like 'Tuesday'\n          return weekday(\"long\", false);\n\n        case \"EEEEE\":\n          // like 'T'\n          return weekday(\"narrow\", false);\n        // months - standalone\n\n        case \"L\":\n          // like 1\n          return useDateTimeFormatter ? string({\n            month: \"numeric\",\n            day: \"numeric\"\n          }, \"month\") : _this.num(dt.month);\n\n        case \"LL\":\n          // like 01, doesn't seem to work\n          return useDateTimeFormatter ? string({\n            month: \"2-digit\",\n            day: \"numeric\"\n          }, \"month\") : _this.num(dt.month, 2);\n\n        case \"LLL\":\n          // like Jan\n          return month(\"short\", true);\n\n        case \"LLLL\":\n          // like January\n          return month(\"long\", true);\n\n        case \"LLLLL\":\n          // like J\n          return month(\"narrow\", true);\n        // months - format\n\n        case \"M\":\n          // like 1\n          return useDateTimeFormatter ? string({\n            month: \"numeric\"\n          }, \"month\") : _this.num(dt.month);\n\n        case \"MM\":\n          // like 01\n          return useDateTimeFormatter ? string({\n            month: \"2-digit\"\n          }, \"month\") : _this.num(dt.month, 2);\n\n        case \"MMM\":\n          // like Jan\n          return month(\"short\", false);\n\n        case \"MMMM\":\n          // like January\n          return month(\"long\", false);\n\n        case \"MMMMM\":\n          // like J\n          return month(\"narrow\", false);\n        // years\n\n        case \"y\":\n          // like 2014\n          return useDateTimeFormatter ? string({\n            year: \"numeric\"\n          }, \"year\") : _this.num(dt.year);\n\n        case \"yy\":\n          // like 14\n          return useDateTimeFormatter ? string({\n            year: \"2-digit\"\n          }, \"year\") : _this.num(dt.year.toString().slice(-2), 2);\n\n        case \"yyyy\":\n          // like 0012\n          return useDateTimeFormatter ? string({\n            year: \"numeric\"\n          }, \"year\") : _this.num(dt.year, 4);\n\n        case \"yyyyyy\":\n          // like 000012\n          return useDateTimeFormatter ? string({\n            year: \"numeric\"\n          }, \"year\") : _this.num(dt.year, 6);\n        // eras\n\n        case \"G\":\n          // like AD\n          return era(\"short\");\n\n        case \"GG\":\n          // like Anno Domini\n          return era(\"long\");\n\n        case \"GGGGG\":\n          return era(\"narrow\");\n\n        case \"kk\":\n          return _this.num(dt.weekYear.toString().slice(-2), 2);\n\n        case \"kkkk\":\n          return _this.num(dt.weekYear, 4);\n\n        case \"W\":\n          return _this.num(dt.weekNumber);\n\n        case \"WW\":\n          return _this.num(dt.weekNumber, 2);\n\n        case \"o\":\n          return _this.num(dt.ordinal);\n\n        case \"ooo\":\n          return _this.num(dt.ordinal, 3);\n\n        case \"q\":\n          // like 1\n          return _this.num(dt.quarter);\n\n        case \"qq\":\n          // like 01\n          return _this.num(dt.quarter, 2);\n\n        case \"X\":\n          return _this.num(Math.floor(dt.ts / 1000));\n\n        case \"x\":\n          return _this.num(dt.ts);\n\n        default:\n          return maybeMacro(token);\n      }\n    };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  };\n\n  _proto.formatDurationFromString = function formatDurationFromString(dur, fmt) {\n    var _this2 = this;\n\n    var tokenToField = function tokenToField(token) {\n      switch (token[0]) {\n        case \"S\":\n          return \"millisecond\";\n\n        case \"s\":\n          return \"second\";\n\n        case \"m\":\n          return \"minute\";\n\n        case \"h\":\n          return \"hour\";\n\n        case \"d\":\n          return \"day\";\n\n        case \"M\":\n          return \"month\";\n\n        case \"y\":\n          return \"year\";\n\n        default:\n          return null;\n      }\n    },\n        tokenToString = function tokenToString(lildur) {\n      return function (token) {\n        var mapped = tokenToField(token);\n\n        if (mapped) {\n          return _this2.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      };\n    },\n        tokens = Formatter.parseFormat(fmt),\n        realTokens = tokens.reduce(function (found, _ref) {\n      var literal = _ref.literal,\n          val = _ref.val;\n      return literal ? found : found.concat(val);\n    }, []),\n        collapsed = dur.shiftTo.apply(dur, realTokens.map(tokenToField).filter(function (t) {\n      return t;\n    }));\n\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  };\n\n  return Formatter;\n}();\n\nvar Invalid = /*#__PURE__*/function () {\n  function Invalid(reason, explanation) {\n    this.reason = reason;\n    this.explanation = explanation;\n  }\n\n  var _proto = Invalid.prototype;\n\n  _proto.toMessage = function toMessage() {\n    if (this.explanation) {\n      return this.reason + \": \" + this.explanation;\n    } else {\n      return this.reason;\n    }\n  };\n\n  return Invalid;\n}();\n\n/**\n * @interface\n */\n\nvar Zone = /*#__PURE__*/function () {\n  function Zone() {}\n\n  var _proto = Zone.prototype;\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  _proto.offsetName = function offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  ;\n\n  _proto.formatOffset = function formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  ;\n\n  _proto.offset = function offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  ;\n\n  _proto.equals = function equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  ;\n\n  _createClass(Zone, [{\n    key: \"type\",\n\n    /**\n     * The type of zone\n     * @abstract\n     * @type {string}\n     */\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n    /**\n     * The name of this zone.\n     * @abstract\n     * @type {string}\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n    /**\n     * Returns whether the offset is known to be fixed for the whole year.\n     * @abstract\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"universal\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n  }]);\n\n  return Zone;\n}();\n\nvar singleton = null;\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\n\nvar LocalZone = /*#__PURE__*/function (_Zone) {\n  _inheritsLoose(LocalZone, _Zone);\n\n  function LocalZone() {\n    return _Zone.apply(this, arguments) || this;\n  }\n\n  var _proto = LocalZone.prototype;\n\n  /** @override **/\n  _proto.offsetName = function offsetName(ts, _ref) {\n    var format = _ref.format,\n        locale = _ref.locale;\n    return parseZoneInfo(ts, format, locale);\n  }\n  /** @override **/\n  ;\n\n  _proto.formatOffset = function formatOffset$1(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n  /** @override **/\n  ;\n\n  _proto.offset = function offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n  /** @override **/\n  ;\n\n  _proto.equals = function equals(otherZone) {\n    return otherZone.type === \"local\";\n  }\n  /** @override **/\n  ;\n\n  _createClass(LocalZone, [{\n    key: \"type\",\n\n    /** @override **/\n    get: function get() {\n      return \"local\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      if (hasIntl()) {\n        return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n      } else return \"local\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"universal\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }], [{\n    key: \"instance\",\n\n    /**\n     * Get a singleton instance of the local zone\n     * @return {LocalZone}\n     */\n    get: function get() {\n      if (singleton === null) {\n        singleton = new LocalZone();\n      }\n\n      return singleton;\n    }\n  }]);\n\n  return LocalZone;\n}(Zone);\n\nvar matchingRegex = RegExp(\"^\" + ianaRegex.source + \"$\");\nvar dtfCache = {};\n\nfunction makeDTF(zone) {\n  if (!dtfCache[zone]) {\n    dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\n      hour12: false,\n      timeZone: zone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\"\n    });\n  }\n\n  return dtfCache[zone];\n}\n\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\n      parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n      fMonth = parsed[1],\n      fDay = parsed[2],\n      fYear = parsed[3],\n      fHour = parsed[4],\n      fMinute = parsed[5],\n      fSecond = parsed[6];\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  var formatted = dtf.formatToParts(date),\n      filled = [];\n\n  for (var i = 0; i < formatted.length; i++) {\n    var _formatted$i = formatted[i],\n        type = _formatted$i.type,\n        value = _formatted$i.value,\n        pos = typeToPos[type];\n\n    if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n\n  return filled;\n}\n\nvar ianaZoneCache = {};\n/**\n * A zone identified by an IANA identifier, like America/New_York\n * @implements {Zone}\n */\n\nvar IANAZone = /*#__PURE__*/function (_Zone) {\n  _inheritsLoose(IANAZone, _Zone);\n\n  /**\n   * @param {string} name - Zone name\n   * @return {IANAZone}\n   */\n  IANAZone.create = function create(name) {\n    if (!ianaZoneCache[name]) {\n      ianaZoneCache[name] = new IANAZone(name);\n    }\n\n    return ianaZoneCache[name];\n  }\n  /**\n   * Reset local caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  ;\n\n  IANAZone.resetCache = function resetCache() {\n    ianaZoneCache = {};\n    dtfCache = {};\n  }\n  /**\n   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\n   * @param {string} s - The string to check validity on\n   * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Fantasia/Castle\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */\n  ;\n\n  IANAZone.isValidSpecifier = function isValidSpecifier(s) {\n    return !!(s && s.match(matchingRegex));\n  }\n  /**\n   * Returns whether the provided string identifies a real zone\n   * @param {string} zone - The string to check\n   * @example IANAZone.isValidZone(\"America/New_York\") //=> true\n   * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\n   * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */\n  ;\n\n  IANAZone.isValidZone = function isValidZone(zone) {\n    try {\n      new Intl.DateTimeFormat(\"en-US\", {\n        timeZone: zone\n      }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  } // Etc/GMT+8 -> -480\n\n  /** @ignore */\n  ;\n\n  IANAZone.parseGMTOffset = function parseGMTOffset(specifier) {\n    if (specifier) {\n      var match = specifier.match(/^Etc\\/GMT([+-]\\d{1,2})$/i);\n\n      if (match) {\n        return -60 * parseInt(match[1]);\n      }\n    }\n\n    return null;\n  };\n\n  function IANAZone(name) {\n    var _this;\n\n    _this = _Zone.call(this) || this;\n    /** @private **/\n\n    _this.zoneName = name;\n    /** @private **/\n\n    _this.valid = IANAZone.isValidZone(name);\n    return _this;\n  }\n  /** @override **/\n\n\n  var _proto = IANAZone.prototype;\n\n  /** @override **/\n  _proto.offsetName = function offsetName(ts, _ref) {\n    var format = _ref.format,\n        locale = _ref.locale;\n    return parseZoneInfo(ts, format, locale, this.name);\n  }\n  /** @override **/\n  ;\n\n  _proto.formatOffset = function formatOffset$1(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n  /** @override **/\n  ;\n\n  _proto.offset = function offset(ts) {\n    var date = new Date(ts),\n        dtf = makeDTF(this.name),\n        _ref2 = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date),\n        year = _ref2[0],\n        month = _ref2[1],\n        day = _ref2[2],\n        hour = _ref2[3],\n        minute = _ref2[4],\n        second = _ref2[5],\n        adjustedHour = hour === 24 ? 0 : hour;\n\n    var asUTC = objToLocalTS({\n      year: year,\n      month: month,\n      day: day,\n      hour: adjustedHour,\n      minute: minute,\n      second: second,\n      millisecond: 0\n    });\n    var asTS = +date;\n    var over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n  /** @override **/\n  ;\n\n  _proto.equals = function equals(otherZone) {\n    return otherZone.type === \"iana\" && otherZone.name === this.name;\n  }\n  /** @override **/\n  ;\n\n  _createClass(IANAZone, [{\n    key: \"type\",\n    get: function get() {\n      return \"iana\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.zoneName;\n    }\n    /** @override **/\n\n  }, {\n    key: \"universal\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return this.valid;\n    }\n  }]);\n\n  return IANAZone;\n}(Zone);\n\nvar singleton$1 = null;\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\n\nvar FixedOffsetZone = /*#__PURE__*/function (_Zone) {\n  _inheritsLoose(FixedOffsetZone, _Zone);\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  FixedOffsetZone.instance = function instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n  ;\n\n  FixedOffsetZone.parseSpecifier = function parseSpecifier(s) {\n    if (s) {\n      var r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n\n    return null;\n  };\n\n  _createClass(FixedOffsetZone, null, [{\n    key: \"utcInstance\",\n\n    /**\n     * Get a singleton instance of UTC\n     * @return {FixedOffsetZone}\n     */\n    get: function get() {\n      if (singleton$1 === null) {\n        singleton$1 = new FixedOffsetZone(0);\n      }\n\n      return singleton$1;\n    }\n  }]);\n\n  function FixedOffsetZone(offset) {\n    var _this;\n\n    _this = _Zone.call(this) || this;\n    /** @private **/\n\n    _this.fixed = offset;\n    return _this;\n  }\n  /** @override **/\n\n\n  var _proto = FixedOffsetZone.prototype;\n\n  /** @override **/\n  _proto.offsetName = function offsetName() {\n    return this.name;\n  }\n  /** @override **/\n  ;\n\n  _proto.formatOffset = function formatOffset$1(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n  /** @override **/\n  ;\n\n  /** @override **/\n  _proto.offset = function offset() {\n    return this.fixed;\n  }\n  /** @override **/\n  ;\n\n  _proto.equals = function equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n  /** @override **/\n  ;\n\n  _createClass(FixedOffsetZone, [{\n    key: \"type\",\n    get: function get() {\n      return \"fixed\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.fixed === 0 ? \"UTC\" : \"UTC\" + formatOffset(this.fixed, \"narrow\");\n    }\n  }, {\n    key: \"universal\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return FixedOffsetZone;\n}(Zone);\n\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\n\nvar InvalidZone = /*#__PURE__*/function (_Zone) {\n  _inheritsLoose(InvalidZone, _Zone);\n\n  function InvalidZone(zoneName) {\n    var _this;\n\n    _this = _Zone.call(this) || this;\n    /**  @private */\n\n    _this.zoneName = zoneName;\n    return _this;\n  }\n  /** @override **/\n\n\n  var _proto = InvalidZone.prototype;\n\n  /** @override **/\n  _proto.offsetName = function offsetName() {\n    return null;\n  }\n  /** @override **/\n  ;\n\n  _proto.formatOffset = function formatOffset() {\n    return \"\";\n  }\n  /** @override **/\n  ;\n\n  _proto.offset = function offset() {\n    return NaN;\n  }\n  /** @override **/\n  ;\n\n  _proto.equals = function equals() {\n    return false;\n  }\n  /** @override **/\n  ;\n\n  _createClass(InvalidZone, [{\n    key: \"type\",\n    get: function get() {\n      return \"invalid\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.zoneName;\n    }\n    /** @override **/\n\n  }, {\n    key: \"universal\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return InvalidZone;\n}(Zone);\n\n/**\n * @private\n */\nfunction normalizeZone(input, defaultZone) {\n  var offset;\n\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    var lowered = input.toLowerCase();\n    if (lowered === \"local\") return defaultZone;else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;else if ((offset = IANAZone.parseGMTOffset(input)) != null) {\n      // handle Etc/GMT-4, which V8 chokes on\n      return FixedOffsetZone.instance(offset);\n    } else if (IANAZone.isValidSpecifier(lowered)) return IANAZone.create(input);else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && input.offset && typeof input.offset === \"number\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n\nvar now = function now() {\n  return Date.now();\n},\n    defaultZone = null,\n    // not setting this directly to LocalZone.instance bc loading order issues\ndefaultLocale = null,\n    defaultNumberingSystem = null,\n    defaultOutputCalendar = null,\n    throwOnInvalid = false;\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\n\n\nvar Settings = /*#__PURE__*/function () {\n  function Settings() {}\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  Settings.resetCaches = function resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  };\n\n  _createClass(Settings, null, [{\n    key: \"now\",\n\n    /**\n     * Get the callback for returning the current timestamp.\n     * @type {function}\n     */\n    get: function get() {\n      return now;\n    }\n    /**\n     * Set the callback for returning the current timestamp.\n     * The function should return a number, which will be interpreted as an Epoch millisecond count\n     * @type {function}\n     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n     */\n    ,\n    set: function set(n) {\n      now = n;\n    }\n    /**\n     * Get the default time zone to create DateTimes in.\n     * @type {string}\n     */\n\n  }, {\n    key: \"defaultZoneName\",\n    get: function get() {\n      return Settings.defaultZone.name;\n    }\n    /**\n     * Set the default time zone to create DateTimes in. Does not affect existing instances.\n     * @type {string}\n     */\n    ,\n    set: function set(z) {\n      if (!z) {\n        defaultZone = null;\n      } else {\n        defaultZone = normalizeZone(z);\n      }\n    }\n    /**\n     * Get the default time zone object to create DateTimes in. Does not affect existing instances.\n     * @type {Zone}\n     */\n\n  }, {\n    key: \"defaultZone\",\n    get: function get() {\n      return defaultZone || LocalZone.instance;\n    }\n    /**\n     * Get the default locale to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n\n  }, {\n    key: \"defaultLocale\",\n    get: function get() {\n      return defaultLocale;\n    }\n    /**\n     * Set the default locale to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n    ,\n    set: function set(locale) {\n      defaultLocale = locale;\n    }\n    /**\n     * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n\n  }, {\n    key: \"defaultNumberingSystem\",\n    get: function get() {\n      return defaultNumberingSystem;\n    }\n    /**\n     * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n    ,\n    set: function set(numberingSystem) {\n      defaultNumberingSystem = numberingSystem;\n    }\n    /**\n     * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n\n  }, {\n    key: \"defaultOutputCalendar\",\n    get: function get() {\n      return defaultOutputCalendar;\n    }\n    /**\n     * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n    ,\n    set: function set(outputCalendar) {\n      defaultOutputCalendar = outputCalendar;\n    }\n    /**\n     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"throwOnInvalid\",\n    get: function get() {\n      return throwOnInvalid;\n    }\n    /**\n     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n     * @type {boolean}\n     */\n    ,\n    set: function set(t) {\n      throwOnInvalid = t;\n    }\n  }]);\n\n  return Settings;\n}();\n\nvar intlDTCache = {};\n\nfunction getCachedDTF(locString, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var key = JSON.stringify([locString, opts]);\n  var dtf = intlDTCache[key];\n\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n\n  return dtf;\n}\n\nvar intlNumCache = {};\n\nfunction getCachedINF(locString, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var key = JSON.stringify([locString, opts]);\n  var inf = intlNumCache[key];\n\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n\n  return inf;\n}\n\nvar intlRelCache = {};\n\nfunction getCachedRTF(locString, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var _opts = opts,\n      base = _opts.base,\n      cacheKeyOpts = _objectWithoutPropertiesLoose(_opts, [\"base\"]); // exclude `base` from the options\n\n\n  var key = JSON.stringify([locString, cacheKeyOpts]);\n  var inf = intlRelCache[key];\n\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n\n  return inf;\n}\n\nvar sysLocaleCache = null;\n\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else if (hasIntl()) {\n    var computedSys = new Intl.DateTimeFormat().resolvedOptions().locale; // node sometimes defaults to \"und\". Override that because that is dumb\n\n    sysLocaleCache = !computedSys || computedSys === \"und\" ? \"en-US\" : computedSys;\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = \"en-US\";\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n  var uIndex = localeStr.indexOf(\"-u-\");\n\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    var options;\n    var smaller = localeStr.substring(0, uIndex);\n\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    var _options = options,\n        numberingSystem = _options.numberingSystem,\n        calendar = _options.calendar; // return the smaller one so that we can append the calendar and numbering overrides to it\n\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (hasIntl()) {\n    if (outputCalendar || numberingSystem) {\n      localeStr += \"-u\";\n\n      if (outputCalendar) {\n        localeStr += \"-ca-\" + outputCalendar;\n      }\n\n      if (numberingSystem) {\n        localeStr += \"-nu-\" + numberingSystem;\n      }\n\n      return localeStr;\n    } else {\n      return localeStr;\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction mapMonths(f) {\n  var ms = [];\n\n  for (var i = 1; i <= 12; i++) {\n    var dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  var ms = [];\n\n  for (var i = 1; i <= 7; i++) {\n    var dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  var mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return loc.numberingSystem === \"latn\" || !loc.locale || loc.locale.startsWith(\"en\") || hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\";\n  }\n}\n/**\n * @private\n */\n\n\nvar PolyNumberFormatter = /*#__PURE__*/function () {\n  function PolyNumberFormatter(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    if (!forceSimple && hasIntl()) {\n      var intlOpts = {\n        useGrouping: false\n      };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  var _proto = PolyNumberFormatter.prototype;\n\n  _proto.format = function format(i) {\n    if (this.inf) {\n      var fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n\n      return padStart(_fixed, this.padTo);\n    }\n  };\n\n  return PolyNumberFormatter;\n}();\n/**\n * @private\n */\n\n\nvar PolyDateFormatter = /*#__PURE__*/function () {\n  function PolyDateFormatter(dt, intl, opts) {\n    this.opts = opts;\n    this.hasIntl = hasIntl();\n    var z;\n\n    if (dt.zone.universal && this.hasIntl) {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Outside of the supported range Etc/GMT-14 to Etc/GMT+12.\n      // 2. Not a whole hour, e.g. UTC+4:30.\n      var gmtOffset = -1 * (dt.offset / 60);\n\n      if (gmtOffset >= -14 && gmtOffset <= 12 && gmtOffset % 1 === 0) {\n        z = gmtOffset >= 0 ? \"Etc/GMT+\" + gmtOffset : \"Etc/GMT\" + gmtOffset;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.\n        // So we have to make do. Two cases:\n        // 1. The format options tell us to show the zone. We can't do that, so the best\n        // we can do is format the date in UTC.\n        // 2. The format options don't tell us to show the zone. Then we can adjust them\n        // the time and tell the formatter to show it to us in UTC, so that the time is right\n        // and the bad zone doesn't show up.\n        z = \"UTC\";\n\n        if (opts.timeZoneName) {\n          this.dt = dt;\n        } else {\n          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n        }\n      }\n    } else if (dt.zone.type === \"local\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    if (this.hasIntl) {\n      var intlOpts = Object.assign({}, this.opts);\n\n      if (z) {\n        intlOpts.timeZone = z;\n      }\n\n      this.dtf = getCachedDTF(intl, intlOpts);\n    }\n  }\n\n  var _proto2 = PolyDateFormatter.prototype;\n\n  _proto2.format = function format() {\n    if (this.hasIntl) {\n      return this.dtf.format(this.dt.toJSDate());\n    } else {\n      var tokenFormat = formatString(this.opts),\n          loc = Locale.create(\"en-US\");\n      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);\n    }\n  };\n\n  _proto2.formatToParts = function formatToParts() {\n    if (this.hasIntl && hasFormatToParts()) {\n      return this.dtf.formatToParts(this.dt.toJSDate());\n    } else {\n      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings\n      // and IMO it's too weird to have an uncanny valley like that\n      return [];\n    }\n  };\n\n  _proto2.resolvedOptions = function resolvedOptions() {\n    if (this.hasIntl) {\n      return this.dtf.resolvedOptions();\n    } else {\n      return {\n        locale: \"en-US\",\n        numberingSystem: \"latn\",\n        outputCalendar: \"gregory\"\n      };\n    }\n  };\n\n  return PolyDateFormatter;\n}();\n/**\n * @private\n */\n\n\nvar PolyRelFormatter = /*#__PURE__*/function () {\n  function PolyRelFormatter(intl, isEnglish, opts) {\n    this.opts = Object.assign({\n      style: \"long\"\n    }, opts);\n\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  var _proto3 = PolyRelFormatter.prototype;\n\n  _proto3.format = function format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  };\n\n  _proto3.formatToParts = function formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  };\n\n  return PolyRelFormatter;\n}();\n/**\n * @private\n */\n\n\nvar Locale = /*#__PURE__*/function () {\n  Locale.fromOpts = function fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  };\n\n  Locale.create = function create(locale, numberingSystem, outputCalendar, defaultToEN) {\n    if (defaultToEN === void 0) {\n      defaultToEN = false;\n    }\n\n    var specifiedLocale = locale || Settings.defaultLocale,\n        // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n    localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale()),\n        numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,\n        outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  };\n\n  Locale.resetCache = function resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  };\n\n  Locale.fromObject = function fromObject(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        locale = _ref.locale,\n        numberingSystem = _ref.numberingSystem,\n        outputCalendar = _ref.outputCalendar;\n\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  };\n\n  function Locale(locale, numbering, outputCalendar, specifiedLocale) {\n    var _parseLocaleString = parseLocaleString(locale),\n        parsedLocale = _parseLocaleString[0],\n        parsedNumberingSystem = _parseLocaleString[1],\n        parsedOutputCalendar = _parseLocaleString[2];\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n    this.weekdaysCache = {\n      format: {},\n      standalone: {}\n    };\n    this.monthsCache = {\n      format: {},\n      standalone: {}\n    };\n    this.meridiemCache = null;\n    this.eraCache = {};\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  var _proto4 = Locale.prototype;\n\n  _proto4.listingMode = function listingMode(defaultOK) {\n    if (defaultOK === void 0) {\n      defaultOK = true;\n    }\n\n    var intl = hasIntl(),\n        hasFTP = intl && hasFormatToParts(),\n        isActuallyEn = this.isEnglish(),\n        hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === \"latn\") && (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n\n    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {\n      return \"error\";\n    } else if (!hasFTP || isActuallyEn && hasNoWeirdness) {\n      return \"en\";\n    } else {\n      return \"intl\";\n    }\n  };\n\n  _proto4.clone = function clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);\n    }\n  };\n\n  _proto4.redefaultToEN = function redefaultToEN(alts) {\n    if (alts === void 0) {\n      alts = {};\n    }\n\n    return this.clone(Object.assign({}, alts, {\n      defaultToEN: true\n    }));\n  };\n\n  _proto4.redefaultToSystem = function redefaultToSystem(alts) {\n    if (alts === void 0) {\n      alts = {};\n    }\n\n    return this.clone(Object.assign({}, alts, {\n      defaultToEN: false\n    }));\n  };\n\n  _proto4.months = function months$1(length, format, defaultOK) {\n    var _this = this;\n\n    if (format === void 0) {\n      format = false;\n    }\n\n    if (defaultOK === void 0) {\n      defaultOK = true;\n    }\n\n    return listStuff(this, length, defaultOK, months, function () {\n      var intl = format ? {\n        month: length,\n        day: \"numeric\"\n      } : {\n        month: length\n      },\n          formatStr = format ? \"format\" : \"standalone\";\n\n      if (!_this.monthsCache[formatStr][length]) {\n        _this.monthsCache[formatStr][length] = mapMonths(function (dt) {\n          return _this.extract(dt, intl, \"month\");\n        });\n      }\n\n      return _this.monthsCache[formatStr][length];\n    });\n  };\n\n  _proto4.weekdays = function weekdays$1(length, format, defaultOK) {\n    var _this2 = this;\n\n    if (format === void 0) {\n      format = false;\n    }\n\n    if (defaultOK === void 0) {\n      defaultOK = true;\n    }\n\n    return listStuff(this, length, defaultOK, weekdays, function () {\n      var intl = format ? {\n        weekday: length,\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n      } : {\n        weekday: length\n      },\n          formatStr = format ? \"format\" : \"standalone\";\n\n      if (!_this2.weekdaysCache[formatStr][length]) {\n        _this2.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {\n          return _this2.extract(dt, intl, \"weekday\");\n        });\n      }\n\n      return _this2.weekdaysCache[formatStr][length];\n    });\n  };\n\n  _proto4.meridiems = function meridiems$1(defaultOK) {\n    var _this3 = this;\n\n    if (defaultOK === void 0) {\n      defaultOK = true;\n    }\n\n    return listStuff(this, undefined, defaultOK, function () {\n      return meridiems;\n    }, function () {\n      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n      // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n      if (!_this3.meridiemCache) {\n        var intl = {\n          hour: \"numeric\",\n          hour12: true\n        };\n        _this3.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {\n          return _this3.extract(dt, intl, \"dayperiod\");\n        });\n      }\n\n      return _this3.meridiemCache;\n    });\n  };\n\n  _proto4.eras = function eras$1(length, defaultOK) {\n    var _this4 = this;\n\n    if (defaultOK === void 0) {\n      defaultOK = true;\n    }\n\n    return listStuff(this, length, defaultOK, eras, function () {\n      var intl = {\n        era: length\n      }; // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n\n      if (!_this4.eraCache[length]) {\n        _this4.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {\n          return _this4.extract(dt, intl, \"era\");\n        });\n      }\n\n      return _this4.eraCache[length];\n    });\n  };\n\n  _proto4.extract = function extract(dt, intlOpts, field) {\n    var df = this.dtFormatter(dt, intlOpts),\n        results = df.formatToParts(),\n        matching = results.find(function (m) {\n      return m.type.toLowerCase() === field;\n    });\n    return matching ? matching.value : null;\n  };\n\n  _proto4.numberFormatter = function numberFormatter(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  };\n\n  _proto4.dtFormatter = function dtFormatter(dt, intlOpts) {\n    if (intlOpts === void 0) {\n      intlOpts = {};\n    }\n\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  };\n\n  _proto4.relFormatter = function relFormatter(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  };\n\n  _proto4.isEnglish = function isEnglish() {\n    return this.locale === \"en\" || this.locale.toLowerCase() === \"en-us\" || hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\");\n  };\n\n  _proto4.equals = function equals(other) {\n    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;\n  };\n\n  _createClass(Locale, [{\n    key: \"fastNumbers\",\n    get: function get() {\n      if (this.fastNumbersCached == null) {\n        this.fastNumbersCached = supportsFastNumbers(this);\n      }\n\n      return this.fastNumbersCached;\n    }\n  }]);\n\n  return Locale;\n}();\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nfunction combineRegexes() {\n  for (var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++) {\n    regexes[_key] = arguments[_key];\n  }\n\n  var full = regexes.reduce(function (f, r) {\n    return f + r.source;\n  }, \"\");\n  return RegExp(\"^\" + full + \"$\");\n}\n\nfunction combineExtractors() {\n  for (var _len2 = arguments.length, extractors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    extractors[_key2] = arguments[_key2];\n  }\n\n  return function (m) {\n    return extractors.reduce(function (_ref, ex) {\n      var mergedVals = _ref[0],\n          mergedZone = _ref[1],\n          cursor = _ref[2];\n\n      var _ex = ex(m, cursor),\n          val = _ex[0],\n          zone = _ex[1],\n          next = _ex[2];\n\n      return [Object.assign(mergedVals, val), mergedZone || zone, next];\n    }, [{}, null, 1]).slice(0, 2);\n  };\n}\n\nfunction parse(s) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (var _len3 = arguments.length, patterns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    patterns[_key3 - 1] = arguments[_key3];\n  }\n\n  for (var _i = 0, _patterns = patterns; _i < _patterns.length; _i++) {\n    var _patterns$_i = _patterns[_i],\n        regex = _patterns$_i[0],\n        extractor = _patterns$_i[1];\n    var m = regex.exec(s);\n\n    if (m) {\n      return extractor(m);\n    }\n  }\n\n  return [null, null];\n}\n\nfunction simpleParse() {\n  for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    keys[_key4] = arguments[_key4];\n  }\n\n  return function (match, cursor) {\n    var ret = {};\n    var i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n\n    return [ret, null, cursor + i];\n  };\n} // ISO and SQL parsing\n\n\nvar offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n    isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/,\n    isoTimeRegex = RegExp(\"\" + isoTimeBaseRegex.source + offsetRegex.source + \"?\"),\n    isoTimeExtensionRegex = RegExp(\"(?:T\" + isoTimeRegex.source + \")?\"),\n    isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n    isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/,\n    isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n    extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\"),\n    extractISOOrdinalData = simpleParse(\"year\", \"ordinal\"),\n    sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/,\n    // dumbed-down version of the ISO one\nsqlTimeRegex = RegExp(isoTimeBaseRegex.source + \" ?(?:\" + offsetRegex.source + \"|(\" + ianaRegex.source + \"))?\"),\n    sqlTimeExtensionRegex = RegExp(\"(?: \" + sqlTimeRegex.source + \")?\");\n\nfunction int(match, pos, fallback) {\n  var m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match, cursor) {\n  var item = {\n    year: int(match, cursor),\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1)\n  };\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  var item = {\n    hours: int(match, cursor, 0),\n    minutes: int(match, cursor + 1, 0),\n    seconds: int(match, cursor + 2, 0),\n    milliseconds: parseMillis(match[cursor + 3])\n  };\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  var local = !match[cursor] && !match[cursor + 1],\n      fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n      zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  var zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n} // ISO time parsing\n\n\nvar isoTimeOnly = RegExp(\"^T?\" + isoTimeBaseRegex.source + \"$\"); // ISO duration parsing\n\nvar isoDuration = /^-?P(?:(?:(-?\\d{1,9})Y)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})W)?(?:(-?\\d{1,9})D)?(?:T(?:(-?\\d{1,9})H)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,9}))?S)?)?)$/;\n\nfunction extractISODuration(match) {\n  var s = match[0],\n      yearStr = match[1],\n      monthStr = match[2],\n      weekStr = match[3],\n      dayStr = match[4],\n      hourStr = match[5],\n      minuteStr = match[6],\n      secondStr = match[7],\n      millisecondsStr = match[8];\n  var hasNegativePrefix = s[0] === \"-\";\n\n  var maybeNegate = function maybeNegate(num) {\n    return num && hasNegativePrefix ? -num : num;\n  };\n\n  return [{\n    years: maybeNegate(parseInteger(yearStr)),\n    months: maybeNegate(parseInteger(monthStr)),\n    weeks: maybeNegate(parseInteger(weekStr)),\n    days: maybeNegate(parseInteger(dayStr)),\n    hours: maybeNegate(parseInteger(hourStr)),\n    minutes: maybeNegate(parseInteger(minuteStr)),\n    seconds: maybeNegate(parseInteger(secondStr)),\n    milliseconds: maybeNegate(parseMillis(millisecondsStr))\n  }];\n} // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\n\n\nvar obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  var result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr)\n  };\n  if (secondStr) result.second = parseInteger(secondStr);\n\n  if (weekdayStr) {\n    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n} // RFC 2822/5322\n\n\nvar rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  var weekdayStr = match[1],\n      dayStr = match[2],\n      monthStr = match[3],\n      yearStr = match[4],\n      hourStr = match[5],\n      minuteStr = match[6],\n      secondStr = match[7],\n      obsOffset = match[8],\n      milOffset = match[9],\n      offHourStr = match[10],\n      offMinuteStr = match[11],\n      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  var offset;\n\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s.replace(/\\([^)]*\\)|[\\n\\t]/g, \" \").replace(/(\\s\\s+)/g, \" \").trim();\n} // http date\n\n\nvar rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n    rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n    ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  var weekdayStr = match[1],\n      dayStr = match[2],\n      monthStr = match[3],\n      yearStr = match[4],\n      hourStr = match[5],\n      minuteStr = match[6],\n      secondStr = match[7],\n      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  var weekdayStr = match[1],\n      monthStr = match[2],\n      dayStr = match[3],\n      hourStr = match[4],\n      minuteStr = match[5],\n      secondStr = match[6],\n      yearStr = match[7],\n      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nvar isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nvar isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nvar isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nvar isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\nvar extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset);\nvar extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset);\nvar extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);\nvar extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);\n/**\n * @private\n */\n\nfunction parseISODate(s) {\n  return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);\n}\nfunction parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\nfunction parseHTTPDate(s) {\n  return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);\n}\nfunction parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\nvar extractISOTimeOnly = combineExtractors(extractISOTime);\nfunction parseISOTimeOnly(s) {\n  return parse(s, [isoTimeOnly, extractISOTimeOnly]);\n}\nvar sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nvar sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\nvar extractISOYmdTimeOffsetAndIANAZone = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);\nvar extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);\nfunction parseSQL(s) {\n  return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);\n}\n\nvar INVALID = \"Invalid Duration\"; // unit conversion constants\n\nvar lowOrderMatrix = {\n  weeks: {\n    days: 7,\n    hours: 7 * 24,\n    minutes: 7 * 24 * 60,\n    seconds: 7 * 24 * 60 * 60,\n    milliseconds: 7 * 24 * 60 * 60 * 1000\n  },\n  days: {\n    hours: 24,\n    minutes: 24 * 60,\n    seconds: 24 * 60 * 60,\n    milliseconds: 24 * 60 * 60 * 1000\n  },\n  hours: {\n    minutes: 60,\n    seconds: 60 * 60,\n    milliseconds: 60 * 60 * 1000\n  },\n  minutes: {\n    seconds: 60,\n    milliseconds: 60 * 1000\n  },\n  seconds: {\n    milliseconds: 1000\n  }\n},\n    casualMatrix = Object.assign({\n  years: {\n    quarters: 4,\n    months: 12,\n    weeks: 52,\n    days: 365,\n    hours: 365 * 24,\n    minutes: 365 * 24 * 60,\n    seconds: 365 * 24 * 60 * 60,\n    milliseconds: 365 * 24 * 60 * 60 * 1000\n  },\n  quarters: {\n    months: 3,\n    weeks: 13,\n    days: 91,\n    hours: 91 * 24,\n    minutes: 91 * 24 * 60,\n    seconds: 91 * 24 * 60 * 60,\n    milliseconds: 91 * 24 * 60 * 60 * 1000\n  },\n  months: {\n    weeks: 4,\n    days: 30,\n    hours: 30 * 24,\n    minutes: 30 * 24 * 60,\n    seconds: 30 * 24 * 60 * 60,\n    milliseconds: 30 * 24 * 60 * 60 * 1000\n  }\n}, lowOrderMatrix),\n    daysInYearAccurate = 146097.0 / 400,\n    daysInMonthAccurate = 146097.0 / 4800,\n    accurateMatrix = Object.assign({\n  years: {\n    quarters: 4,\n    months: 12,\n    weeks: daysInYearAccurate / 7,\n    days: daysInYearAccurate,\n    hours: daysInYearAccurate * 24,\n    minutes: daysInYearAccurate * 24 * 60,\n    seconds: daysInYearAccurate * 24 * 60 * 60,\n    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n  },\n  quarters: {\n    months: 3,\n    weeks: daysInYearAccurate / 28,\n    days: daysInYearAccurate / 4,\n    hours: daysInYearAccurate * 24 / 4,\n    minutes: daysInYearAccurate * 24 * 60 / 4,\n    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,\n    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4\n  },\n  months: {\n    weeks: daysInMonthAccurate / 7,\n    days: daysInMonthAccurate,\n    hours: daysInMonthAccurate * 24,\n    minutes: daysInMonthAccurate * 24 * 60,\n    seconds: daysInMonthAccurate * 24 * 60 * 60,\n    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000\n  }\n}, lowOrderMatrix); // units ordered by size\n\nvar orderedUnits = [\"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"];\nvar reverseUnits = orderedUnits.slice(0).reverse(); // clone really means \"create another instance just like this one, but with these changes\"\n\nfunction clone(dur, alts, clear) {\n  if (clear === void 0) {\n    clear = false;\n  }\n\n  // deep merge for vals\n  var conf = {\n    values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\nfunction antiTrunc(n) {\n  return n < 0 ? Math.floor(n) : Math.ceil(n);\n} // NB: mutates parameters\n\n\nfunction convert(matrix, fromMap, fromUnit, toMap, toUnit) {\n  var conv = matrix[toUnit][fromUnit],\n      raw = fromMap[fromUnit] / conv,\n      sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),\n      // ok, so this is wild, but see the matrix in the tests\n  added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\n  toMap[toUnit] += added;\n  fromMap[fromUnit] -= added * conv;\n} // NB: mutates parameters\n\n\nfunction normalizeValues(matrix, vals) {\n  reverseUnits.reduce(function (previous, current) {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        convert(matrix, vals, previous, vals, current);\n      }\n\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.\n * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\n\n\nvar Duration = /*#__PURE__*/function () {\n  /**\n   * @private\n   */\n  function Duration(config) {\n    var accurate = config.conversionAccuracy === \"longterm\" || false;\n    /**\n     * @access private\n     */\n\n    this.values = config.values;\n    /**\n     * @access private\n     */\n\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\n    /**\n     * @access private\n     */\n\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\n    /**\n     * @access private\n     */\n\n    this.isLuxonDuration = true;\n  }\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n\n\n  Duration.fromMillis = function fromMillis(count, opts) {\n    return Duration.fromObject(Object.assign({\n      milliseconds: count\n    }, opts));\n  }\n  /**\n   * Create a Duration from a JavaScript object with keys like 'years' and 'hours.\n   * If this object is empty then a zero milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  ;\n\n  Duration.fromObject = function fromObject(obj) {\n    if (obj == null || typeof obj !== \"object\") {\n      throw new InvalidArgumentError(\"Duration.fromObject: argument expected to be an object, got \" + (obj === null ? \"null\" : typeof obj));\n    }\n\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit, [\"locale\", \"numberingSystem\", \"conversionAccuracy\", \"zone\" // a bit of debt; it's super inconvenient internally not to be able to blindly pass this\n      ]),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  ;\n\n  Duration.fromISO = function fromISO(text, opts) {\n    var _parseISODuration = parseISODuration(text),\n        parsed = _parseISODuration[0];\n\n    if (parsed) {\n      var obj = Object.assign(parsed, opts);\n      return Duration.fromObject(obj);\n    } else {\n      return Duration.invalid(\"unparsable\", \"the input \\\"\" + text + \"\\\" can't be parsed as ISO 8601\");\n    }\n  }\n  /**\n   * Create a Duration from an ISO 8601 time string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }\n   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @return {Duration}\n   */\n  ;\n\n  Duration.fromISOTime = function fromISOTime(text, opts) {\n    var _parseISOTimeOnly = parseISOTimeOnly(text),\n        parsed = _parseISOTimeOnly[0];\n\n    if (parsed) {\n      var obj = Object.assign(parsed, opts);\n      return Duration.fromObject(obj);\n    } else {\n      return Duration.invalid(\"unparsable\", \"the input \\\"\" + text + \"\\\" can't be parsed as ISO 8601\");\n    }\n  }\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */\n  ;\n\n  Duration.invalid = function invalid(reason, explanation) {\n    if (explanation === void 0) {\n      explanation = null;\n    }\n\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\n    }\n\n    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({\n        invalid: invalid\n      });\n    }\n  }\n  /**\n   * @private\n   */\n  ;\n\n  Duration.normalizeUnit = function normalizeUnit(unit) {\n    var normalized = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\"\n    }[unit ? unit.toLowerCase() : unit];\n    if (!normalized) throw new InvalidUnitError(unit);\n    return normalized;\n  }\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  ;\n\n  Duration.isDuration = function isDuration(o) {\n    return o && o.isLuxonDuration || false;\n  }\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */\n  ;\n\n  var _proto = Duration.prototype;\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  _proto.toFormat = function toFormat(fmt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    var fmtOpts = Object.assign({}, opts, {\n      floor: opts.round !== false && opts.floor !== false\n    });\n    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;\n  }\n  /**\n   * Returns a JavaScript object with this Duration's values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  ;\n\n  _proto.toObject = function toObject(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!this.isValid) return {};\n    var base = Object.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n\n    return base;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */\n  ;\n\n  _proto.toISO = function toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n    var s = \"P\";\n    if (this.years !== 0) s += this.years + \"Y\";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\n    if (this.weeks !== 0) s += this.weeks + \"W\";\n    if (this.days !== 0) s += this.days + \"D\";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += \"T\";\n    if (this.hours !== 0) s += this.hours + \"H\";\n    if (this.minutes !== 0) s += this.minutes + \"M\";\n    if (this.seconds !== 0 || this.milliseconds !== 0) // this will handle \"floating point madness\" by removing extra decimal places\n      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\n    if (s === \"P\") s += \"T0S\";\n    return s;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.\n   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'\n   * @return {string}\n   */\n  ;\n\n  _proto.toISOTime = function toISOTime(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!this.isValid) return null;\n    var millis = this.toMillis();\n    if (millis < 0 || millis >= 86400000) return null;\n    opts = Object.assign({\n      suppressMilliseconds: false,\n      suppressSeconds: false,\n      includePrefix: false,\n      format: \"extended\"\n    }, opts);\n    var value = this.shiftTo(\"hours\", \"minutes\", \"seconds\", \"milliseconds\");\n    var fmt = opts.format === \"basic\" ? \"hhmm\" : \"hh:mm\";\n\n    if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {\n      fmt += opts.format === \"basic\" ? \"ss\" : \":ss\";\n\n      if (!opts.suppressMilliseconds || value.milliseconds !== 0) {\n        fmt += \".SSS\";\n      }\n    }\n\n    var str = value.toFormat(fmt);\n\n    if (opts.includePrefix) {\n      str = \"T\" + str;\n    }\n\n    return str;\n  }\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  ;\n\n  _proto.toJSON = function toJSON() {\n    return this.toISO();\n  }\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  ;\n\n  _proto.toString = function toString() {\n    return this.toISO();\n  }\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  ;\n\n  _proto.toMillis = function toMillis() {\n    return this.as(\"milliseconds\");\n  }\n  /**\n   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}\n   * @return {number}\n   */\n  ;\n\n  _proto.valueOf = function valueOf() {\n    return this.toMillis();\n  }\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  ;\n\n  _proto.plus = function plus(duration) {\n    if (!this.isValid) return this;\n    var dur = friendlyDuration(duration),\n        result = {};\n\n    for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits), _step; !(_step = _iterator()).done;) {\n      var k = _step.value;\n\n      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n\n    return clone(this, {\n      values: result\n    }, true);\n  }\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  ;\n\n  _proto.minus = function minus(duration) {\n    if (!this.isValid) return this;\n    var dur = friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n  /**\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === \"hour\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\n   * @return {Duration}\n   */\n  ;\n\n  _proto.mapUnits = function mapUnits(fn) {\n    if (!this.isValid) return this;\n    var result = {};\n\n    for (var _i = 0, _Object$keys = Object.keys(this.values); _i < _Object$keys.length; _i++) {\n      var k = _Object$keys[_i];\n      result[k] = asNumber(fn(this.values[k], k));\n    }\n\n    return clone(this, {\n      values: result\n    }, true);\n  }\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  ;\n\n  _proto.get = function get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  ;\n\n  _proto.set = function set(values) {\n    if (!this.isValid) return this;\n    var mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit, []));\n    return clone(this, {\n      values: mixed\n    });\n  }\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  ;\n\n  _proto.reconfigure = function reconfigure(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        locale = _ref.locale,\n        numberingSystem = _ref.numberingSystem,\n        conversionAccuracy = _ref.conversionAccuracy;\n\n    var loc = this.loc.clone({\n      locale: locale,\n      numberingSystem: numberingSystem\n    }),\n        opts = {\n      loc: loc\n    };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  ;\n\n  _proto.as = function as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  ;\n\n  _proto.normalize = function normalize() {\n    if (!this.isValid) return this;\n    var vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return clone(this, {\n      values: vals\n    }, true);\n  }\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  ;\n\n  _proto.shiftTo = function shiftTo() {\n    for (var _len = arguments.length, units = new Array(_len), _key = 0; _key < _len; _key++) {\n      units[_key] = arguments[_key];\n    }\n\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(function (u) {\n      return Duration.normalizeUnit(u);\n    });\n    var built = {},\n        accumulated = {},\n        vals = this.toObject();\n    var lastUnit;\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(orderedUnits), _step2; !(_step2 = _iterator2()).done;) {\n      var k = _step2.value;\n\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n        var own = 0; // anything we haven't boiled down yet should get boiled to this unit\n\n        for (var ak in accumulated) {\n          own += this.matrix[ak][k] * accumulated[ak];\n          accumulated[ak] = 0;\n        } // plus anything that's already in this unit\n\n\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        var i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = own - i; // we'd like to absorb these fractions in another unit\n        // plus anything further down the chain that should be rolled up in to this\n\n        for (var down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            convert(this.matrix, vals, down, built, k);\n          }\n        } // otherwise, keep it in the wings to boil it later\n\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    } // anything leftover becomes the decimal for the last unit\n    // lastUnit must be defined since units is not empty\n\n\n    for (var key in accumulated) {\n      if (accumulated[key] !== 0) {\n        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n      }\n    }\n\n    return clone(this, {\n      values: built\n    }, true).normalize();\n  }\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  ;\n\n  _proto.negate = function negate() {\n    if (!this.isValid) return this;\n    var negated = {};\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(this.values); _i2 < _Object$keys2.length; _i2++) {\n      var k = _Object$keys2[_i2];\n      negated[k] = -this.values[k];\n    }\n\n    return clone(this, {\n      values: negated\n    }, true);\n  }\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  ;\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  _proto.equals = function equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    function eq(v1, v2) {\n      // Consider 0 and undefined as equal\n      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;\n      return v1 === v2;\n    }\n\n    for (var _iterator3 = _createForOfIteratorHelperLoose(orderedUnits), _step3; !(_step3 = _iterator3()).done;) {\n      var u = _step3.value;\n\n      if (!eq(this.values[u], other.values[u])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  _createClass(Duration, [{\n    key: \"locale\",\n    get: function get() {\n      return this.isValid ? this.loc.locale : null;\n    }\n    /**\n     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n     *\n     * @type {string}\n     */\n\n  }, {\n    key: \"numberingSystem\",\n    get: function get() {\n      return this.isValid ? this.loc.numberingSystem : null;\n    }\n  }, {\n    key: \"years\",\n    get: function get() {\n      return this.isValid ? this.values.years || 0 : NaN;\n    }\n    /**\n     * Get the quarters.\n     * @type {number}\n     */\n\n  }, {\n    key: \"quarters\",\n    get: function get() {\n      return this.isValid ? this.values.quarters || 0 : NaN;\n    }\n    /**\n     * Get the months.\n     * @type {number}\n     */\n\n  }, {\n    key: \"months\",\n    get: function get() {\n      return this.isValid ? this.values.months || 0 : NaN;\n    }\n    /**\n     * Get the weeks\n     * @type {number}\n     */\n\n  }, {\n    key: \"weeks\",\n    get: function get() {\n      return this.isValid ? this.values.weeks || 0 : NaN;\n    }\n    /**\n     * Get the days.\n     * @type {number}\n     */\n\n  }, {\n    key: \"days\",\n    get: function get() {\n      return this.isValid ? this.values.days || 0 : NaN;\n    }\n    /**\n     * Get the hours.\n     * @type {number}\n     */\n\n  }, {\n    key: \"hours\",\n    get: function get() {\n      return this.isValid ? this.values.hours || 0 : NaN;\n    }\n    /**\n     * Get the minutes.\n     * @type {number}\n     */\n\n  }, {\n    key: \"minutes\",\n    get: function get() {\n      return this.isValid ? this.values.minutes || 0 : NaN;\n    }\n    /**\n     * Get the seconds.\n     * @return {number}\n     */\n\n  }, {\n    key: \"seconds\",\n    get: function get() {\n      return this.isValid ? this.values.seconds || 0 : NaN;\n    }\n    /**\n     * Get the milliseconds.\n     * @return {number}\n     */\n\n  }, {\n    key: \"milliseconds\",\n    get: function get() {\n      return this.isValid ? this.values.milliseconds || 0 : NaN;\n    }\n    /**\n     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n     * on invalid DateTimes or Intervals.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return this.invalid === null;\n    }\n    /**\n     * Returns an error code if this Duration became invalid, or null if the Duration is valid\n     * @return {string}\n     */\n\n  }, {\n    key: \"invalidReason\",\n    get: function get() {\n      return this.invalid ? this.invalid.reason : null;\n    }\n    /**\n     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n     * @type {string}\n     */\n\n  }, {\n    key: \"invalidExplanation\",\n    get: function get() {\n      return this.invalid ? this.invalid.explanation : null;\n    }\n  }]);\n\n  return Duration;\n}();\nfunction friendlyDuration(durationish) {\n  if (isNumber(durationish)) {\n    return Duration.fromMillis(durationish);\n  } else if (Duration.isDuration(durationish)) {\n    return durationish;\n  } else if (typeof durationish === \"object\") {\n    return Duration.fromObject(durationish);\n  } else {\n    throw new InvalidArgumentError(\"Unknown duration argument \" + durationish + \" of type \" + typeof durationish);\n  }\n}\n\nvar INVALID$1 = \"Invalid Interval\"; // checks if the start is equal to or before the end\n\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\"end before start\", \"The end of an interval must be after its start, but you had start=\" + start.toISO() + \" and end=\" + end.toISO());\n  } else {\n    return null;\n  }\n}\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}.\n * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.\n */\n\n\nvar Interval = /*#__PURE__*/function () {\n  /**\n   * @private\n   */\n  function Interval(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n\n    this.e = config.end;\n    /**\n     * @access private\n     */\n\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n\n    this.isLuxonInterval = true;\n  }\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n\n\n  Interval.invalid = function invalid(reason, explanation) {\n    if (explanation === void 0) {\n      explanation = null;\n    }\n\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({\n        invalid: invalid\n      });\n    }\n  }\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  ;\n\n  Interval.fromDateTimes = function fromDateTimes(start, end) {\n    var builtStart = friendlyDateTime(start),\n        builtEnd = friendlyDateTime(end);\n    var validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd\n      });\n    } else {\n      return validateError;\n    }\n  }\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  ;\n\n  Interval.after = function after(start, duration) {\n    var dur = friendlyDuration(duration),\n        dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  ;\n\n  Interval.before = function before(end, duration) {\n    var dur = friendlyDuration(duration),\n        dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  ;\n\n  Interval.fromISO = function fromISO(text, opts) {\n    var _split = (text || \"\").split(\"/\", 2),\n        s = _split[0],\n        e = _split[1];\n\n    if (s && e) {\n      var start, startIsValid;\n\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      var end, endIsValid;\n\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        var dur = Duration.fromISO(e, opts);\n\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        var _dur = Duration.fromISO(s, opts);\n\n        if (_dur.isValid) {\n          return Interval.before(end, _dur);\n        }\n      }\n    }\n\n    return Interval.invalid(\"unparsable\", \"the input \\\"\" + text + \"\\\" can't be parsed as ISO 8601\");\n  }\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  ;\n\n  Interval.isInterval = function isInterval(o) {\n    return o && o.isLuxonInterval || false;\n  }\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  ;\n\n  var _proto = Interval.prototype;\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  _proto.length = function length(unit) {\n    if (unit === void 0) {\n      unit = \"milliseconds\";\n    }\n\n    return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;\n  }\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  ;\n\n  _proto.count = function count(unit) {\n    if (unit === void 0) {\n      unit = \"milliseconds\";\n    }\n\n    if (!this.isValid) return NaN;\n    var start = this.start.startOf(unit),\n        end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  ;\n\n  _proto.hasSame = function hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  ;\n\n  _proto.isEmpty = function isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  ;\n\n  _proto.isAfter = function isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  ;\n\n  _proto.isBefore = function isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  ;\n\n  _proto.contains = function contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  ;\n\n  _proto.set = function set(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        start = _ref.start,\n        end = _ref.end;\n\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...[DateTime]} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  ;\n\n  _proto.splitAt = function splitAt() {\n    var _this = this;\n\n    if (!this.isValid) return [];\n\n    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {\n      dateTimes[_key] = arguments[_key];\n    }\n\n    var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {\n      return _this.contains(d);\n    }).sort(),\n        results = [];\n    var s = this.s,\n        i = 0;\n\n    while (s < this.e) {\n      var added = sorted[i] || this.e,\n          next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  ;\n\n  _proto.splitBy = function splitBy(duration) {\n    var dur = friendlyDuration(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    var s = this.s,\n        added,\n        next;\n    var results = [];\n\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  ;\n\n  _proto.divideEqually = function divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  ;\n\n  _proto.overlaps = function overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  ;\n\n  _proto.abutsStart = function abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  ;\n\n  _proto.abutsEnd = function abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  ;\n\n  _proto.engulfs = function engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  ;\n\n  _proto.equals = function equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  ;\n\n  _proto.intersection = function intersection(other) {\n    if (!this.isValid) return this;\n    var s = this.s > other.s ? this.s : other.s,\n        e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  ;\n\n  _proto.union = function union(other) {\n    if (!this.isValid) return this;\n    var s = this.s < other.s ? this.s : other.s,\n        e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  ;\n\n  Interval.merge = function merge(intervals) {\n    var _intervals$sort$reduc = intervals.sort(function (a, b) {\n      return a.s - b.s;\n    }).reduce(function (_ref2, item) {\n      var sofar = _ref2[0],\n          current = _ref2[1];\n\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    }, [[], null]),\n        found = _intervals$sort$reduc[0],\n        final = _intervals$sort$reduc[1];\n\n    if (final) {\n      found.push(final);\n    }\n\n    return found;\n  }\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  ;\n\n  Interval.xor = function xor(intervals) {\n    var _Array$prototype;\n\n    var start = null,\n        currentCount = 0;\n\n    var results = [],\n        ends = intervals.map(function (i) {\n      return [{\n        time: i.s,\n        type: \"s\"\n      }, {\n        time: i.e,\n        type: \"e\"\n      }];\n    }),\n        flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, ends),\n        arr = flattened.sort(function (a, b) {\n      return a.time - b.time;\n    });\n\n    for (var _iterator = _createForOfIteratorHelperLoose(arr), _step; !(_step = _iterator()).done;) {\n      var i = _step.value;\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {[Interval]}\n   */\n  ;\n\n  _proto.difference = function difference() {\n    var _this2 = this;\n\n    for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      intervals[_key2] = arguments[_key2];\n    }\n\n    return Interval.xor([this].concat(intervals)).map(function (i) {\n      return _this2.intersection(i);\n    }).filter(function (i) {\n      return i && !i.isEmpty();\n    });\n  }\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  ;\n\n  _proto.toString = function toString() {\n    if (!this.isValid) return INVALID$1;\n    return \"[\" + this.s.toISO() + \" \\u2013 \" + this.e.toISO() + \")\";\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  ;\n\n  _proto.toISO = function toISO(opts) {\n    if (!this.isValid) return INVALID$1;\n    return this.s.toISO(opts) + \"/\" + this.e.toISO(opts);\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  ;\n\n  _proto.toISODate = function toISODate() {\n    if (!this.isValid) return INVALID$1;\n    return this.s.toISODate() + \"/\" + this.e.toISODate();\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  ;\n\n  _proto.toISOTime = function toISOTime(opts) {\n    if (!this.isValid) return INVALID$1;\n    return this.s.toISOTime(opts) + \"/\" + this.e.toISOTime(opts);\n  }\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  ;\n\n  _proto.toFormat = function toFormat(dateFormat, _temp2) {\n    var _ref3 = _temp2 === void 0 ? {} : _temp2,\n        _ref3$separator = _ref3.separator,\n        separator = _ref3$separator === void 0 ? \" – \" : _ref3$separator;\n\n    if (!this.isValid) return INVALID$1;\n    return \"\" + this.s.toFormat(dateFormat) + separator + this.e.toFormat(dateFormat);\n  }\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  ;\n\n  _proto.toDuration = function toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n\n    return this.e.diff(this.s, unit, opts);\n  }\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  ;\n\n  _proto.mapEndpoints = function mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  };\n\n  _createClass(Interval, [{\n    key: \"start\",\n    get: function get() {\n      return this.isValid ? this.s : null;\n    }\n    /**\n     * Returns the end of the Interval\n     * @type {DateTime}\n     */\n\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.isValid ? this.e : null;\n    }\n    /**\n     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return this.invalidReason === null;\n    }\n    /**\n     * Returns an error code if this Interval is invalid, or null if the Interval is valid\n     * @type {string}\n     */\n\n  }, {\n    key: \"invalidReason\",\n    get: function get() {\n      return this.invalid ? this.invalid.reason : null;\n    }\n    /**\n     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n     * @type {string}\n     */\n\n  }, {\n    key: \"invalidExplanation\",\n    get: function get() {\n      return this.invalid ? this.invalid.explanation : null;\n    }\n  }]);\n\n  return Interval;\n}();\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\n\nvar Info = /*#__PURE__*/function () {\n  function Info() {}\n\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  Info.hasDST = function hasDST(zone) {\n    if (zone === void 0) {\n      zone = Settings.defaultZone;\n    }\n\n    var proto = DateTime.now().setZone(zone).set({\n      month: 12\n    });\n    return !zone.universal && proto.offset !== proto.set({\n      month: 6\n    }).offset;\n  }\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  ;\n\n  Info.isValidIANAZone = function isValidIANAZone(zone) {\n    return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);\n  }\n  /**\n   * Converts the input into a {@link Zone} instance.\n   *\n   * * If `input` is already a Zone instance, it is returned unchanged.\n   * * If `input` is a string containing a valid time zone name, a Zone instance\n   *   with that name is returned.\n   * * If `input` is a string that doesn't refer to a known time zone, a Zone\n   *   instance with {@link Zone.isValid} == false is returned.\n   * * If `input is a number, a Zone instance with the specified fixed offset\n   *   in minutes is returned.\n   * * If `input` is `null` or `undefined`, the default zone is returned.\n   * @param {string|Zone|number} [input] - the value to be converted\n   * @return {Zone}\n   */\n  ;\n\n  Info.normalizeZone = function normalizeZone$1(input) {\n    return normalizeZone(input, Settings.defaultZone);\n  }\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  ;\n\n  Info.months = function months(length, _temp) {\n    if (length === void 0) {\n      length = \"long\";\n    }\n\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$locale = _ref.locale,\n        locale = _ref$locale === void 0 ? null : _ref$locale,\n        _ref$numberingSystem = _ref.numberingSystem,\n        numberingSystem = _ref$numberingSystem === void 0 ? null : _ref$numberingSystem,\n        _ref$outputCalendar = _ref.outputCalendar,\n        outputCalendar = _ref$outputCalendar === void 0 ? \"gregory\" : _ref$outputCalendar;\n\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length);\n  }\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  ;\n\n  Info.monthsFormat = function monthsFormat(length, _temp2) {\n    if (length === void 0) {\n      length = \"long\";\n    }\n\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$locale = _ref2.locale,\n        locale = _ref2$locale === void 0 ? null : _ref2$locale,\n        _ref2$numberingSystem = _ref2.numberingSystem,\n        numberingSystem = _ref2$numberingSystem === void 0 ? null : _ref2$numberingSystem,\n        _ref2$outputCalendar = _ref2.outputCalendar,\n        outputCalendar = _ref2$outputCalendar === void 0 ? \"gregory\" : _ref2$outputCalendar;\n\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  ;\n\n  Info.weekdays = function weekdays(length, _temp3) {\n    if (length === void 0) {\n      length = \"long\";\n    }\n\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n        _ref3$locale = _ref3.locale,\n        locale = _ref3$locale === void 0 ? null : _ref3$locale,\n        _ref3$numberingSystem = _ref3.numberingSystem,\n        numberingSystem = _ref3$numberingSystem === void 0 ? null : _ref3$numberingSystem;\n\n    return Locale.create(locale, numberingSystem, null).weekdays(length);\n  }\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @return {[string]}\n   */\n  ;\n\n  Info.weekdaysFormat = function weekdaysFormat(length, _temp4) {\n    if (length === void 0) {\n      length = \"long\";\n    }\n\n    var _ref4 = _temp4 === void 0 ? {} : _temp4,\n        _ref4$locale = _ref4.locale,\n        locale = _ref4$locale === void 0 ? null : _ref4$locale,\n        _ref4$numberingSystem = _ref4.numberingSystem,\n        numberingSystem = _ref4$numberingSystem === void 0 ? null : _ref4$numberingSystem;\n\n    return Locale.create(locale, numberingSystem, null).weekdays(length, true);\n  }\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\n   * @return {[string]}\n   */\n  ;\n\n  Info.meridiems = function meridiems(_temp5) {\n    var _ref5 = _temp5 === void 0 ? {} : _temp5,\n        _ref5$locale = _ref5.locale,\n        locale = _ref5$locale === void 0 ? null : _ref5$locale;\n\n    return Locale.create(locale).meridiems();\n  }\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  ;\n\n  Info.eras = function eras(length, _temp6) {\n    if (length === void 0) {\n      length = \"short\";\n    }\n\n    var _ref6 = _temp6 === void 0 ? {} : _temp6,\n        _ref6$locale = _ref6.locale,\n        locale = _ref6$locale === void 0 ? null : _ref6$locale;\n\n    return Locale.create(locale, null, \"gregory\").eras(length);\n  }\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `zones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * * `relative`: whether this environment supports relative time formatting\n   * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }\n   * @return {Object}\n   */\n  ;\n\n  Info.features = function features() {\n    var intl = false,\n        intlTokens = false,\n        zones = false,\n        relative = false;\n\n    if (hasIntl()) {\n      intl = true;\n      intlTokens = hasFormatToParts();\n      relative = hasRelative();\n\n      try {\n        zones = new Intl.DateTimeFormat(\"en\", {\n          timeZone: \"America/New_York\"\n        }).resolvedOptions().timeZone === \"America/New_York\";\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return {\n      intl: intl,\n      intlTokens: intlTokens,\n      zones: zones,\n      relative: relative\n    };\n  };\n\n  return Info;\n}();\n\nfunction dayDiff(earlier, later) {\n  var utcDayStart = function utcDayStart(dt) {\n    return dt.toUTC(0, {\n      keepLocalTime: true\n    }).startOf(\"day\").valueOf();\n  },\n      ms = utcDayStart(later) - utcDayStart(earlier);\n\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\n}\n\nfunction highOrderDiffs(cursor, later, units) {\n  var differs = [[\"years\", function (a, b) {\n    return b.year - a.year;\n  }], [\"quarters\", function (a, b) {\n    return b.quarter - a.quarter;\n  }], [\"months\", function (a, b) {\n    return b.month - a.month + (b.year - a.year) * 12;\n  }], [\"weeks\", function (a, b) {\n    var days = dayDiff(a, b);\n    return (days - days % 7) / 7;\n  }], [\"days\", dayDiff]];\n  var results = {};\n  var lowestOrder, highWater;\n\n  for (var _i = 0, _differs = differs; _i < _differs.length; _i++) {\n    var _differs$_i = _differs[_i],\n        unit = _differs$_i[0],\n        differ = _differs$_i[1];\n\n    if (units.indexOf(unit) >= 0) {\n      var _cursor$plus;\n\n      lowestOrder = unit;\n      var delta = differ(cursor, later);\n      highWater = cursor.plus((_cursor$plus = {}, _cursor$plus[unit] = delta, _cursor$plus));\n\n      if (highWater > later) {\n        var _cursor$plus2;\n\n        cursor = cursor.plus((_cursor$plus2 = {}, _cursor$plus2[unit] = delta - 1, _cursor$plus2));\n        delta -= 1;\n      } else {\n        cursor = highWater;\n      }\n\n      results[unit] = delta;\n    }\n  }\n\n  return [cursor, results, highWater, lowestOrder];\n}\n\nfunction _diff (earlier, later, units, opts) {\n  var _highOrderDiffs = highOrderDiffs(earlier, later, units),\n      cursor = _highOrderDiffs[0],\n      results = _highOrderDiffs[1],\n      highWater = _highOrderDiffs[2],\n      lowestOrder = _highOrderDiffs[3];\n\n  var remainingMillis = later - cursor;\n  var lowerOrderUnits = units.filter(function (u) {\n    return [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0;\n  });\n\n  if (lowerOrderUnits.length === 0) {\n    if (highWater < later) {\n      var _cursor$plus3;\n\n      highWater = cursor.plus((_cursor$plus3 = {}, _cursor$plus3[lowestOrder] = 1, _cursor$plus3));\n    }\n\n    if (highWater !== cursor) {\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\n    }\n  }\n\n  var duration = Duration.fromObject(Object.assign(results, opts));\n\n  if (lowerOrderUnits.length > 0) {\n    var _Duration$fromMillis;\n\n    return (_Duration$fromMillis = Duration.fromMillis(remainingMillis, opts)).shiftTo.apply(_Duration$fromMillis, lowerOrderUnits).plus(duration);\n  } else {\n    return duration;\n  }\n}\n\nvar numberingSystems = {\n  arab: \"[\\u0660-\\u0669]\",\n  arabext: \"[\\u06F0-\\u06F9]\",\n  bali: \"[\\u1B50-\\u1B59]\",\n  beng: \"[\\u09E6-\\u09EF]\",\n  deva: \"[\\u0966-\\u096F]\",\n  fullwide: \"[\\uFF10-\\uFF19]\",\n  gujr: \"[\\u0AE6-\\u0AEF]\",\n  hanidec: \"[〇|一|二|三|四|五|六|七|八|九]\",\n  khmr: \"[\\u17E0-\\u17E9]\",\n  knda: \"[\\u0CE6-\\u0CEF]\",\n  laoo: \"[\\u0ED0-\\u0ED9]\",\n  limb: \"[\\u1946-\\u194F]\",\n  mlym: \"[\\u0D66-\\u0D6F]\",\n  mong: \"[\\u1810-\\u1819]\",\n  mymr: \"[\\u1040-\\u1049]\",\n  orya: \"[\\u0B66-\\u0B6F]\",\n  tamldec: \"[\\u0BE6-\\u0BEF]\",\n  telu: \"[\\u0C66-\\u0C6F]\",\n  thai: \"[\\u0E50-\\u0E59]\",\n  tibt: \"[\\u0F20-\\u0F29]\",\n  latn: \"\\\\d\"\n};\nvar numberingSystemsUTF16 = {\n  arab: [1632, 1641],\n  arabext: [1776, 1785],\n  bali: [6992, 7001],\n  beng: [2534, 2543],\n  deva: [2406, 2415],\n  fullwide: [65296, 65303],\n  gujr: [2790, 2799],\n  khmr: [6112, 6121],\n  knda: [3302, 3311],\n  laoo: [3792, 3801],\n  limb: [6470, 6479],\n  mlym: [3430, 3439],\n  mong: [6160, 6169],\n  mymr: [4160, 4169],\n  orya: [2918, 2927],\n  tamldec: [3046, 3055],\n  telu: [3174, 3183],\n  thai: [3664, 3673],\n  tibt: [3872, 3881]\n}; // eslint-disable-next-line\n\nvar hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\nfunction parseDigits(str) {\n  var value = parseInt(str, 10);\n\n  if (isNaN(value)) {\n    value = \"\";\n\n    for (var i = 0; i < str.length; i++) {\n      var code = str.charCodeAt(i);\n\n      if (str[i].search(numberingSystems.hanidec) !== -1) {\n        value += hanidecChars.indexOf(str[i]);\n      } else {\n        for (var key in numberingSystemsUTF16) {\n          var _numberingSystemsUTF = numberingSystemsUTF16[key],\n              min = _numberingSystemsUTF[0],\n              max = _numberingSystemsUTF[1];\n\n          if (code >= min && code <= max) {\n            value += code - min;\n          }\n        }\n      }\n    }\n\n    return parseInt(value, 10);\n  } else {\n    return value;\n  }\n}\nfunction digitRegex(_ref, append) {\n  var numberingSystem = _ref.numberingSystem;\n\n  if (append === void 0) {\n    append = \"\";\n  }\n\n  return new RegExp(\"\" + numberingSystems[numberingSystem || \"latn\"] + append);\n}\n\nvar MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\n\nfunction intUnit(regex, post) {\n  if (post === void 0) {\n    post = function post(i) {\n      return i;\n    };\n  }\n\n  return {\n    regex: regex,\n    deser: function deser(_ref) {\n      var s = _ref[0];\n      return post(parseDigits(s));\n    }\n  };\n}\n\nvar NBSP = String.fromCharCode(160);\nvar spaceOrNBSP = \"( |\" + NBSP + \")\";\nvar spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, \"g\");\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  // make space and non breakable space characters interchangeable\n  return s.replace(/\\./g, \"\\\\.?\").replace(spaceOrNBSPRegExp, spaceOrNBSP);\n}\n\nfunction stripInsensitivities(s) {\n  return s.replace(/\\./g, \"\") // ignore dots that were made optional\n  .replace(spaceOrNBSPRegExp, \" \") // interchange space and nbsp\n  .toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join(\"|\")),\n      deser: function deser(_ref2) {\n        var s = _ref2[0];\n        return strings.findIndex(function (i) {\n          return stripInsensitivities(s) === stripInsensitivities(i);\n        }) + startIndex;\n      }\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return {\n    regex: regex,\n    deser: function deser(_ref3) {\n      var h = _ref3[1],\n          m = _ref3[2];\n      return signedOffset(h, m);\n    },\n    groups: groups\n  };\n}\n\nfunction simple(regex) {\n  return {\n    regex: regex,\n    deser: function deser(_ref4) {\n      var s = _ref4[0];\n      return s;\n    }\n  };\n}\n\nfunction escapeToken(value) {\n  // eslint-disable-next-line no-useless-escape\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\nfunction unitForToken(token, loc) {\n  var one = digitRegex(loc),\n      two = digitRegex(loc, \"{2}\"),\n      three = digitRegex(loc, \"{3}\"),\n      four = digitRegex(loc, \"{4}\"),\n      six = digitRegex(loc, \"{6}\"),\n      oneOrTwo = digitRegex(loc, \"{1,2}\"),\n      oneToThree = digitRegex(loc, \"{1,3}\"),\n      oneToSix = digitRegex(loc, \"{1,6}\"),\n      oneToNine = digitRegex(loc, \"{1,9}\"),\n      twoToFour = digitRegex(loc, \"{2,4}\"),\n      fourToSix = digitRegex(loc, \"{4,6}\"),\n      literal = function literal(t) {\n    return {\n      regex: RegExp(escapeToken(t.val)),\n      deser: function deser(_ref5) {\n        var s = _ref5[0];\n        return s;\n      },\n      literal: true\n    };\n  },\n      unitate = function unitate(t) {\n    if (token.literal) {\n      return literal(t);\n    }\n\n    switch (t.val) {\n      // era\n      case \"G\":\n        return oneOf(loc.eras(\"short\", false), 0);\n\n      case \"GG\":\n        return oneOf(loc.eras(\"long\", false), 0);\n      // years\n\n      case \"y\":\n        return intUnit(oneToSix);\n\n      case \"yy\":\n        return intUnit(twoToFour, untruncateYear);\n\n      case \"yyyy\":\n        return intUnit(four);\n\n      case \"yyyyy\":\n        return intUnit(fourToSix);\n\n      case \"yyyyyy\":\n        return intUnit(six);\n      // months\n\n      case \"M\":\n        return intUnit(oneOrTwo);\n\n      case \"MM\":\n        return intUnit(two);\n\n      case \"MMM\":\n        return oneOf(loc.months(\"short\", true, false), 1);\n\n      case \"MMMM\":\n        return oneOf(loc.months(\"long\", true, false), 1);\n\n      case \"L\":\n        return intUnit(oneOrTwo);\n\n      case \"LL\":\n        return intUnit(two);\n\n      case \"LLL\":\n        return oneOf(loc.months(\"short\", false, false), 1);\n\n      case \"LLLL\":\n        return oneOf(loc.months(\"long\", false, false), 1);\n      // dates\n\n      case \"d\":\n        return intUnit(oneOrTwo);\n\n      case \"dd\":\n        return intUnit(two);\n      // ordinals\n\n      case \"o\":\n        return intUnit(oneToThree);\n\n      case \"ooo\":\n        return intUnit(three);\n      // time\n\n      case \"HH\":\n        return intUnit(two);\n\n      case \"H\":\n        return intUnit(oneOrTwo);\n\n      case \"hh\":\n        return intUnit(two);\n\n      case \"h\":\n        return intUnit(oneOrTwo);\n\n      case \"mm\":\n        return intUnit(two);\n\n      case \"m\":\n        return intUnit(oneOrTwo);\n\n      case \"q\":\n        return intUnit(oneOrTwo);\n\n      case \"qq\":\n        return intUnit(two);\n\n      case \"s\":\n        return intUnit(oneOrTwo);\n\n      case \"ss\":\n        return intUnit(two);\n\n      case \"S\":\n        return intUnit(oneToThree);\n\n      case \"SSS\":\n        return intUnit(three);\n\n      case \"u\":\n        return simple(oneToNine);\n      // meridiem\n\n      case \"a\":\n        return oneOf(loc.meridiems(), 0);\n      // weekYear (k)\n\n      case \"kkkk\":\n        return intUnit(four);\n\n      case \"kk\":\n        return intUnit(twoToFour, untruncateYear);\n      // weekNumber (W)\n\n      case \"W\":\n        return intUnit(oneOrTwo);\n\n      case \"WW\":\n        return intUnit(two);\n      // weekdays\n\n      case \"E\":\n      case \"c\":\n        return intUnit(one);\n\n      case \"EEE\":\n        return oneOf(loc.weekdays(\"short\", false, false), 1);\n\n      case \"EEEE\":\n        return oneOf(loc.weekdays(\"long\", false, false), 1);\n\n      case \"ccc\":\n        return oneOf(loc.weekdays(\"short\", true, false), 1);\n\n      case \"cccc\":\n        return oneOf(loc.weekdays(\"long\", true, false), 1);\n      // offset/zone\n\n      case \"Z\":\n      case \"ZZ\":\n        return offset(new RegExp(\"([+-]\" + oneOrTwo.source + \")(?::(\" + two.source + \"))?\"), 2);\n\n      case \"ZZZ\":\n        return offset(new RegExp(\"([+-]\" + oneOrTwo.source + \")(\" + two.source + \")?\"), 2);\n      // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n      // because we don't have any way to figure out what they are\n\n      case \"z\":\n        return simple(/[a-z_+-/]{1,256}?/i);\n\n      default:\n        return literal(t);\n    }\n  };\n\n  var unit = unitate(token) || {\n    invalidReason: MISSING_FTP\n  };\n  unit.token = token;\n  return unit;\n}\n\nvar partTypeStyleToTokenVal = {\n  year: {\n    \"2-digit\": \"yy\",\n    numeric: \"yyyyy\"\n  },\n  month: {\n    numeric: \"M\",\n    \"2-digit\": \"MM\",\n    short: \"MMM\",\n    long: \"MMMM\"\n  },\n  day: {\n    numeric: \"d\",\n    \"2-digit\": \"dd\"\n  },\n  weekday: {\n    short: \"EEE\",\n    long: \"EEEE\"\n  },\n  dayperiod: \"a\",\n  dayPeriod: \"a\",\n  hour: {\n    numeric: \"h\",\n    \"2-digit\": \"hh\"\n  },\n  minute: {\n    numeric: \"m\",\n    \"2-digit\": \"mm\"\n  },\n  second: {\n    numeric: \"s\",\n    \"2-digit\": \"ss\"\n  }\n};\n\nfunction tokenForPart(part, locale, formatOpts) {\n  var type = part.type,\n      value = part.value;\n\n  if (type === \"literal\") {\n    return {\n      literal: true,\n      val: value\n    };\n  }\n\n  var style = formatOpts[type];\n  var val = partTypeStyleToTokenVal[type];\n\n  if (typeof val === \"object\") {\n    val = val[style];\n  }\n\n  if (val) {\n    return {\n      literal: false,\n      val: val\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildRegex(units) {\n  var re = units.map(function (u) {\n    return u.regex;\n  }).reduce(function (f, r) {\n    return f + \"(\" + r.source + \")\";\n  }, \"\");\n  return [\"^\" + re + \"$\", units];\n}\n\nfunction match(input, regex, handlers) {\n  var matches = input.match(regex);\n\n  if (matches) {\n    var all = {};\n    var matchIndex = 1;\n\n    for (var i in handlers) {\n      if (hasOwnProperty(handlers, i)) {\n        var h = handlers[i],\n            groups = h.groups ? h.groups + 1 : 1;\n\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n\n        matchIndex += groups;\n      }\n    }\n\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  var toField = function toField(token) {\n    switch (token) {\n      case \"S\":\n        return \"millisecond\";\n\n      case \"s\":\n        return \"second\";\n\n      case \"m\":\n        return \"minute\";\n\n      case \"h\":\n      case \"H\":\n        return \"hour\";\n\n      case \"d\":\n        return \"day\";\n\n      case \"o\":\n        return \"ordinal\";\n\n      case \"L\":\n      case \"M\":\n        return \"month\";\n\n      case \"y\":\n        return \"year\";\n\n      case \"E\":\n      case \"c\":\n        return \"weekday\";\n\n      case \"W\":\n        return \"weekNumber\";\n\n      case \"k\":\n        return \"weekYear\";\n\n      case \"q\":\n        return \"quarter\";\n\n      default:\n        return null;\n    }\n  };\n\n  var zone;\n\n  if (!isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z);\n  } else if (!isUndefined(matches.z)) {\n    zone = IANAZone.create(matches.z);\n  } else {\n    zone = null;\n  }\n\n  if (!isUndefined(matches.q)) {\n    matches.M = (matches.q - 1) * 3 + 1;\n  }\n\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u);\n  }\n\n  var vals = Object.keys(matches).reduce(function (r, k) {\n    var f = toField(k);\n\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n  return [vals, zone];\n}\n\nvar dummyDateTimeCache = null;\n\nfunction getDummyDateTime() {\n  if (!dummyDateTimeCache) {\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\n  }\n\n  return dummyDateTimeCache;\n}\n\nfunction maybeExpandMacroToken(token, locale) {\n  if (token.literal) {\n    return token;\n  }\n\n  var formatOpts = Formatter.macroTokenToFormatOpts(token.val);\n\n  if (!formatOpts) {\n    return token;\n  }\n\n  var formatter = Formatter.create(locale, formatOpts);\n  var parts = formatter.formatDateTimeParts(getDummyDateTime());\n  var tokens = parts.map(function (p) {\n    return tokenForPart(p, locale, formatOpts);\n  });\n\n  if (tokens.includes(undefined)) {\n    return token;\n  }\n\n  return tokens;\n}\n\nfunction expandMacroTokens(tokens, locale) {\n  var _Array$prototype;\n\n  return (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, tokens.map(function (t) {\n    return maybeExpandMacroToken(t, locale);\n  }));\n}\n/**\n * @private\n */\n\n\nfunction explainFromTokens(locale, input, format) {\n  var tokens = expandMacroTokens(Formatter.parseFormat(format), locale),\n      units = tokens.map(function (t) {\n    return unitForToken(t, locale);\n  }),\n      disqualifyingUnit = units.find(function (t) {\n    return t.invalidReason;\n  });\n\n  if (disqualifyingUnit) {\n    return {\n      input: input,\n      tokens: tokens,\n      invalidReason: disqualifyingUnit.invalidReason\n    };\n  } else {\n    var _buildRegex = buildRegex(units),\n        regexString = _buildRegex[0],\n        handlers = _buildRegex[1],\n        regex = RegExp(regexString, \"i\"),\n        _match = match(input, regex, handlers),\n        rawMatches = _match[0],\n        matches = _match[1],\n        _ref6 = matches ? dateTimeFromMatches(matches) : [null, null],\n        result = _ref6[0],\n        zone = _ref6[1];\n\n    if (hasOwnProperty(matches, \"a\") && hasOwnProperty(matches, \"H\")) {\n      throw new ConflictingSpecificationError(\"Can't include meridiem when specifying 24-hour format\");\n    }\n\n    return {\n      input: input,\n      tokens: tokens,\n      regex: regex,\n      rawMatches: rawMatches,\n      matches: matches,\n      result: result,\n      zone: zone\n    };\n  }\n}\nfunction parseFromTokens(locale, input, format) {\n  var _explainFromTokens = explainFromTokens(locale, input, format),\n      result = _explainFromTokens.result,\n      zone = _explainFromTokens.zone,\n      invalidReason = _explainFromTokens.invalidReason;\n\n  return [result, zone, invalidReason];\n}\n\nvar nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n    leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\"unit out of range\", \"you specified \" + value + \" (of type \" + typeof value + \") as a \" + unit + \", which is invalid\");\n}\n\nfunction dayOfWeek(year, month, day) {\n  var js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  var table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n      month0 = table.findIndex(function (i) {\n    return i < ordinal;\n  }),\n      day = ordinal - table[month0];\n  return {\n    month: month0 + 1,\n    day: day\n  };\n}\n/**\n * @private\n */\n\n\nfunction gregorianToWeek(gregObj) {\n  var year = gregObj.year,\n      month = gregObj.month,\n      day = gregObj.day,\n      ordinal = computeOrdinal(year, month, day),\n      weekday = dayOfWeek(year, month, day);\n  var weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n      weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear);\n  } else if (weekNumber > weeksInWeekYear(year)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return Object.assign({\n    weekYear: weekYear,\n    weekNumber: weekNumber,\n    weekday: weekday\n  }, timeObject(gregObj));\n}\nfunction weekToGregorian(weekData) {\n  var weekYear = weekData.weekYear,\n      weekNumber = weekData.weekNumber,\n      weekday = weekData.weekday,\n      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n      yearInDays = daysInYear(weekYear);\n  var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n      year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  var _uncomputeOrdinal = uncomputeOrdinal(year, ordinal),\n      month = _uncomputeOrdinal.month,\n      day = _uncomputeOrdinal.day;\n\n  return Object.assign({\n    year: year,\n    month: month,\n    day: day\n  }, timeObject(weekData));\n}\nfunction gregorianToOrdinal(gregData) {\n  var year = gregData.year,\n      month = gregData.month,\n      day = gregData.day,\n      ordinal = computeOrdinal(year, month, day);\n  return Object.assign({\n    year: year,\n    ordinal: ordinal\n  }, timeObject(gregData));\n}\nfunction ordinalToGregorian(ordinalData) {\n  var year = ordinalData.year,\n      ordinal = ordinalData.ordinal,\n      _uncomputeOrdinal2 = uncomputeOrdinal(year, ordinal),\n      month = _uncomputeOrdinal2.month,\n      day = _uncomputeOrdinal2.day;\n\n  return Object.assign({\n    year: year,\n    month: month,\n    day: day\n  }, timeObject(ordinalData));\n}\nfunction hasInvalidWeekData(obj) {\n  var validYear = isInteger(obj.weekYear),\n      validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),\n      validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.week);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\nfunction hasInvalidOrdinalData(obj) {\n  var validYear = isInteger(obj.year),\n      validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\nfunction hasInvalidGregorianData(obj) {\n  var validYear = isInteger(obj.year),\n      validMonth = integerBetween(obj.month, 1, 12),\n      validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\nfunction hasInvalidTimeData(obj) {\n  var hour = obj.hour,\n      minute = obj.minute,\n      second = obj.second,\n      millisecond = obj.millisecond;\n  var validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,\n      validMinute = integerBetween(minute, 0, 59),\n      validSecond = integerBetween(second, 0, 59),\n      validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", millisecond);\n  } else return false;\n}\n\nvar INVALID$2 = \"Invalid DateTime\";\nvar MAX_DATE = 8.64e15;\n\nfunction unsupportedZone(zone) {\n  return new Invalid(\"unsupported zone\", \"the zone \\\"\" + zone.name + \"\\\" is not supported\");\n} // we cache week data on the DT object and this intermediates the cache\n\n\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n\n  return dt.weekData;\n} // clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\n\n\nfunction clone$1(inst, alts) {\n  var current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid\n  };\n  return new DateTime(Object.assign({}, current, alts, {\n    old: current\n  }));\n} // find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\n\n\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  var utcGuess = localTS - o * 60 * 1000; // Test whether the zone matches the offset for this ts\n\n  var o2 = tz.offset(utcGuess); // If so, offset didn't change and we're done\n\n  if (o === o2) {\n    return [utcGuess, o];\n  } // If not, change the ts by the difference in the offset\n\n\n  utcGuess -= (o2 - o) * 60 * 1000; // If that gives us the local time we want, we're done\n\n  var o3 = tz.offset(utcGuess);\n\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  } // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n\n\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n} // convert an epoch timestamp into a calendar object with the given offset\n\n\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n  var d = new Date(ts);\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n} // convert a calendar object to a epoch timestamp\n\n\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n} // create a new DT instance by adding a duration, adjusting for DSTs\n\n\nfunction adjustTime(inst, dur) {\n  var oPre = inst.o,\n      year = inst.c.year + Math.trunc(dur.years),\n      month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,\n      c = Object.assign({}, inst.c, {\n    year: year,\n    month: month,\n    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7\n  }),\n      millisToAdd = Duration.fromObject({\n    years: dur.years - Math.trunc(dur.years),\n    quarters: dur.quarters - Math.trunc(dur.quarters),\n    months: dur.months - Math.trunc(dur.months),\n    weeks: dur.weeks - Math.trunc(dur.weeks),\n    days: dur.days - Math.trunc(dur.days),\n    hours: dur.hours,\n    minutes: dur.minutes,\n    seconds: dur.seconds,\n    milliseconds: dur.milliseconds\n  }).as(\"milliseconds\"),\n      localTS = objToLocalTS(c);\n\n  var _fixOffset = fixOffset(localTS, oPre, inst.zone),\n      ts = _fixOffset[0],\n      o = _fixOffset[1];\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd; // that could have changed the offset by going over a DST, but we want to keep the ts the same\n\n    o = inst.zone.offset(ts);\n  }\n\n  return {\n    ts: ts,\n    o: o\n  };\n} // helper useful in turning the results of parsing into real dates\n// by handling the zone options\n\n\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text) {\n  var setZone = opts.setZone,\n      zone = opts.zone;\n\n  if (parsed && Object.keys(parsed).length !== 0) {\n    var interpretationZone = parsedZone || zone,\n        inst = DateTime.fromObject(Object.assign(parsed, opts, {\n      zone: interpretationZone,\n      // setZone is a valid option in the calling methods, but not in fromObject\n      setZone: undefined\n    }));\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(new Invalid(\"unparsable\", \"the input \\\"\" + text + \"\\\" can't be parsed as \" + format));\n  }\n} // if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\n\n\nfunction toTechFormat(dt, format, allowZ) {\n  if (allowZ === void 0) {\n    allowZ = true;\n  }\n\n  return dt.isValid ? Formatter.create(Locale.create(\"en-US\"), {\n    allowZ: allowZ,\n    forceSimple: true\n  }).formatDateTimeFromString(dt, format) : null;\n} // technical time formats (e.g. the time part of ISO 8601), take some options\n// and this commonizes their handling\n\n\nfunction toTechTimeFormat(dt, _ref) {\n  var _ref$suppressSeconds = _ref.suppressSeconds,\n      suppressSeconds = _ref$suppressSeconds === void 0 ? false : _ref$suppressSeconds,\n      _ref$suppressMillisec = _ref.suppressMilliseconds,\n      suppressMilliseconds = _ref$suppressMillisec === void 0 ? false : _ref$suppressMillisec,\n      includeOffset = _ref.includeOffset,\n      _ref$includePrefix = _ref.includePrefix,\n      includePrefix = _ref$includePrefix === void 0 ? false : _ref$includePrefix,\n      _ref$includeZone = _ref.includeZone,\n      includeZone = _ref$includeZone === void 0 ? false : _ref$includeZone,\n      _ref$spaceZone = _ref.spaceZone,\n      spaceZone = _ref$spaceZone === void 0 ? false : _ref$spaceZone,\n      _ref$format = _ref.format,\n      format = _ref$format === void 0 ? \"extended\" : _ref$format;\n  var fmt = format === \"basic\" ? \"HHmm\" : \"HH:mm\";\n\n  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {\n    fmt += format === \"basic\" ? \"ss\" : \":ss\";\n\n    if (!suppressMilliseconds || dt.millisecond !== 0) {\n      fmt += \".SSS\";\n    }\n  }\n\n  if ((includeZone || includeOffset) && spaceZone) {\n    fmt += \" \";\n  }\n\n  if (includeZone) {\n    fmt += \"z\";\n  } else if (includeOffset) {\n    fmt += format === \"basic\" ? \"ZZZ\" : \"ZZ\";\n  }\n\n  var str = toTechFormat(dt, fmt);\n\n  if (includePrefix) {\n    str = \"T\" + str;\n  }\n\n  return str;\n} // defaults for unspecified units in the supported calendars\n\n\nvar defaultUnitValues = {\n  month: 1,\n  day: 1,\n  hour: 0,\n  minute: 0,\n  second: 0,\n  millisecond: 0\n},\n    defaultWeekUnitValues = {\n  weekNumber: 1,\n  weekday: 1,\n  hour: 0,\n  minute: 0,\n  second: 0,\n  millisecond: 0\n},\n    defaultOrdinalUnitValues = {\n  ordinal: 1,\n  hour: 0,\n  minute: 0,\n  second: 0,\n  millisecond: 0\n}; // Units in the supported calendars, sorted by bigness\n\nvar orderedUnits$1 = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n    orderedWeekUnits = [\"weekYear\", \"weekNumber\", \"weekday\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n    orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"]; // standardize case and plurality in units\n\nfunction normalizeUnit(unit) {\n  var normalized = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\"\n  }[unit.toLowerCase()];\n  if (!normalized) throw new InvalidUnitError(unit);\n  return normalized;\n} // this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\n\n\nfunction quickDT(obj, zone) {\n  // assume we have the higher-order units\n  for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits$1), _step; !(_step = _iterator()).done;) {\n    var u = _step.value;\n\n    if (isUndefined(obj[u])) {\n      obj[u] = defaultUnitValues[u];\n    }\n  }\n\n  var invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n\n  if (invalid) {\n    return DateTime.invalid(invalid);\n  }\n\n  var tsNow = Settings.now(),\n      offsetProvis = zone.offset(tsNow),\n      _objToTS = objToTS(obj, offsetProvis, zone),\n      ts = _objToTS[0],\n      o = _objToTS[1];\n\n  return new DateTime({\n    ts: ts,\n    zone: zone,\n    o: o\n  });\n}\n\nfunction diffRelative(start, end, opts) {\n  var round = isUndefined(opts.round) ? true : opts.round,\n      format = function format(c, unit) {\n    c = roundTo(c, round || opts.calendary ? 0 : 2, true);\n    var formatter = end.loc.clone(opts).relFormatter(opts);\n    return formatter.format(c, unit);\n  },\n      differ = function differ(unit) {\n    if (opts.calendary) {\n      if (!end.hasSame(start, unit)) {\n        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);\n      } else return 0;\n    } else {\n      return end.diff(start, unit).get(unit);\n    }\n  };\n\n  if (opts.unit) {\n    return format(differ(opts.unit), opts.unit);\n  }\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(opts.units), _step2; !(_step2 = _iterator2()).done;) {\n    var unit = _step2.value;\n    var count = differ(unit);\n\n    if (Math.abs(count) >= 1) {\n      return format(count, unit);\n    }\n  }\n\n  return format(0, opts.units[opts.units.length - 1]);\n}\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toRelative}, {@link toRelativeCalendar}, {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\n\n\nvar DateTime = /*#__PURE__*/function () {\n  /**\n   * @access private\n   */\n  function DateTime(config) {\n    var zone = config.zone || Settings.defaultZone;\n    var invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) || (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n    var c = null,\n        o = null;\n\n    if (!invalid) {\n      var unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n\n      if (unchanged) {\n        var _ref2 = [config.old.c, config.old.o];\n        c = _ref2[0];\n        o = _ref2[1];\n      } else {\n        var ot = zone.offset(this.ts);\n        c = tsToObj(this.ts, ot);\n        invalid = Number.isNaN(c.year) ? new Invalid(\"invalid input\") : null;\n        c = invalid ? null : c;\n        o = invalid ? null : ot;\n      }\n    }\n    /**\n     * @access private\n     */\n\n\n    this._zone = zone;\n    /**\n     * @access private\n     */\n\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n\n    this.weekData = null;\n    /**\n     * @access private\n     */\n\n    this.c = c;\n    /**\n     * @access private\n     */\n\n    this.o = o;\n    /**\n     * @access private\n     */\n\n    this.isLuxonDateTime = true;\n  } // CONSTRUCT\n\n  /**\n   * Create a DateTime for the current instant, in the system's time zone.\n   *\n   * Use Settings to override these default values if needed.\n   * @example DateTime.now().toISO() //~> now in the ISO format\n   * @return {DateTime}\n   */\n\n\n  DateTime.now = function now() {\n    return new DateTime({});\n  }\n  /**\n   * Create a local DateTime\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month, 1-indexed\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.local = function local(year, month, day, hour, minute, second, millisecond) {\n    if (isUndefined(year)) {\n      return new DateTime({});\n    } else {\n      return quickDT({\n        year: year,\n        month: month,\n        day: day,\n        hour: hour,\n        minute: minute,\n        second: second,\n        millisecond: millisecond\n      }, Settings.defaultZone);\n    }\n  }\n  /**\n   * Create a DateTime in UTC\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.utc = function utc(year, month, day, hour, minute, second, millisecond) {\n    if (isUndefined(year)) {\n      return new DateTime({\n        ts: Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return quickDT({\n        year: year,\n        month: month,\n        day: day,\n        hour: hour,\n        minute: minute,\n        second: second,\n        millisecond: millisecond\n      }, FixedOffsetZone.utcInstance);\n    }\n  }\n  /**\n   * Create a DateTime from a JavaScript Date object. Uses the default zone.\n   * @param {Date} date - a JavaScript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.fromJSDate = function fromJSDate(date, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var ts = isDate(date) ? date.valueOf() : NaN;\n\n    if (Number.isNaN(ts)) {\n      return DateTime.invalid(\"invalid input\");\n    }\n\n    var zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\n\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    return new DateTime({\n      ts: ts,\n      zone: zoneToUse,\n      loc: Locale.fromObject(options)\n    });\n  }\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.fromMillis = function fromMillis(milliseconds, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\"fromMillis requires a numerical input, but received a \" + typeof milliseconds + \" with value \" + milliseconds);\n    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\n      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start\n      return DateTime.invalid(\"Timestamp out of range\");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n  /**\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.fromSeconds = function fromSeconds(seconds, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n  /**\n   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.fromObject = function fromObject(obj) {\n    var zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);\n\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    var tsNow = Settings.now(),\n        offsetProvis = zoneToUse.offset(tsNow),\n        normalized = normalizeObject(obj, normalizeUnit, [\"zone\", \"locale\", \"outputCalendar\", \"numberingSystem\"]),\n        containsOrdinal = !isUndefined(normalized.ordinal),\n        containsGregorYear = !isUndefined(normalized.year),\n        containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n        containsGregor = containsGregorYear || containsGregorMD,\n        definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n        loc = Locale.fromObject(obj); // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\"Can't mix weekYear/weekNumber units with year/month/day or ordinals\");\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    var useWeekData = definiteWeekDef || normalized.weekday && !containsGregor; // configure ourselves to deal with gregorian dates or week stuff\n\n    var units,\n        defaultValues,\n        objNow = tsToObj(tsNow, offsetProvis);\n\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits$1;\n      defaultValues = defaultUnitValues;\n    } // set default values for missing stuff\n\n\n    var foundFirst = false;\n\n    for (var _iterator3 = _createForOfIteratorHelperLoose(units), _step3; !(_step3 = _iterator3()).done;) {\n      var u = _step3.value;\n      var v = normalized[u];\n\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    } // make sure the values we have are in range\n\n\n    var higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized),\n        invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } // compute the actual time\n\n\n    var gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized,\n        _objToTS2 = objToTS(gregorian, offsetProvis, zoneToUse),\n        tsFinal = _objToTS2[0],\n        offsetFinal = _objToTS2[1],\n        inst = new DateTime({\n      ts: tsFinal,\n      zone: zoneToUse,\n      o: offsetFinal,\n      loc: loc\n    }); // gregorian data + weekday serves only to validate\n\n\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\"mismatched weekday\", \"you can't specify both a weekday of \" + normalized.weekday + \" and a date of \" + inst.toISO());\n    }\n\n    return inst;\n  }\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.fromISO = function fromISO(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _parseISODate = parseISODate(text),\n        vals = _parseISODate[0],\n        parsedZone = _parseISODate[1];\n\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\n  }\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.fromRFC2822 = function fromRFC2822(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _parseRFC2822Date = parseRFC2822Date(text),\n        vals = _parseRFC2822Date[0],\n        parsedZone = _parseRFC2822Date[1];\n\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\n  }\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.fromHTTP = function fromHTTP(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _parseHTTPDate = parseHTTPDate(text),\n        vals = _parseHTTPDate[0],\n        parsedZone = _parseHTTPDate[1];\n\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\n  }\n  /**\n   * Create a DateTime from an input string and format string.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.fromFormat = function fromFormat(text, fmt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n\n    var _opts = opts,\n        _opts$locale = _opts.locale,\n        locale = _opts$locale === void 0 ? null : _opts$locale,\n        _opts$numberingSystem = _opts.numberingSystem,\n        numberingSystem = _opts$numberingSystem === void 0 ? null : _opts$numberingSystem,\n        localeToUse = Locale.fromOpts({\n      locale: locale,\n      numberingSystem: numberingSystem,\n      defaultToEN: true\n    }),\n        _parseFromTokens = parseFromTokens(localeToUse, text, fmt),\n        vals = _parseFromTokens[0],\n        parsedZone = _parseFromTokens[1],\n        invalid = _parseFromTokens[2];\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, \"format \" + fmt, text);\n    }\n  }\n  /**\n   * @deprecated use fromFormat instead\n   */\n  ;\n\n  DateTime.fromString = function fromString(text, fmt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.fromSQL = function fromSQL(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _parseSQL = parseSQL(text),\n        vals = _parseSQL[0],\n        parsedZone = _parseSQL[1];\n\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\n  }\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */\n  ;\n\n  DateTime.invalid = function invalid(reason, explanation) {\n    if (explanation === void 0) {\n      explanation = null;\n    }\n\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\n    }\n\n    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({\n        invalid: invalid\n      });\n    }\n  }\n  /**\n   * Check if an object is a DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  ;\n\n  DateTime.isDateTime = function isDateTime(o) {\n    return o && o.isLuxonDateTime || false;\n  } // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  ;\n\n  var _proto = DateTime.prototype;\n\n  _proto.get = function get(unit) {\n    return this[unit];\n  }\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */\n  ;\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  _proto.resolvedLocaleOpts = function resolvedLocaleOpts(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _Formatter$create$res = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this),\n        locale = _Formatter$create$res.locale,\n        numberingSystem = _Formatter$create$res.numberingSystem,\n        calendar = _Formatter$create$res.calendar;\n\n    return {\n      locale: locale,\n      numberingSystem: numberingSystem,\n      outputCalendar: calendar\n    };\n  } // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  ;\n\n  _proto.toUTC = function toUTC(offset, opts) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  ;\n\n  _proto.toLocal = function toLocal() {\n    return this.setZone(Settings.defaultZone);\n  }\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  ;\n\n  _proto.setZone = function setZone(zone, _temp) {\n    var _ref3 = _temp === void 0 ? {} : _temp,\n        _ref3$keepLocalTime = _ref3.keepLocalTime,\n        keepLocalTime = _ref3$keepLocalTime === void 0 ? false : _ref3$keepLocalTime,\n        _ref3$keepCalendarTim = _ref3.keepCalendarTime,\n        keepCalendarTime = _ref3$keepCalendarTim === void 0 ? false : _ref3$keepCalendarTim;\n\n    zone = normalizeZone(zone, Settings.defaultZone);\n\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      var newTS = this.ts;\n\n      if (keepLocalTime || keepCalendarTime) {\n        var offsetGuess = zone.offset(this.ts);\n        var asObj = this.toObject();\n\n        var _objToTS3 = objToTS(asObj, offsetGuess, zone);\n\n        newTS = _objToTS3[0];\n      }\n\n      return clone$1(this, {\n        ts: newTS,\n        zone: zone\n      });\n    }\n  }\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  ;\n\n  _proto.reconfigure = function reconfigure(_temp2) {\n    var _ref4 = _temp2 === void 0 ? {} : _temp2,\n        locale = _ref4.locale,\n        numberingSystem = _ref4.numberingSystem,\n        outputCalendar = _ref4.outputCalendar;\n\n    var loc = this.loc.clone({\n      locale: locale,\n      numberingSystem: numberingSystem,\n      outputCalendar: outputCalendar\n    });\n    return clone$1(this, {\n      loc: loc\n    });\n  }\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  ;\n\n  _proto.setLocale = function setLocale(locale) {\n    return this.reconfigure({\n      locale: locale\n    });\n  }\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link reconfigure} and {@link setZone}.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  ;\n\n  _proto.set = function set(values) {\n    if (!this.isValid) return this;\n    var normalized = normalizeObject(values, normalizeUnit, []),\n        settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday);\n    var mixed;\n\n    if (settingWeekStuff) {\n      mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));\n    } else {\n      mixed = Object.assign(this.toObject(), normalized); // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    var _objToTS4 = objToTS(mixed, this.o, this.zone),\n        ts = _objToTS4[0],\n        o = _objToTS4[1];\n\n    return clone$1(this, {\n      ts: ts,\n      o: o\n    });\n  }\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.now().plus(123) //~> in 123 milliseconds\n   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\n   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\n   * @return {DateTime}\n   */\n  ;\n\n  _proto.plus = function plus(duration) {\n    if (!this.isValid) return this;\n    var dur = friendlyDuration(duration);\n    return clone$1(this, adjustTime(this, dur));\n  }\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  ;\n\n  _proto.minus = function minus(duration) {\n    if (!this.isValid) return this;\n    var dur = friendlyDuration(duration).negate();\n    return clone$1(this, adjustTime(this, dur));\n  }\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  ;\n\n  _proto.startOf = function startOf(unit) {\n    if (!this.isValid) return this;\n    var o = {},\n        normalizedUnit = Duration.normalizeUnit(unit);\n\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      // no default, invalid units throw in normalizeUnit()\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      o.weekday = 1;\n    }\n\n    if (normalizedUnit === \"quarters\") {\n      var q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n  /**\n   * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  ;\n\n  _proto.endOf = function endOf(unit) {\n    var _this$plus;\n\n    return this.isValid ? this.plus((_this$plus = {}, _this$plus[unit] = 1, _this$plus)).startOf(unit).minus(1) : this;\n  } // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options\n   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  ;\n\n  _proto.toFormat = function toFormat(fmt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID$2;\n  }\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @example DateTime.now().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\n   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\n   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '11:32'\n   * @return {string}\n   */\n  ;\n\n  _proto.toLocaleString = function toLocaleString(opts) {\n    if (opts === void 0) {\n      opts = DATE_SHORT;\n    }\n\n    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this) : INVALID$2;\n  }\n  /**\n   * Returns an array of format \"parts\", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.now().toLocaleParts(); //=> [\n   *                                   //=>   { type: 'day', value: '25' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'month', value: '05' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'year', value: '1982' }\n   *                                   //=> ]\n   */\n  ;\n\n  _proto.toLocaleParts = function toLocaleParts(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\n   * @return {string}\n   */\n  ;\n\n  _proto.toISO = function toISO(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!this.isValid) {\n      return null;\n    }\n\n    return this.toISODate(opts) + \"T\" + this.toISOTime(opts);\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @param {Object} opts - options\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\n   * @return {string}\n   */\n  ;\n\n  _proto.toISODate = function toISODate(_temp3) {\n    var _ref5 = _temp3 === void 0 ? {} : _temp3,\n        _ref5$format = _ref5.format,\n        format = _ref5$format === void 0 ? \"extended\" : _ref5$format;\n\n    var fmt = format === \"basic\" ? \"yyyyMMdd\" : \"yyyy-MM-dd\";\n\n    if (this.year > 9999) {\n      fmt = \"+\" + fmt;\n    }\n\n    return toTechFormat(this, fmt);\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  ;\n\n  _proto.toISOWeekDate = function toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'\n   * @return {string}\n   */\n  ;\n\n  _proto.toISOTime = function toISOTime(_temp4) {\n    var _ref6 = _temp4 === void 0 ? {} : _temp4,\n        _ref6$suppressMillise = _ref6.suppressMilliseconds,\n        suppressMilliseconds = _ref6$suppressMillise === void 0 ? false : _ref6$suppressMillise,\n        _ref6$suppressSeconds = _ref6.suppressSeconds,\n        suppressSeconds = _ref6$suppressSeconds === void 0 ? false : _ref6$suppressSeconds,\n        _ref6$includeOffset = _ref6.includeOffset,\n        includeOffset = _ref6$includeOffset === void 0 ? true : _ref6$includeOffset,\n        _ref6$includePrefix = _ref6.includePrefix,\n        includePrefix = _ref6$includePrefix === void 0 ? false : _ref6$includePrefix,\n        _ref6$format = _ref6.format,\n        format = _ref6$format === void 0 ? \"extended\" : _ref6$format;\n\n    return toTechTimeFormat(this, {\n      suppressSeconds: suppressSeconds,\n      suppressMilliseconds: suppressMilliseconds,\n      includeOffset: includeOffset,\n      includePrefix: includePrefix,\n      format: format\n    });\n  }\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  ;\n\n  _proto.toRFC2822 = function toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\n  }\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  ;\n\n  _proto.toHTTP = function toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  ;\n\n  _proto.toSQLDate = function toSQLDate() {\n    return toTechFormat(this, \"yyyy-MM-dd\");\n  }\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  ;\n\n  _proto.toSQLTime = function toSQLTime(_temp5) {\n    var _ref7 = _temp5 === void 0 ? {} : _temp5,\n        _ref7$includeOffset = _ref7.includeOffset,\n        includeOffset = _ref7$includeOffset === void 0 ? true : _ref7$includeOffset,\n        _ref7$includeZone = _ref7.includeZone,\n        includeZone = _ref7$includeZone === void 0 ? false : _ref7$includeZone;\n\n    return toTechTimeFormat(this, {\n      includeOffset: includeOffset,\n      includeZone: includeZone,\n      spaceZone: true\n    });\n  }\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  ;\n\n  _proto.toSQL = function toSQL(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!this.isValid) {\n      return null;\n    }\n\n    return this.toSQLDate() + \" \" + this.toSQLTime(opts);\n  }\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  ;\n\n  _proto.toString = function toString() {\n    return this.isValid ? this.toISO() : INVALID$2;\n  }\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}\n   * @return {number}\n   */\n  ;\n\n  _proto.valueOf = function valueOf() {\n    return this.toMillis();\n  }\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  ;\n\n  _proto.toMillis = function toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */\n  ;\n\n  _proto.toSeconds = function toSeconds() {\n    return this.isValid ? this.ts / 1000 : NaN;\n  }\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  ;\n\n  _proto.toJSON = function toJSON() {\n    return this.toISO();\n  }\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  ;\n\n  _proto.toBSON = function toBSON() {\n    return this.toJSDate();\n  }\n  /**\n   * Returns a JavaScript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  ;\n\n  _proto.toObject = function toObject(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!this.isValid) return {};\n    var base = Object.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n\n    return base;\n  }\n  /**\n   * Returns a JavaScript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  ;\n\n  _proto.toJSDate = function toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  } // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  ;\n\n  _proto.diff = function diff(otherDateTime, unit, opts) {\n    if (unit === void 0) {\n      unit = \"milliseconds\";\n    }\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!this.isValid || !otherDateTime.isValid) {\n      return Duration.invalid(this.invalid || otherDateTime.invalid, \"created by diffing an invalid DateTime\");\n    }\n\n    var durOpts = Object.assign({\n      locale: this.locale,\n      numberingSystem: this.numberingSystem\n    }, opts);\n\n    var units = maybeArray(unit).map(Duration.normalizeUnit),\n        otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n        earlier = otherIsLater ? this : otherDateTime,\n        later = otherIsLater ? otherDateTime : this,\n        diffed = _diff(earlier, later, units, durOpts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  ;\n\n  _proto.diffNow = function diffNow(unit, opts) {\n    if (unit === void 0) {\n      unit = \"milliseconds\";\n    }\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return this.diff(DateTime.now(), unit, opts);\n  }\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval}\n   */\n  ;\n\n  _proto.until = function until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime.\n   * Higher-order units must also be identical for this function to return `true`.\n   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link setZone} to convert one of the dates if needed.\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day\n   * @return {boolean}\n   */\n  ;\n\n  _proto.hasSame = function hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n    var inputMs = otherDateTime.valueOf();\n    var otherZoneDateTime = this.setZone(otherDateTime.zone, {\n      keepLocalTime: true\n    });\n    return otherZoneDateTime.startOf(unit) <= inputMs && inputMs <= otherZoneDateTime.endOf(unit);\n  }\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  ;\n\n  _proto.equals = function equals(other) {\n    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);\n  }\n  /**\n   * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\n   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\n   * @example DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"\n   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\n   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\n   */\n  ;\n\n  _proto.toRelative = function toRelative(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!this.isValid) return null;\n    var base = options.base || DateTime.fromObject({\n      zone: this.zone\n    }),\n        padding = options.padding ? this < base ? -options.padding : options.padding : 0;\n    return diffRelative(base, this.plus(padding), Object.assign(options, {\n      numeric: \"always\",\n      units: [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"]\n    }));\n  }\n  /**\n   * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\n   * @example DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\n   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\n   */\n  ;\n\n  _proto.toRelativeCalendar = function toRelativeCalendar(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!this.isValid) return null;\n    return diffRelative(options.base || DateTime.fromObject({\n      zone: this.zone\n    }), this, Object.assign(options, {\n      numeric: \"auto\",\n      units: [\"years\", \"months\", \"days\"],\n      calendary: true\n    }));\n  }\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */\n  ;\n\n  DateTime.min = function min() {\n    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {\n      dateTimes[_key] = arguments[_key];\n    }\n\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\n    }\n\n    return bestBy(dateTimes, function (i) {\n      return i.valueOf();\n    }, Math.min);\n  }\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */\n  ;\n\n  DateTime.max = function max() {\n    for (var _len2 = arguments.length, dateTimes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      dateTimes[_key2] = arguments[_key2];\n    }\n\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\n    }\n\n    return bestBy(dateTimes, function (i) {\n      return i.valueOf();\n    }, Math.max);\n  } // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  ;\n\n  DateTime.fromFormatExplain = function fromFormatExplain(text, fmt, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _options = options,\n        _options$locale = _options.locale,\n        locale = _options$locale === void 0 ? null : _options$locale,\n        _options$numberingSys = _options.numberingSystem,\n        numberingSystem = _options$numberingSys === void 0 ? null : _options$numberingSys,\n        localeToUse = Locale.fromOpts({\n      locale: locale,\n      numberingSystem: numberingSystem,\n      defaultToEN: true\n    });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n  /**\n   * @deprecated use fromFormatExplain instead\n   */\n  ;\n\n  DateTime.fromStringExplain = function fromStringExplain(text, fmt, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return DateTime.fromFormatExplain(text, fmt, options);\n  } // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  ;\n\n  _createClass(DateTime, [{\n    key: \"isValid\",\n    get: function get() {\n      return this.invalid === null;\n    }\n    /**\n     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n     * @type {string}\n     */\n\n  }, {\n    key: \"invalidReason\",\n    get: function get() {\n      return this.invalid ? this.invalid.reason : null;\n    }\n    /**\n     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n     * @type {string}\n     */\n\n  }, {\n    key: \"invalidExplanation\",\n    get: function get() {\n      return this.invalid ? this.invalid.explanation : null;\n    }\n    /**\n     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n     *\n     * @type {string}\n     */\n\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.isValid ? this.loc.locale : null;\n    }\n    /**\n     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n     *\n     * @type {string}\n     */\n\n  }, {\n    key: \"numberingSystem\",\n    get: function get() {\n      return this.isValid ? this.loc.numberingSystem : null;\n    }\n    /**\n     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n     *\n     * @type {string}\n     */\n\n  }, {\n    key: \"outputCalendar\",\n    get: function get() {\n      return this.isValid ? this.loc.outputCalendar : null;\n    }\n    /**\n     * Get the time zone associated with this DateTime.\n     * @type {Zone}\n     */\n\n  }, {\n    key: \"zone\",\n    get: function get() {\n      return this._zone;\n    }\n    /**\n     * Get the name of the time zone.\n     * @type {string}\n     */\n\n  }, {\n    key: \"zoneName\",\n    get: function get() {\n      return this.isValid ? this.zone.name : null;\n    }\n    /**\n     * Get the year\n     * @example DateTime.local(2017, 5, 25).year //=> 2017\n     * @type {number}\n     */\n\n  }, {\n    key: \"year\",\n    get: function get() {\n      return this.isValid ? this.c.year : NaN;\n    }\n    /**\n     * Get the quarter\n     * @example DateTime.local(2017, 5, 25).quarter //=> 2\n     * @type {number}\n     */\n\n  }, {\n    key: \"quarter\",\n    get: function get() {\n      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n    }\n    /**\n     * Get the month (1-12).\n     * @example DateTime.local(2017, 5, 25).month //=> 5\n     * @type {number}\n     */\n\n  }, {\n    key: \"month\",\n    get: function get() {\n      return this.isValid ? this.c.month : NaN;\n    }\n    /**\n     * Get the day of the month (1-30ish).\n     * @example DateTime.local(2017, 5, 25).day //=> 25\n     * @type {number}\n     */\n\n  }, {\n    key: \"day\",\n    get: function get() {\n      return this.isValid ? this.c.day : NaN;\n    }\n    /**\n     * Get the hour of the day (0-23).\n     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n     * @type {number}\n     */\n\n  }, {\n    key: \"hour\",\n    get: function get() {\n      return this.isValid ? this.c.hour : NaN;\n    }\n    /**\n     * Get the minute of the hour (0-59).\n     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n     * @type {number}\n     */\n\n  }, {\n    key: \"minute\",\n    get: function get() {\n      return this.isValid ? this.c.minute : NaN;\n    }\n    /**\n     * Get the second of the minute (0-59).\n     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n     * @type {number}\n     */\n\n  }, {\n    key: \"second\",\n    get: function get() {\n      return this.isValid ? this.c.second : NaN;\n    }\n    /**\n     * Get the millisecond of the second (0-999).\n     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n     * @type {number}\n     */\n\n  }, {\n    key: \"millisecond\",\n    get: function get() {\n      return this.isValid ? this.c.millisecond : NaN;\n    }\n    /**\n     * Get the week year\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\n     * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n     * @type {number}\n     */\n\n  }, {\n    key: \"weekYear\",\n    get: function get() {\n      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n    }\n    /**\n     * Get the week number of the week year (1-52ish).\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\n     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n     * @type {number}\n     */\n\n  }, {\n    key: \"weekNumber\",\n    get: function get() {\n      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n    }\n    /**\n     * Get the day of the week.\n     * 1 is Monday and 7 is Sunday\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\n     * @example DateTime.local(2014, 11, 31).weekday //=> 4\n     * @type {number}\n     */\n\n  }, {\n    key: \"weekday\",\n    get: function get() {\n      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n    }\n    /**\n     * Get the ordinal (meaning the day of the year)\n     * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n     * @type {number|DateTime}\n     */\n\n  }, {\n    key: \"ordinal\",\n    get: function get() {\n      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n    }\n    /**\n     * Get the human readable short month name, such as 'Oct'.\n     * Defaults to the system's locale if no locale has been specified\n     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n     * @type {string}\n     */\n\n  }, {\n    key: \"monthShort\",\n    get: function get() {\n      return this.isValid ? Info.months(\"short\", {\n        locale: this.locale\n      })[this.month - 1] : null;\n    }\n    /**\n     * Get the human readable long month name, such as 'October'.\n     * Defaults to the system's locale if no locale has been specified\n     * @example DateTime.local(2017, 10, 30).monthLong //=> October\n     * @type {string}\n     */\n\n  }, {\n    key: \"monthLong\",\n    get: function get() {\n      return this.isValid ? Info.months(\"long\", {\n        locale: this.locale\n      })[this.month - 1] : null;\n    }\n    /**\n     * Get the human readable short weekday, such as 'Mon'.\n     * Defaults to the system's locale if no locale has been specified\n     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n     * @type {string}\n     */\n\n  }, {\n    key: \"weekdayShort\",\n    get: function get() {\n      return this.isValid ? Info.weekdays(\"short\", {\n        locale: this.locale\n      })[this.weekday - 1] : null;\n    }\n    /**\n     * Get the human readable long weekday, such as 'Monday'.\n     * Defaults to the system's locale if no locale has been specified\n     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n     * @type {string}\n     */\n\n  }, {\n    key: \"weekdayLong\",\n    get: function get() {\n      return this.isValid ? Info.weekdays(\"long\", {\n        locale: this.locale\n      })[this.weekday - 1] : null;\n    }\n    /**\n     * Get the UTC offset of this DateTime in minutes\n     * @example DateTime.now().offset //=> -240\n     * @example DateTime.utc().offset //=> 0\n     * @type {number}\n     */\n\n  }, {\n    key: \"offset\",\n    get: function get() {\n      return this.isValid ? +this.o : NaN;\n    }\n    /**\n     * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n     * Defaults to the system's locale if no locale has been specified\n     * @type {string}\n     */\n\n  }, {\n    key: \"offsetNameShort\",\n    get: function get() {\n      if (this.isValid) {\n        return this.zone.offsetName(this.ts, {\n          format: \"short\",\n          locale: this.locale\n        });\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n     * Defaults to the system's locale if no locale has been specified\n     * @type {string}\n     */\n\n  }, {\n    key: \"offsetNameLong\",\n    get: function get() {\n      if (this.isValid) {\n        return this.zone.offsetName(this.ts, {\n          format: \"long\",\n          locale: this.locale\n        });\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Get whether this zone's offset ever changes, as in a DST.\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isOffsetFixed\",\n    get: function get() {\n      return this.isValid ? this.zone.universal : null;\n    }\n    /**\n     * Get whether the DateTime is in a DST.\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isInDST\",\n    get: function get() {\n      if (this.isOffsetFixed) {\n        return false;\n      } else {\n        return this.offset > this.set({\n          month: 1\n        }).offset || this.offset > this.set({\n          month: 5\n        }).offset;\n      }\n    }\n    /**\n     * Returns true if this DateTime is in a leap year, false otherwise\n     * @example DateTime.local(2016).isInLeapYear //=> true\n     * @example DateTime.local(2013).isInLeapYear //=> false\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isInLeapYear\",\n    get: function get() {\n      return isLeapYear(this.year);\n    }\n    /**\n     * Returns the number of days in this DateTime's month\n     * @example DateTime.local(2016, 2).daysInMonth //=> 29\n     * @example DateTime.local(2016, 3).daysInMonth //=> 31\n     * @type {number}\n     */\n\n  }, {\n    key: \"daysInMonth\",\n    get: function get() {\n      return daysInMonth(this.year, this.month);\n    }\n    /**\n     * Returns the number of days in this DateTime's year\n     * @example DateTime.local(2016).daysInYear //=> 366\n     * @example DateTime.local(2013).daysInYear //=> 365\n     * @type {number}\n     */\n\n  }, {\n    key: \"daysInYear\",\n    get: function get() {\n      return this.isValid ? daysInYear(this.year) : NaN;\n    }\n    /**\n     * Returns the number of weeks in this DateTime's year\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\n     * @example DateTime.local(2004).weeksInWeekYear //=> 53\n     * @example DateTime.local(2013).weeksInWeekYear //=> 52\n     * @type {number}\n     */\n\n  }, {\n    key: \"weeksInWeekYear\",\n    get: function get() {\n      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n    }\n  }], [{\n    key: \"DATE_SHORT\",\n    get: function get() {\n      return DATE_SHORT;\n    }\n    /**\n     * {@link toLocaleString} format like 'Oct 14, 1983'\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATE_MED\",\n    get: function get() {\n      return DATE_MED;\n    }\n    /**\n     * {@link toLocaleString} format like 'Fri, Oct 14, 1983'\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATE_MED_WITH_WEEKDAY\",\n    get: function get() {\n      return DATE_MED_WITH_WEEKDAY;\n    }\n    /**\n     * {@link toLocaleString} format like 'October 14, 1983'\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATE_FULL\",\n    get: function get() {\n      return DATE_FULL;\n    }\n    /**\n     * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATE_HUGE\",\n    get: function get() {\n      return DATE_HUGE;\n    }\n    /**\n     * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"TIME_SIMPLE\",\n    get: function get() {\n      return TIME_SIMPLE;\n    }\n    /**\n     * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"TIME_WITH_SECONDS\",\n    get: function get() {\n      return TIME_WITH_SECONDS;\n    }\n    /**\n     * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"TIME_WITH_SHORT_OFFSET\",\n    get: function get() {\n      return TIME_WITH_SHORT_OFFSET;\n    }\n    /**\n     * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"TIME_WITH_LONG_OFFSET\",\n    get: function get() {\n      return TIME_WITH_LONG_OFFSET;\n    }\n    /**\n     * {@link toLocaleString} format like '09:30', always 24-hour.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"TIME_24_SIMPLE\",\n    get: function get() {\n      return TIME_24_SIMPLE;\n    }\n    /**\n     * {@link toLocaleString} format like '09:30:23', always 24-hour.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"TIME_24_WITH_SECONDS\",\n    get: function get() {\n      return TIME_24_WITH_SECONDS;\n    }\n    /**\n     * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"TIME_24_WITH_SHORT_OFFSET\",\n    get: function get() {\n      return TIME_24_WITH_SHORT_OFFSET;\n    }\n    /**\n     * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"TIME_24_WITH_LONG_OFFSET\",\n    get: function get() {\n      return TIME_24_WITH_LONG_OFFSET;\n    }\n    /**\n     * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATETIME_SHORT\",\n    get: function get() {\n      return DATETIME_SHORT;\n    }\n    /**\n     * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATETIME_SHORT_WITH_SECONDS\",\n    get: function get() {\n      return DATETIME_SHORT_WITH_SECONDS;\n    }\n    /**\n     * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATETIME_MED\",\n    get: function get() {\n      return DATETIME_MED;\n    }\n    /**\n     * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATETIME_MED_WITH_SECONDS\",\n    get: function get() {\n      return DATETIME_MED_WITH_SECONDS;\n    }\n    /**\n     * {@link toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATETIME_MED_WITH_WEEKDAY\",\n    get: function get() {\n      return DATETIME_MED_WITH_WEEKDAY;\n    }\n    /**\n     * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATETIME_FULL\",\n    get: function get() {\n      return DATETIME_FULL;\n    }\n    /**\n     * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATETIME_FULL_WITH_SECONDS\",\n    get: function get() {\n      return DATETIME_FULL_WITH_SECONDS;\n    }\n    /**\n     * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATETIME_HUGE\",\n    get: function get() {\n      return DATETIME_HUGE;\n    }\n    /**\n     * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n\n  }, {\n    key: \"DATETIME_HUGE_WITH_SECONDS\",\n    get: function get() {\n      return DATETIME_HUGE_WITH_SECONDS;\n    }\n  }]);\n\n  return DateTime;\n}();\nfunction friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\"Unknown datetime argument: \" + dateTimeish + \", of type \" + typeof dateTimeish);\n  }\n}\n\nvar VERSION = \"1.26.0\";\n\nexports.DateTime = DateTime;\nexports.Duration = Duration;\nexports.FixedOffsetZone = FixedOffsetZone;\nexports.IANAZone = IANAZone;\nexports.Info = Info;\nexports.Interval = Interval;\nexports.InvalidZone = InvalidZone;\nexports.LocalZone = LocalZone;\nexports.Settings = Settings;\nexports.VERSION = VERSION;\nexports.Zone = Zone;\n//# sourceMappingURL=luxon.js.map\n","/*\r\n *  big.js v6.1.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2021 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,            // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n    /*\r\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n     * primitive number without a loss of precision.\r\n     */\r\n    STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        if (typeof n !== 'string') {\r\n          if (Big.strict === true) {\r\n            throw TypeError(INVALID + 'number');\r\n          }\r\n\r\n          // Minus zero?\r\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n        }\r\n\r\n        parse(x, n);\r\n      }\r\n\r\n      // Retain a reference to this Big constructor.\r\n      // Shadow Big.prototype.constructor which points to Object.\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.strict = STRICT;\r\n    Big.roundDown = 0;\r\n    Big.roundHalfUp = 1;\r\n    Big.roundHalfEven = 2;\r\n    Big.roundUp = 3;\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    if (!NUMERIC.test(n)) {\r\n      throw Error(INVALID + 'number');\r\n    }\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, sd, rm, more) {\r\n    var xc = x.c;\r\n\r\n    if (rm === UNDEFINED) rm = x.constructor.RM;\r\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (sd < 1) {\r\n      more =\r\n        rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n        rm === 1 && xc[0] >= 5 ||\r\n        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n      );\r\n\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = x.e - sd + 1;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else if (sd < xc.length) {\r\n\r\n      // xc[sd] is the digit after the digit that may be rounded up.\r\n      more =\r\n        rm === 1 && xc[sd] >= 5 ||\r\n        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n        rm === 3 && (more || !!xc[0]);\r\n\r\n      // Remove any digits after the required precision.\r\n      xc.length = sd--;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[sd] > 9;) {\r\n          xc[sd] = 0;\r\n          if (!sd--) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (sd = xc.length; !xc[--sd];) xc.pop();\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   */\r\n  function stringify(x, doExponential, isNonzero) {\r\n    var e = x.e,\r\n      s = x.c.join(''),\r\n      n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (doExponential) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) {\r\n        for (e -= n; e--;) s += '0';\r\n      } else if (e < n) {\r\n        s = s.slice(0, e) + '.' + s.slice(e);\r\n      }\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && isNonzero ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n   */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) {\r\n      y.s = k;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n    q.s = k;\r\n    k = p < 0 ? 0 : p;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n      p--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (yc[0]) {\r\n        y.s = -b;\r\n      } else if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = 1;\r\n      }\r\n      return y;\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var e, k, t,\r\n      x = this,\r\n      Big = x.constructor;\r\n\r\n    y = new Big(y);\r\n\r\n    // Signs differ?\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (!yc[0]) {\r\n        if (xc[0]) {\r\n          y = new Big(x);\r\n        } else {\r\n          y.s = x.s;\r\n        }\r\n      }\r\n      return y;\r\n    }\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (e = xe - ye) {\r\n      if (e > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        e = -e;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; e--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    e = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (k) {\r\n      xc.unshift(k);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor('1'),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n      throw Error(INVALID + 'exponent');\r\n    }\r\n\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.prec = function (sd, rm) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    return round(new this.constructor(this), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n   * using rounding mode rm, or Big.RM if rm is not specified.\r\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.round = function (dp, rm) {\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    return round(new this.constructor(this), dp + this.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big('0.5');\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) {\r\n      throw Error(NAME + 'No square root');\r\n    }\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s + '');\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) {\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = b;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), ++dp, rm);\r\n      for (; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, true, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n      // x.e may have changed if the value is rounded up.\r\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, false, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toJSON = P.toString = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Big as a primitve number.\r\n   */\r\n  P.toNumber = function () {\r\n    var n = Number(stringify(this, true, true));\r\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n      throw Error(NAME + 'Imprecise conversion');\r\n    }\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * rounding mode rm, or Big.RM if rm is not specified.\r\n   * Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      n = x.c[0];\r\n\r\n    if (sd !== UNDEFINED) {\r\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n        throw Error(INVALID + 'precision');\r\n      }\r\n      x = round(new Big(x), sd, rm);\r\n      for (; x.c.length < sd;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    if (Big.strict === true) {\r\n      throw Error(NAME + 'valueOf disallowed');\r\n    }\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n","import { DateTime, Info } from 'luxon';\n\nexport namespace Utils {\n  // https://stackoverflow.com/a/40577337/8037425\n  export function getAllMethodNames(obj: object, excludeContructors: boolean = false): Array<string> {\n    let _obj: object | null = obj;\n    const methods: Set<string> = new Set();\n\n    // eslint-disable-next-line no-cond-assign\n    while ((_obj = Reflect.getPrototypeOf(_obj)) && Reflect.getPrototypeOf(_obj)) {\n      const keys: Array<string> = Reflect.ownKeys(_obj) as Array<string>;\n      keys.filter((key: string) => !excludeContructors || key !== 'constructor')\n        .forEach((key: string) => methods.add(key));\n    }\n\n    // Convert Symbols to strings, if there are any\n    return Array.from(methods, value => value.toString())\n      .sort();\n  }\n}\n\nexport namespace TimeZone {\n  /**\n   * Returns the amount of time in milliseconds to add to UTC to get\n   * standard time in this time zone. Because this value is not\n   * affected by daylight saving time, it is called <I>raw\n   * offset</I>.\n   *\n   * Since JS doesn't have a native function for this, use the lesser offset of January and July.\n   *\n   * @return the amount of raw offset time in milliseconds to add to UTC.\n   */\n  export function getRawOffset(timeZoneId: string): number {\n    const janDateTime = DateTime.fromObject({\n      month: 1,\n      day: 1,\n      zone: timeZoneId,\n    });\n    const julyDateTime = janDateTime.set({ month: 7 });\n\n    let rawOffsetMinutes;\n    if (janDateTime.offset === julyDateTime.offset) {\n      rawOffsetMinutes = janDateTime.offset;\n    } else {\n      const max = Math.max(janDateTime.offset, julyDateTime.offset);\n\n      rawOffsetMinutes = max < 0\n        ? 0 - max\n        : 0 - Math.min(janDateTime.offset, julyDateTime.offset);\n    }\n\n    return rawOffsetMinutes * 60 * 1000;\n  }\n\n  /**\n   * Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale.\n   * @param {string} timeZoneId\n   * @param {DateTime} [date]\n   * @param {boolean} [short]\n   */\n  export function getDisplayName(timeZoneId: string, date: DateTime = DateTime.local(), short: boolean = false): string {\n    return Info.normalizeZone(timeZoneId).offsetName(date.toMillis(), { format: short ? 'short' : 'long' });\n  }\n\n  /**\n   * Returns the amount of time to be added to local standard time to get local wall clock time.\n   * The default implementation returns 3600000 milliseconds (i.e., one hour) if a call to useDaylightTime() returns true.\n   * Otherwise, 0 (zero) is returned.\n   * @param {string} timeZoneId\n   * @return {number}\n   */\n  export function getDSTSavings(timeZoneId: string): number {\n    return Info.hasDST(timeZoneId) ? 3600000 : 0;\n  }\n\n  /**\n   * Returns the offset of this time zone from UTC at the specified date. If Daylight Saving Time is in effect at the\n   * specified date, the offset value is adjusted with the amount of daylight saving.\n   *\n   * This method returns a historically correct offset value if an underlying TimeZone implementation subclass\n   * supports historical Daylight Saving Time schedule and GMT offset changes.\n   * @param {string} timeZoneId\n   * @param {number} millisSinceEpoch\n   */\n  export function getOffset(timeZoneId: string, millisSinceEpoch: number): number {\n    return Info.normalizeZone(timeZoneId).offset(millisSinceEpoch) * 60 * 1000;\n  }\n}\n\n/**\n * java.util.Calendar\n */\nexport namespace Calendar {\n  export const JANUARY: number = 0;\n  export const FEBRUARY: number = 1;\n  export const MARCH: number = 2;\n  export const APRIL: number = 3;\n  export const MAY: number = 4;\n  export const JUNE: number = 5;\n  export const JULY: number = 6;\n  export const AUGUST: number = 7;\n  export const SEPTEMBER: number = 8;\n  export const OCTOBER: number = 9;\n  export const NOVEMBER: number = 10;\n  export const DECEMBER: number = 11;\n\n  export const SUNDAY: number = 1;\n  export const MONDAY: number = 2;\n  export const TUESDAY: number = 3;\n  export const WEDNESDAY: number = 4;\n  export const THURSDAY: number = 5;\n  export const FRIDAY: number = 6;\n  export const SATURDAY: number = 7;\n\n  export const DATE = 5;\n  export const MONTH = 2;\n  export const YEAR = 1;\n}\n\n/**\n * java.lang.Math\n */\nexport namespace MathUtils {\n  /**\n   * java.lang.Math.toRadians\n   * @param degrees\n   */\n  export function degreesToRadians(degrees: number): number {\n    return degrees * Math.PI / 180;\n  }\n\n  /**\n   * java.lang.Math.toDegrees\n   * @param radians\n   */\n  export function radiansToDegrees(radians: number): number {\n    return radians * 180 / Math.PI;\n  }\n}\n\n/**\n * java.lang.String\n */\nexport namespace StringUtils {\n  /**\n   * Compares two strings lexicographically.\n   * The comparison is based on the Unicode value of each character in\n   * the strings. The character sequence represented by this\n   * {@code String} object is compared lexicographically to the\n   * character sequence represented by the argument string. The result is\n   * a negative integer if this {@code String} object\n   * lexicographically precedes the argument string. The result is a\n   * positive integer if this {@code String} object lexicographically\n   * follows the argument string. The result is zero if the strings\n   * are equal; {@code compareTo} returns {@code 0} exactly when\n   * the {@link #equals(Object)} method would return {@code true}.\n   * <p>\n   * This is the definition of lexicographic ordering. If two strings are\n   * different, then either they have different characters at some index\n   * that is a valid index for both strings, or their lengths are different,\n   * or both. If they have different characters at one or more index\n   * positions, let <i>k</i> be the smallest such index; then the string\n   * whose character at position <i>k</i> has the smaller value, as\n   * determined by using the &lt; operator, lexicographically precedes the\n   * other string. In this case, {@code compareTo} returns the\n   * difference of the two character values at position {@code k} in\n   * the two string -- that is, the value:\n   * <blockquote><pre>\n   * this.charAt(k)-anotherString.charAt(k)\n   * </pre></blockquote>\n   * If there is no index position at which they differ, then the shorter\n   * string lexicographically precedes the longer string. In this case,\n   * {@code compareTo} returns the difference of the lengths of the\n   * strings -- that is, the value:\n   * <blockquote><pre>\n   * this.length()-anotherString.length()\n   * </pre></blockquote>\n   *\n   * @param string1\n   * @param   string2   the {@code String} to be compared.\n   * @return  the value {@code 0} if the argument string is equal to\n   *          this string; a value less than {@code 0} if this string\n   *          is lexicographically less than the string argument; and a\n   *          value greater than {@code 0} if this string is\n   *          lexicographically greater than the string argument.\n   */\n  export function compareTo(string1: string, string2: string): number {\n    let k: number = 0;\n    while (k < Math.min(string1.length, string2.length)) {\n      if (string1.substr(k, 1) !== string2.substr(k, 1)) {\n        return string1.charCodeAt(k) - string2.charCodeAt(k);\n      }\n      k++;\n    }\n    return string1.length - string2.length;\n  }\n}\n\nexport namespace IntegerUtils {\n  /**\n   * Compares 2 numbers\n   * @param x\n   * @param y\n   */\n  export function compare(x: number, y: number): number {\n    if (x === y) return 0;\n    return x > y ? 1 : -1;\n  }\n\n}\n\n// export const Long_MIN_VALUE = 0;\nexport const Long_MIN_VALUE = NaN;\nexport const Double_MIN_VALUE = NaN;\n\n/**\n * @param {number} num\n * @param {number} places - The number of places to pad with zeros\n * @returns {string} - The formatted integer\n */\nexport function padZeros(num: number, places: number): string {\n  const int = Math.trunc(num);\n  if (int >= Math.pow(10, places)) return int.toString();\n  return '0'.repeat(places).concat(int.toString()).slice(-places);\n}\n\nexport type ValueOf<T> = T[keyof T];\n","/* eslint-disable max-classes-per-file */\nclass BaseCustomError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport class NullPointerException extends BaseCustomError {\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor() {\n    super();\n  }\n}\n\nexport class IllegalArgumentException extends BaseCustomError {}\n\nexport class UnsupportedError extends BaseCustomError {}\n","import { DateTime } from 'luxon';\n\nimport { MathUtils, TimeZone } from '../polyfills/Utils';\nimport { IllegalArgumentException, UnsupportedError } from '../polyfills/errors';\n\n/**\n * A class that contains location information such as latitude and longitude required for astronomical calculations. The\n * elevation field may not be used by some calculation engines and would be ignored if set. Check the documentation for\n * specific implementations of the {@link AstronomicalCalculator} to see if elevation is calculated as part of the\n * algorithm.\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2016\n * @version 1.1\n */\nexport class GeoLocation {\n  /**\n   * The latitude, for example 40.096 for Lakewood, NJ.\n   * @see #getLatitude()\n   * @see #setLatitude(double)\n   * @see #setLatitude(int, int, double, String)\n   */\n  private latitude!: number;\n\n  /**\n   * The longitude, for example -74.222 for Lakewood, NJ.\n   * @see #getLongitude()\n   * @see #setLongitude(double)\n   * @see #setLongitude(int, int, double, String)\n   */\n  private longitude!: number;\n\n  /**\n   * The location name used for display, for example \"Lakewood, NJ\".\n   * @see #getLocationName()\n   * @see #setLocationName(String)\n   */\n  private locationName: string | null = null;\n\n  /**\n   * The location's time zone.\n   * @see #getTimeZone()\n   * @see #setTimeZone(TimeZone)\n   */\n  private timeZoneId!: string;\n\n  /**\n   * The elevation in Meters <b>above</b> sea level.\n   * @see #getElevation()\n   * @see #setElevation(double)\n   */\n  private elevation!: number;\n\n  /**\n   * Constant for a distance type calculation.\n   * @see #getGeodesicDistance(GeoLocation)\n   */\n  private static readonly DISTANCE: number = 0;\n\n  /**\n   * Constant for an initial bearing type calculation.\n   * @see #getGeodesicInitialBearing(GeoLocation)\n   */\n  private static readonly INITIAL_BEARING: number = 1;\n\n  /**\n   * Constant for a final bearing type calculation.\n   * @see #getGeodesicFinalBearing(GeoLocation)\n   */\n  private static readonly FINAL_BEARING: number = 2;\n\n  /** constant for milliseconds in a minute (60,000) */\n  private static readonly MINUTE_MILLIS: number = 60 * 1000;\n\n  /** constant for milliseconds in an hour (3,600,000) */\n  private static readonly HOUR_MILLIS: number = GeoLocation.MINUTE_MILLIS * 60;\n\n  /**\n   * Method to return the elevation in Meters <b>above</b> sea level.\n   *\n   * @return Returns the elevation in Meters.\n   * @see #setElevation(double)\n   */\n  public getElevation(): number {\n    return this.elevation;\n  }\n\n  /**\n   * Method to set the elevation in Meters <b>above </b> sea level.\n   *\n   * @param elevation\n   *            The elevation to set in Meters. An IllegalArgumentException will be thrown if the value is a negative,\n   *            {@link java.lang.Double#isNaN(double) NaN}  or {@link java.lang.Double#isInfinite(double) infinite}.\n   */\n  public setElevation(elevation: number): void {\n    if (elevation < 0) {\n      throw new IllegalArgumentException('Elevation cannot be negative');\n    }\n    if (Number.isNaN(elevation) || !Number.isFinite(elevation)) {\n      throw new IllegalArgumentException('Elevation cannot be NaN or infinite');\n    }\n    this.elevation = elevation;\n  }\n\n  /**\n   * GeoLocation constructor with parameters for all required fields.\n   *\n   * @param name\n   *            The location name for display, for example \"Lakewood, NJ\".\n   * @param latitude\n   *            the latitude as a <code>double</code>, for example 40.096 for Lakewood, NJ.\n   *            <b>Note:</b> For latitudes south of the equator, a negative value should be used.\n   * @param longitude\n   *            the longitude as a <code>double</code>, for example -74.222 for Lakewood, NJ. <b>Note:</b> For longitudes\n   *            east of the <a href=\"https://en.wikipedia.org/wiki/Prime_Meridian\">Prime Meridian</a> (Greenwich),\n   *            a negative value should be used.\n   * @param timeZone\n   *            the <code>TimeZone</code> for the location.\n   */\n\n  /*\n      public GeoLocation(String name, double latitude, double longitude, TimeZone timeZone) {\n          this(name, latitude, longitude, 0, timeZone);\n      }\n  */\n\n  /**\n   * GeoLocation constructor with parameters for all required fields.\n   *\n   * @param name\n   *            The location name for display, for example \"Lakewood, NJ\".\n   * @param latitude\n   *            the latitude as a <code>double</code>, for example 40.096 for Lakewood, NJ.\n   *            <b>Note:</b> For latitudes south of the equator, a negative value should be used.\n   * @param longitude\n   *            double the longitude as a <code>double</code>, for example -74.222 for Lakewood, NJ.\n   *            <b>Note:</b> For longitudes east of the <a href=\"https://en.wikipedia.org/wiki/Prime_Meridian\">Prime\n   *            Meridian</a> (Greenwich), a negative value should be used.\n   * @param elevation\n   *            the elevation above sea level in Meters.\n   * @param timeZoneId\n   *            the <code>TimeZone</code> for the location.\n   */\n  constructor(name: string | null, latitude: number, longitude: number, elevation: number, timeZoneId?: string)\n  constructor(name: string | null, latitude: number, longitude: number, timeZoneId: string)\n  constructor()\n  constructor(name: string | null = 'Greenwich, England', latitude: number = 51.4772,\n              longitude: number = 0, elevationOrTimeZoneId?: number | string, timeZoneId?: string) {\n    let elevation: number = 0;\n    if (timeZoneId) {\n      elevation = elevationOrTimeZoneId as number;\n    } else {\n      timeZoneId = elevationOrTimeZoneId as string;\n    }\n\n    this.setLocationName(name);\n    this.setLatitude(latitude);\n    this.setLongitude(longitude);\n    this.setElevation(elevation);\n    this.setTimeZone(timeZoneId);\n  }\n\n  /**\n   * Default GeoLocation constructor will set location to the Prime Meridian at Greenwich, England and a TimeZone of\n   * GMT. The longitude will be set to 0 and the latitude will be 51.4772 to match the location of the <a\n   * href=\"https://www.rog.nmm.ac.uk\">Royal Observatory, Greenwich </a>. No daylight savings time will be used.\n   */\n  /*\n      public GeoLocation() {\n          setLocationName(\"Greenwich, England\");\n          setLongitude(0); // added for clarity\n          setLatitude(51.4772);\n          setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n      }\n  */\n\n  /**\n   * Method to set the latitude as a <code>double</code>, for example 40.096 for Lakewood, NJ.\n   *\n   * @param latitude\n   *            The degrees of latitude to set. The values should be between -90&deg; and 90&deg;. For example 40.096\n   *            would be used for Lakewood, NJ. <b>Note:</b> For latitudes south of the equator, a negative value\n   *            should be used. An IllegalArgumentException will be thrown if the value exceeds the limits.\n   */\n\n  /*\n      public setLatitude(latitude: number): void {\n          if (latitude > 90 || latitude < -90 || Number.isNaN(latitude)) {\n              throw new IllegalArgumentException(\"Latitude must be between -90 and  90\");\n          }\n          this.latitude = latitude;\n      }\n  */\n\n  /**\n   * Method to set the latitude in degrees, minutes and seconds. For example, set the degrees to 40, minutes to 5,\n   * seconds to 45.6 and direction to \"N\" for Lakewood, NJ.\n   *\n   * @param degrees\n   *            The degrees of latitude to set between 0&deg; and 90&deg;, for example 40 would be used for Lakewood, NJ.\n   *            An IllegalArgumentException will be thrown if the value exceeds the limit.\n   * @param minutes\n   *            <a href=\"https://en.wikipedia.org/wiki/Minute_of_arc#Cartography\">minutes of arc</a>, for example 5\n   *            would be used for Lakewood, NJ.\n   * @param seconds\n   *            <a href=\"https://en.wikipedia.org/wiki/Minute_of_arc#Cartography\">seconds of arc</a>, for example 45.6\n   *             would be used for Lakewood, NJ.\n   * @param direction\n   *            \"N\" for north and \"S\" for south,  for example \"N\" would be used for Lakewood, NJ. An\n   *            IllegalArgumentException will be thrown if the value is not \"S\" or \"N\".\n   */\n  public setLatitude(degrees: number, minutes: number, seconds: number, direction: 'N' | 'S'): void;\n  public setLatitude(latitude: number): void;\n  public setLatitude(degreesOrLatitude: number, minutes?: number, seconds?: number, direction?: 'N' | 'S'): void {\n    if (minutes === undefined) {\n      const latitude: number = degreesOrLatitude;\n\n      if (latitude > 90 || latitude < -90 || Number.isNaN(latitude)) {\n        throw new IllegalArgumentException('Latitude must be between -90 and  90');\n      }\n\n      this.latitude = latitude;\n    } else {\n      const degrees: number = degreesOrLatitude;\n\n      let tempLat: number = degrees + ((minutes + (seconds! / 60)) / 60);\n      if (tempLat > 90 || tempLat < 0 || Number.isNaN(tempLat)) { // FIXME An exception should be thrown if degrees, minutes or seconds are negative\n        throw new IllegalArgumentException('Latitude must be between 0 and  90. Use direction of S instead of negative.');\n      }\n      if (direction === 'S') {\n        tempLat *= -1;\n      } else if (!(direction === 'N')) {\n        throw new IllegalArgumentException('Latitude direction must be N or S');\n      }\n      this.latitude = tempLat;\n    }\n  }\n\n  /**\n   * @return Returns the latitude as a <code>double</code>, for example 40.096 for Lakewood, NJ.\n   */\n  public getLatitude(): number {\n    return this.latitude;\n  }\n\n  /**\n   * Method to set the longitude as a <code>double</code>, for example -74.222 for Lakewood, NJ\n   *\n   * @param longitude\n   *            The degrees of longitude to set as a <code>double</code> between -180.0&deg; and 180.0&deg;. For example\n   *            -74.222 would be used for Lakewood, NJ. Note: for longitudes east of the <a href=\n   *            \"https://en.wikipedia.org/wiki/Prime_Meridian\">Prime Meridian</a> (Greenwich) a negative value\n   *            should be used.An IllegalArgumentException will be thrown if the value exceeds the limit.\n   */\n\n  /*\n      public setLongitude(longitude: number): void {\n          if (longitude > 180 || longitude < -180 || Number.isNaN(longitude)) {\n              throw new IllegalArgumentException(\"Longitude must be between -180 and  180\");\n          }\n          this.longitude = longitude;\n      }\n  */\n\n  /**\n   * Method to set the longitude in degrees, minutes and seconds. For example, set the degrees to 74, minutes to 13,\n   * seconds to 19.2 and direction to \"W\" for Lakewood, NJ.\n   *\n   * @param degrees\n   *            The degrees of longitude to set between 0&deg; and 180&deg;. For example 74 would be set for Lakewood, NJ.\n   *            An IllegalArgumentException will be thrown if the value exceeds the limits.\n   * @param minutes\n   *            <a href=\"https://en.wikipedia.org/wiki/Minute_of_arc#Cartography\">minutes of arc</a>. For example 13\n   *            would be set for Lakewood, NJ.\n   * @param seconds\n   *            <a href=\"https://en.wikipedia.org/wiki/Minute_of_arc#Cartography\">seconds of arc</a>. For example 19.2\n   *            would be set for Lakewood, NJ.\n   * @param direction\n   *            \"E\" for east of the <a href=\"https://en.wikipedia.org/wiki/Prime_Meridian\">Prime Meridian</a>\n   *            or \"W\"for west of it. For example, \"W\" would be set for Lakewood, NJ.\n   *            An IllegalArgumentException will be thrown if the value is not E or W.\n   */\n  public setLongitude(degrees: number, minutes: number, seconds: number, direction: 'E' | 'W'): void;\n  public setLongitude(longitude: number): void;\n  public setLongitude(degreesOrLongitude: number, minutes?: number, seconds?: number, direction?: 'E' | 'W'): void {\n    if (minutes === undefined) {\n      const longitude: number = degreesOrLongitude;\n\n      if (longitude > 180 || longitude < -180 || Number.isNaN(longitude)) {\n        throw new IllegalArgumentException('Longitude must be between -180 and  180');\n      }\n\n      this.longitude = longitude;\n    } else {\n      const degrees: number = degreesOrLongitude;\n\n      let longTemp: number = degrees + ((minutes + (seconds! / 60)) / 60);\n      if (longTemp > 180 || this.longitude < 0 || Number.isNaN(longTemp)) { // FIXME An exception should be thrown if degrees, minutes or seconds are negative\n        throw new IllegalArgumentException('Longitude must be between 0 and  180.  Use a direction of W instead of negative.');\n      }\n      if (direction === 'W') {\n        longTemp *= -1;\n      } else if (!(direction === 'E')) {\n        throw new IllegalArgumentException('Longitude direction must be E or W');\n      }\n      this.longitude = longTemp;\n    }\n  }\n\n  /**\n   * Method to return the longitude as a <code>double</code>, for example -74.222 for Lakewood, NJ.\n   * @return Returns the longitude.\n   */\n  public getLongitude(): number {\n    return this.longitude;\n  }\n\n  /**\n   * Method to return the location name (for display), for example \"Lakewood, NJ\".\n   * @return Returns the location name.\n   */\n  public getLocationName(): string | null {\n    return this.locationName;\n  }\n\n  /**\n   * Setter for the location name (for display), for example \"Lakewood, NJ\".\n   * @param name\n   *            The setter method for the display name.\n   */\n  public setLocationName(name: string | null): void {\n    this.locationName = name;\n  }\n\n  /**\n   * Method to return the time zone.\n   * @return Returns the timeZone.\n   */\n  public getTimeZone(): string {\n    return this.timeZoneId;\n  }\n\n  /**\n   * Method to set the TimeZone. If this is ever set after the GeoLocation is set in the\n   * {@link AstronomicalCalendar}, it is critical that\n   * {@link AstronomicalCalendar#getCalendar()}.\n   * {@link java.util.Calendar#setTimeZone(TimeZone) setTimeZone(TimeZone)} be called in order for the\n   * AstronomicalCalendar to output times in the expected offset. This situation will arise if the\n   * AstronomicalCalendar is ever {@link AstronomicalCalendar#clone() cloned}.\n   *\n   * @param timeZone\n   *            The timeZone to set.\n   */\n  public setTimeZone(timeZoneId: string): void {\n    this.timeZoneId = timeZoneId;\n  }\n\n  /**\n   * A method that will return the location's local mean time offset in milliseconds from local <a\n   * href=\"https://en.wikipedia.org/wiki/Standard_time\">standard time</a>. The globe is split into 360&deg;, with\n   * 15&deg; per hour of the day. For a local that is at a longitude that is evenly divisible by 15 (longitude % 15 ==\n   * 0), at solar {@link AstronomicalCalendar#getSunTransit() noon} (with adjustment for the <a\n   * href=\"https://en.wikipedia.org/wiki/Equation_of_time\">equation of time</a>) the sun should be directly overhead,\n   * so a user who is 1&deg; west of this will have noon at 4 minutes after standard time noon, and conversely, a user\n   * who is 1&deg; east of the 15&deg; longitude will have noon at 11:56 AM. Lakewood, N.J., whose longitude is\n   * -74.222, is 0.778 away from the closest multiple of 15 at -75&deg;. This is multiplied by 4 to yield 3 minutes\n   * and 10 seconds earlier than standard time. The offset returned does not account for the <a\n   * href=\"https://en.wikipedia.org/wiki/Daylight_saving_time\">Daylight saving time</a> offset since this class is\n   * unaware of dates.\n   *\n   * @return the offset in milliseconds not accounting for Daylight saving time. A positive value will be returned\n   *         East of the 15&deg; timezone line, and a negative value West of it.\n   */\n  public getLocalMeanTimeOffset(): number {\n    return this.getLongitude() * 4 * GeoLocation.MINUTE_MILLIS - TimeZone.getRawOffset(this.getTimeZone());\n  }\n\n  /**\n   * Adjust the date for <a href=\"https://en.wikipedia.org/wiki/180th_meridian\">antimeridian</a> crossover. This is\n   * needed to deal with edge cases such as Samoa that use a different calendar date than expected based on their\n   * geographic location.\n   *\n   * The actual Time Zone offset may deviate from the expected offset based on the longitude. Since the 'absolute time'\n   * calculations are always based on longitudinal offset from UTC for a given date, the date is presumed to only\n   * increase East of the Prime Meridian, and to only decrease West of it. For Time Zones that cross the antimeridian,\n   * the date will be artificially adjusted before calculation to conform with this presumption.\n   *\n   * For example, Apia, Samoa with a longitude of -171.75 uses a local offset of +14:00.  When calculating sunrise for\n   * 2018-02-03, the calculator should operate using 2018-02-02 since the expected zone is -11.  After determining the\n   * UTC time, the local DST offset of <a href=\"https://en.wikipedia.org/wiki/UTC%2B14:00\">UTC+14:00</a> should be applied\n   * to bring the date back to 2018-02-03.\n   *\n   * @return the number of days to adjust the date This will typically be 0 unless the date crosses the antimeridian\n   */\n  public getAntimeridianAdjustment(): -1 | 1 | 0 {\n    const localHoursOffset: number = this.getLocalMeanTimeOffset() / GeoLocation.HOUR_MILLIS;\n\n    // if the offset is 20 hours or more in the future (never expected anywhere other\n    // than a location using a timezone across the antimeridian to the east such as Samoa)\n    if (localHoursOffset >= 20) {\n      // roll the date forward a day\n      return 1;\n    } else if (localHoursOffset <= -20) {\n      // if the offset is 20 hours or more in the past (no current location is known\n      // that crosses the antimeridian to the west, but better safe than sorry)\n      // roll the date back a day\n      return -1;\n    }\n    // 99.999% of the world will have no adjustment\n    return 0;\n  }\n\n  /**\n   * Calculate the initial <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> bearing between this\n   * Object and a second Object passed to this method using <a\n   * href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty, \"<a\n   * href=\"https://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the Ellipsoid\n   * with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975\n   *\n   * @param location\n   *            the destination location\n   * @return the initial bearing\n   */\n  public getGeodesicInitialBearing(location: GeoLocation): number {\n    return this.vincentyInverseFormula(location, GeoLocation.INITIAL_BEARING);\n  }\n\n  /**\n   * Calculate the final <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> bearing between this Object\n   * and a second Object passed to this method using <a href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus\n   * Vincenty's</a> inverse formula See T Vincenty, \"<a href=\"https://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and\n   * Inverse Solutions of Geodesics on the Ellipsoid with application of nested equations</a>\", Survey Review, vol\n   * XXII no 176, 1975\n   *\n   * @param location\n   *            the destination location\n   * @return the final bearing\n   */\n  public getGeodesicFinalBearing(location: GeoLocation): number {\n    return this.vincentyInverseFormula(location, GeoLocation.FINAL_BEARING);\n  }\n\n  /**\n   * Calculate <a href=\"https://en.wikipedia.org/wiki/Great-circle_distance\">geodesic distance</a> in Meters between\n   * this Object and a second Object passed to this method using <a\n   * href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty, \"<a\n   * href=\"https://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the Ellipsoid\n   * with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975\n   *\n   * @see #vincentyInverseFormula(GeoLocation, int)\n   * @param location\n   *            the destination location\n   * @return the geodesic distance in Meters\n   */\n  public getGeodesicDistance(location: GeoLocation): number {\n    return this.vincentyInverseFormula(location, GeoLocation.DISTANCE);\n  }\n\n  /**\n   * Calculate <a href=\"https://en.wikipedia.org/wiki/Great-circle_distance\">geodesic distance</a> in Meters between\n   * this Object and a second Object passed to this method using <a\n   * href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty, \"<a\n   * href=\"https://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the Ellipsoid\n   * with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975\n   *\n   * @param location\n   *            the destination location\n   * @param formula\n   *            This formula calculates initial bearing ({@link #INITIAL_BEARING}), final bearing (\n   *            {@link #FINAL_BEARING}) and distance ({@link #DISTANCE}).\n   * @return geodesic distance in Meters\n   */\n  private vincentyInverseFormula(location: GeoLocation, formula: number): number {\n    const majorSemiAxis: number = 6378137;\n    const minorSemiAxis: number = 6356752.3142;\n    const f: number = 1 / 298.257223563; // WGS-84 ellipsoid\n    const L: number = MathUtils.degreesToRadians(location.getLongitude() - this.getLongitude());\n    const U1: number = Math.atan((1 - f) * Math.tan(MathUtils.degreesToRadians(this.getLatitude())));\n    const U2: number = Math.atan((1 - f) * Math.tan(MathUtils.degreesToRadians(location.getLatitude())));\n    const sinU1: number = Math.sin(U1);\n    const cosU1: number = Math.cos(U1);\n    const sinU2: number = Math.sin(U2);\n    const cosU2: number = Math.cos(U2);\n\n    let lambda: number = L;\n    let lambdaP: number = 2 * Math.PI;\n    let iterLimit: number = 20;\n    let sinLambda: number = 0;\n    let cosLambda: number = 0;\n    let sinSigma: number = 0;\n    let cosSigma: number = 0;\n    let sigma: number = 0;\n    let sinAlpha: number = 0;\n    let cosSqAlpha: number = 0;\n    let cos2SigmaM: number = 0;\n    let C: number;\n\n    while (Math.abs(lambda - lambdaP) > 1e-12 && --iterLimit > 0) {\n      sinLambda = Math.sin(lambda);\n      cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)\n        + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));\n      if (sinSigma === 0) return 0; // co-incident points\n      cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      sinAlpha = (cosU1 * cosU2 * sinLambda) / sinSigma;\n      cosSqAlpha = 1 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;\n      if (Number.isNaN(cos2SigmaM)) cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (§6)\n      C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));\n      lambdaP = lambda;\n      lambda = L + (1 - C) * f * sinAlpha\n        * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n    }\n    if (iterLimit === 0) return Number.NaN; // formula failed to converge\n\n    const uSq: number = cosSqAlpha * (majorSemiAxis * majorSemiAxis - minorSemiAxis * minorSemiAxis) / (minorSemiAxis * minorSemiAxis);\n    const A: number = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n    const B: number = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n    const deltaSigma: number = B * sinSigma\n      * (cos2SigmaM + B / 4\n        * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM\n          * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n    const distance: number = minorSemiAxis * A * (sigma - deltaSigma);\n\n    // initial bearing\n    const fwdAz: number = MathUtils.radiansToDegrees(Math.atan2(cosU2 * sinLambda, cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));\n    // final bearing\n    const revAz: number = MathUtils.radiansToDegrees(Math.atan2(cosU1 * sinLambda, -sinU1 * cosU2 + cosU1 * sinU2 * cosLambda));\n    if (formula === GeoLocation.DISTANCE) {\n      return distance;\n    } else if (formula === GeoLocation.INITIAL_BEARING) {\n      return fwdAz;\n    } else if (formula === GeoLocation.FINAL_BEARING) {\n      return revAz;\n    }\n    // should never happen\n    return Number.NaN;\n  }\n\n  /**\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Rhumb_line\">rhumb line</a> bearing from the current location to\n   * the GeoLocation passed in.\n   *\n   * @param location\n   *            destination location\n   * @return the bearing in degrees\n   */\n  public getRhumbLineBearing(location: GeoLocation): number {\n    let dLon: number = MathUtils.degreesToRadians(location.getLongitude() - this.getLongitude());\n    const dPhi: number = Math.log(Math.tan(MathUtils.degreesToRadians(location.getLatitude()) / 2 + Math.PI / 4)\n      / Math.tan(MathUtils.degreesToRadians(this.getLatitude()) / 2 + Math.PI / 4));\n    if (Math.abs(dLon) > Math.PI) dLon = dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);\n    return MathUtils.radiansToDegrees(Math.atan2(dLon, dPhi));\n  }\n\n  /**\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Rhumb_line\">rhumb line</a> distance from the current location\n   * to the GeoLocation passed in.\n   *\n   * @param location\n   *            the destination location\n   * @return the distance in Meters\n   */\n  public getRhumbLineDistance(location: GeoLocation): number {\n    const earthRadius: number = 6378137; // earth's mean radius in km\n    const dLat: number = MathUtils.degreesToRadians(location.getLatitude()) - MathUtils.degreesToRadians(this.getLatitude());\n    let dLon: number = Math.abs(MathUtils.degreesToRadians(location.getLongitude()) - MathUtils.degreesToRadians(this.getLongitude()));\n    const dPhi: number = Math.log(Math.tan(MathUtils.degreesToRadians(location.getLatitude()) / 2 + Math.PI / 4)\n      / Math.tan(MathUtils.degreesToRadians(this.getLatitude()) / 2 + Math.PI / 4));\n\n    let q: number = dLat / dPhi;\n    if (!Number.isFinite(q)) {\n      q = Math.cos(MathUtils.degreesToRadians(this.getLatitude()));\n    }\n\n    // if dLon over 180° take shorter rhumb across 180° meridian:\n    if (dLon > Math.PI) {\n      dLon = 2 * Math.PI - dLon;\n    }\n    const d: number = Math.sqrt(dLat * dLat + q * q * dLon * dLon);\n    return d * earthRadius;\n  }\n\n  /**\n   * A method that returns an XML formatted <code>String</code> representing the serialized <code>Object</code>. Very\n   * similar to the toString method but the return value is in an xml format. The format currently used (subject to\n   * change) is:\n   *\n   * <pre>\n   *   &lt;GeoLocation&gt;\n   *        &lt;LocationName&gt;Lakewood, NJ&lt;/LocationName&gt;\n   *        &lt;Latitude&gt;40.096&amp;deg&lt;/Latitude&gt;\n   *        &lt;Longitude&gt;-74.222&amp;deg&lt;/Longitude&gt;\n   *        &lt;Elevation&gt;0 Meters&lt;/Elevation&gt;\n   *        &lt;TimezoneName&gt;America/New_York&lt;/TimezoneName&gt;\n   *        &lt;TimeZoneDisplayName&gt;Eastern Standard Time&lt;/TimeZoneDisplayName&gt;\n   *        &lt;TimezoneGMTOffset&gt;-5&lt;/TimezoneGMTOffset&gt;\n   *        &lt;TimezoneDSTOffset&gt;1&lt;/TimezoneDSTOffset&gt;\n   *   &lt;/GeoLocation&gt;\n   * </pre>\n   *\n   * @return The XML formatted <code>String</code>.\n   * @deprecated\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public toXML(): void {\n    throw new UnsupportedError('This method is deprecated');\n  }\n\n  /**\n   * @see java.lang.Object#equals(Object)\n   */\n  public equals(object: object): boolean {\n    if (this === object) return true;\n    if (!(object instanceof GeoLocation)) return false;\n\n    const geo: GeoLocation = object as GeoLocation;\n    return this.latitude === geo.latitude\n      && this.longitude === geo.longitude\n      && this.elevation === geo.elevation\n      && this.locationName === geo.locationName\n      && this.timeZoneId === geo.getTimeZone();\n  }\n\n  /**\n   * @see java.lang.Object#toString()\n   */\n  public toString(): string {\n    return (`Location Name:\\t\\t\\t${this.getLocationName()}`)\n      .concat(`\\nLatitude:\\t\\t\\t${this.getLatitude().toString()}\\u00B0`)\n      .concat(`\\nLongitude:\\t\\t\\t${this.getLongitude().toString()}\\u00B0`)\n      .concat(`\\nElevation:\\t\\t\\t${this.getElevation().toString()} Meters`)\n      .concat(`\\nTimezone ID:\\t\\t\\t${this.getTimeZone()}`)\n      .concat(`\\nTimezone Display Name:\\t\\t${TimeZone.getDisplayName(this.getTimeZone())}`)\n      .concat(` (${TimeZone.getDisplayName(this.getTimeZone(), DateTime.local(), true)})`)\n      .concat(`\\nTimezone GMT Offset:\\t\\t${(TimeZone.getRawOffset(this.getTimeZone()) / GeoLocation.HOUR_MILLIS).toString()}`)\n      .concat(`\\nTimezone DST Offset:\\t\\t${(TimeZone.getDSTSavings(this.getTimeZone()) / GeoLocation.HOUR_MILLIS).toString()}`);\n  }\n\n  /**\n   * An implementation of the {@link java.lang.Object#clone()} method that creates a <a\n   * href=\"https://en.wikipedia.org/wiki/Object_copy#Deep_copy\">deep copy</a> of the object.\n   * <b>Note:</b> If the {@link java.util.TimeZone} in the clone will be changed from the original, it is critical\n   * that {@link AstronomicalCalendar#getCalendar()}.\n   * {@link java.util.Calendar#setTimeZone(TimeZone) setTimeZone(TimeZone)} is called after cloning in order for the\n   * AstronomicalCalendar to output times in the expected offset.\n   *\n   * @see java.lang.Object#clone()\n   * @since 1.1\n   */\n  public clone(): GeoLocation {\n    return JSON.parse(JSON.stringify(this));\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { GeoLocation } from './GeoLocation';\nimport { MathUtils } from '../polyfills/Utils';\nimport { UnsupportedError } from '../polyfills/errors';\n\n/**\n * An abstract class that all sun time calculating classes extend. This allows the algorithm used to be changed at\n * runtime, easily allowing comparison the results of using different algorithms.\n * TODO: Consider methods that would allow atmospheric modeling. This can currently be adjusted by {@link\n * #setRefraction(double) setting the refraction}.\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2020\n */\nexport abstract class AstronomicalCalculator {\n  /**\n   * The commonly used average solar refraction. <a href=\"https://www.cs.tau.ac.il//~nachum/calendar-book/index.shtml\"\n   *   * >Calendrical Calculations</a> lists a more accurate global average of 34.478885263888294\n   *\n   * @see #getRefraction()\n   */\n  private refraction: number = 34 / 60;\n\n  /**\n   * The commonly used average solar radius in minutes of a degree.\n   *\n   * @see #getSolarRadius()\n   */\n  private solarRadius: number = 16 / 60;\n\n  /**\n   * The commonly used average earth radius in KM. At this time, this only affects elevation adjustment and not the\n   * sunrise and sunset calculations. The value currently defaults to 6356.9 KM.\n   *\n   * @see #getEarthRadius()\n   * @see #setEarthRadius(double)\n   */\n  private earthRadius: number = 6356.9; // in KM\n\n  /**\n   * Default constructor using the default {@link #refraction refraction}, {@link #solarRadius solar radius} and\n   * {@link #earthRadius earth radius}.\n   */\n  public AstronomicalCalculator() {\n    // keep the defaults for now.\n  }\n\n  /**\n   * A method that returns the earth radius in KM. The value currently defaults to 6356.9 KM if not set.\n   *\n   * @return the earthRadius the earth radius in KM.\n   */\n  public getEarthRadius(): number {\n    return this.earthRadius;\n  }\n\n  /**\n   * A method that allows setting the earth's radius.\n   *\n   * @param earthRadius\n   *            the earthRadius to set in KM\n   */\n  public setEarthRadius(earthRadius: number): void {\n    this.earthRadius = earthRadius;\n  }\n\n  /**\n   * The zenith of astronomical sunrise and sunset. The sun is 90&deg; from the vertical 0&deg;\n   */\n  private static readonly GEOMETRIC_ZENITH: number = 90;\n\n  /**\n   * Returns the default class for calculating sunrise and sunset. This is currently the more accurate\n   * {@link NOAACalculator}, but this may change in the future.\n   *\n   * @return AstronomicalCalculator the default class for calculating sunrise and sunset. In the current\n   *         implementation the default calculator returned is the more accurate {@link NOAACalculator}.\n   * @deprecated This depends on a circular dependency. Use <pre>new NOAACalculator()</pre> instead\n   */\n  public static getDefault(): void {\n    throw new UnsupportedError('This method is deprecated, due to the fact that it depends on a circular dependency. '\n      + 'Use `new NOAACalculator()` instead.');\n  }\n\n  /**\n   * Returns the name of the algorithm.\n   *\n   * @return the descriptive name of the algorithm.\n   */\n  public abstract getCalculatorName(): string;\n\n  /**\n   * A method that calculates UTC sunrise as well as any time based on an angle above or below sunrise. This abstract\n   * method is implemented by the classes that extend this class.\n   *\n   * @param calendar\n   *            Used to calculate day of year.\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times.\n   * @param zenith\n   *            the azimuth below the vertical zenith of 90 degrees. for sunrise typically the {@link #adjustZenith\n   *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link #adjustZenith adjusts}\n   *            this slightly to account for solar refraction and the sun's radius. Another example would be\n   *            {@link AstronomicalCalendar#getBeginNauticalTwilight()} that passes\n   *            {@link AstronomicalCalendar#NAUTICAL_ZENITH} to this method.\n   * @param adjustForElevation\n   *            Should the time be adjusted for elevation\n   * @return The UTC time of sunrise in 24-hour format. 5:45:00 AM will return 5.75.0. If an error was encountered in\n   *         the calculation (expected behavior for some locations such as near the poles,\n   *         {@link java.lang.Double#NaN} will be returned.\n   * @see #getElevationAdjustment(double)\n   */\n  public abstract getUTCSunrise(date: DateTime, geoLocation: GeoLocation, zenith: number,\n      adjustForElevation: boolean): number; // eslint-disable-line @typescript-eslint/indent\n\n  /**\n   * A method that calculates UTC sunset as well as any time based on an angle above or below sunset. This abstract\n   * method is implemented by the classes that extend this class.\n   *\n   * @param calendar\n   *            Used to calculate day of year.\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times.\n   * @param zenith\n   *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link #adjustZenith\n   *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link #adjustZenith adjusts}\n   *            this slightly to account for solar refraction and the sun's radius. Another example would be\n   *            {@link AstronomicalCalendar#getEndNauticalTwilight()} that passes\n   *            {@link AstronomicalCalendar#NAUTICAL_ZENITH} to this method.\n   * @param adjustForElevation\n   *            Should the time be adjusted for elevation\n   * @return The UTC time of sunset in 24-hour format. 5:45:00 AM will return 5.75.0. If an error was encountered in\n   *         the calculation (expected behavior for some locations such as near the poles,\n   *         {@link java.lang.Double#NaN} will be returned.\n   * @see #getElevationAdjustment(double)\n   */\n  public abstract getUTCSunset(date: DateTime, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number;\n\n  /**\n   * Return <a href=\"https://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> (UTC) for the given day at the\n   * given location on earth. The {@link com.kosherjava.zmanim.util.NOAACalculator} implementation calculates\n   * true solar noon, while the {@link com.kosherjava.zmanim.util.SunTimesCalculator} approximates it, calculating\n   * the time as halfway between sunrise and sunset.\n   *\n   * @param date\n   *            Used to calculate day of year.\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times.\n   *\n   * @return the time in minutes from zero UTC\n   */\n  public abstract getUTCNoon(date: DateTime, geoLocation: GeoLocation): number;\n\n  /**\n   * Return <a href=\"https://en.wikipedia.org/wiki/Midnight\">solar midnight</a> (UTC) for the given day at the\n   * given location on earth. The the {@link com.kosherjava.zmanim.util.NOAACalculator} implementation calculates\n   * true solar midnight, while the {@link com.kosherjava.zmanim.util.SunTimesCalculator} approximates it, calculating\n   * the time as 12 hours after halfway between sunrise and sunset.\n   *\n   * @param calendar\n   *            Used to calculate day of year.\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times.\n   *\n   * @return the time in minutes from zero UTC\n   */\n  public abstract getUTCMidnight(date: DateTime, geoLocation: GeoLocation): number;\n\n  /**\n   * Method to return the adjustment to the zenith required to account for the elevation. Since a person at a higher\n   * elevation can see farther below the horizon, the calculation for sunrise / sunset is calculated below the horizon\n   * used at sea level. This is only used for sunrise and sunset and not times before or after it such as\n   * {@link AstronomicalCalendar#getBeginNauticalTwilight() nautical twilight} since those\n   * calculations are based on the level of available light at the given dip below the horizon, something that is not\n   * affected by elevation, the adjustment should only be made if the zenith == 90&deg; {@link #adjustZenith adjusted}\n   * for refraction and solar radius. The algorithm used is\n   *\n   * <pre>\n   * elevationAdjustment = Math.toDegrees(Math.acos(earthRadiusInMeters / (earthRadiusInMeters + elevationMeters)));\n   * </pre>\n   *\n   * The source of this algorithm is <a href=\"https://www.cs.tau.ac.il/~nachum/calendar-book/index.shtml\">Calendrical\n   * Calculations</a> by Edward M. Reingold and Nachum Dershowitz. An alternate algorithm that produces similar (but\n   * not completely accurate) result found in Ma'aglay Tzedek by Moishe Kosower and other sources is:\n   *\n   * <pre>\n   * elevationAdjustment = 0.0347 * Math.sqrt(elevationMeters);\n   * </pre>\n   *\n   * @param elevation\n   *            elevation in Meters.\n   * @return the adjusted zenith\n   */\n  public getElevationAdjustment(elevation: number): number {\n    const elevationAdjustment: number = MathUtils.radiansToDegrees(Math.acos(this.earthRadius / (this.earthRadius + (elevation / 1000))));\n    return elevationAdjustment;\n  }\n\n  /**\n   * Adjusts the zenith of astronomical sunrise and sunset to account for solar refraction, solar radius and\n   * elevation. The value for Sun's zenith and true rise/set Zenith (used in this class and subclasses) is the angle\n   * that the center of the Sun makes to a line perpendicular to the Earth's surface. If the Sun were a point and the\n   * Earth were without an atmosphere, true sunset and sunrise would correspond to a 90&deg; zenith. Because the Sun\n   * is not a point, and because the atmosphere refracts light, this 90&deg; zenith does not, in fact, correspond to\n   * true sunset or sunrise, instead the centre of the Sun's disk must lie just below the horizon for the upper edge\n   * to be obscured. This means that a zenith of just above 90&deg; must be used. The Sun subtends an angle of 16\n   * minutes of arc (this can be changed via the {@link #setSolarRadius(double)} method , and atmospheric refraction\n   * accounts for 34 minutes or so (this can be changed via the {@link #setRefraction(double)} method), giving a total\n   * of 50 arcminutes. The total value for ZENITH is 90+(5/6) or 90.8333333&deg; for true sunrise/sunset. Since a\n   * person at an elevation can see below the horizon of a person at sea level, this will also adjust the zenith to\n   * account for elevation if available. Note that this will only adjust the value if the zenith is exactly 90 degrees.\n   * For values below and above this no correction is done. As an example, astronomical twilight is when the sun is\n   * 18&deg; below the horizon or {@link AstronomicalCalendar#ASTRONOMICAL_ZENITH 108&deg;\n   * below the zenith}. This is traditionally calculated with none of the above mentioned adjustments. The same goes\n   * for various <em>tzais</em> and <em>alos</em> times such as the\n   * {@link ZmanimCalendar#ZENITH_16_POINT_1 16.1&deg;} dip used in\n   * {@link ComplexZmanimCalendar#getAlos16Point1Degrees()}.\n   *\n   * @param zenith\n   *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link #adjustZenith\n   *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link #adjustZenith adjusts}\n   *            this slightly to account for solar refraction and the sun's radius. Another example would be\n   *            {@link AstronomicalCalendar#getEndNauticalTwilight()} that passes\n   *            {@link AstronomicalCalendar#NAUTICAL_ZENITH} to this method.\n   * @param elevation\n   *            elevation in Meters.\n   * @return The zenith adjusted to include the {@link #getSolarRadius sun's radius}, {@link #getRefraction\n   *         refraction} and {@link #getElevationAdjustment elevation} adjustment. This will only be adjusted for\n   *         sunrise and sunset (if the zenith == 90&deg;)\n   * @see #getElevationAdjustment(double)\n   */\n  public adjustZenith(zenith: number, elevation: number) {\n    let adjustedZenith: number = zenith;\n    if (zenith === AstronomicalCalculator.GEOMETRIC_ZENITH) { // only adjust if it is exactly sunrise or sunset\n      adjustedZenith = zenith + (this.getSolarRadius() + this.getRefraction() + this.getElevationAdjustment(elevation));\n    }\n    return adjustedZenith;\n  }\n\n  /**\n   * Method to get the refraction value to be used when calculating sunrise and sunset. The default value is 34\n   * arcminutes. The <a href=\"https://www.cs.tau.ac.il/~nachum/calendar-book/second-edition/errata.pdf\">Errata and Notes\n   * for Calendrical Calculations: The Millennium Edition</a> by Edward M. Reingold and Nachum Dershowitz lists the\n   * actual average refraction value as 34.478885263888294 or approximately 34' 29\". The refraction value as well\n   * as the solarRadius and elevation adjustment are added to the zenith used to calculate sunrise and sunset.\n   *\n   * @return The refraction in arcminutes.\n   */\n  public getRefraction(): number {\n    return this.refraction;\n  }\n\n  /**\n   * A method to allow overriding the default refraction of the calculator.\n   * @todo At some point in the future, an AtmosphericModel or Refraction object that models the atmosphere of different\n   * locations might be used for increased accuracy.\n   *\n   * @param refraction\n   *            The refraction in arcminutes.\n   * @see #getRefraction()\n   */\n  public setRefraction(refraction: number): void {\n    this.refraction = refraction;\n  }\n\n  /**\n   * Method to get the sun's radius. The default value is 16 arcminutes. The sun's radius as it appears from earth is\n   * almost universally given as 16 arcminutes but in fact it differs by the time of the year. At the <a\n   * href=\"https://en.wikipedia.org/wiki/Perihelion\">perihelion</a> it has an apparent radius of 16.293, while at the\n   * <a href=\"https://en.wikipedia.org/wiki/Aphelion\">aphelion</a> it has an apparent radius of 15.755. There is little\n   * affect for most location, but at high and low latitudes the difference becomes more apparent. My Calculations for\n   * the difference at the location of the <a href=\"https://www.rmg.co.uk/royal-observatory\">Royal Observatory, Greenwich</a>\n   * shows only a 4.494-second difference between the perihelion and aphelion radii, but moving into the arctic circle the\n   * difference becomes more noticeable. Tests for Tromso, Norway (latitude 69.672312, longitude 19.049787) show that\n   * on May 17, the rise of the midnight sun, a 2 minute 23 second difference is observed between the perihelion and\n   * aphelion radii using the USNO algorithm, but only 1 minute and 6 seconds difference using the NOAA algorithm.\n   * Areas farther north show an even greater difference. Note that these test are not real valid test cases because\n   * they show the extreme difference on days that are not the perihelion or aphelion, but are shown for illustrative\n   * purposes only.\n   *\n   * @return The sun's radius in arcminutes.\n   */\n  public getSolarRadius(): number {\n    return this.solarRadius;\n  }\n\n  /**\n   * Method to set the sun's radius.\n   *\n   * @param solarRadius\n   *            The sun's radius in arcminutes.\n   * @see #getSolarRadius()\n   */\n  public setSolarRadius(solarRadius: number): void {\n    this.solarRadius = solarRadius;\n  }\n\n  /**\n   * @see java.lang.Object#clone()\n   * @since 1.1\n   */\n  public clone(): AstronomicalCalculator {\n    return JSON.parse(JSON.stringify(this));\n  }\n\n  public equals(object: object): boolean {\n    return this === object;\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { GeoLocation } from './GeoLocation';\nimport { AstronomicalCalculator } from './AstronomicalCalculator';\nimport { MathUtils, ValueOf } from '../polyfills/Utils';\n\n/**\n * Implementation of sunrise and sunset methods to calculate astronomical times based on the <a\n * href=\"https://noaa.gov\">NOAA</a> algorithm. This calculator uses the Java algorithm based on the implementation by <a\n * href=\"https://noaa.gov\">NOAA - National Oceanic and Atmospheric Administration</a>'s <a href =\n * \"https://www.srrb.noaa.gov/highlights/sunrise/sunrise.html\">Surface Radiation Research Branch</a>. NOAA's <a\n * href=\"https://www.srrb.noaa.gov/highlights/sunrise/solareqns.PDF\">implementation</a> is based on equations from <a\n * href=\"https://www.willbell.com/math/mc1.htm\">Astronomical Algorithms</a> by <a\n * href=\"https://en.wikipedia.org/wiki/Jean_Meeus\">Jean Meeus</a>. Added to the algorithm is an adjustment of the zenith\n * to account for elevation. The algorithm can be found in the <a\n * href=\"https://en.wikipedia.org/wiki/Sunrise_equation\">Wikipedia Sunrise Equation</a> article.\n *\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\n */\nexport class NOAACalculator extends AstronomicalCalculator {\n  /**\n   * The <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian day</a> of January 1, 2000, known as\n   * <a href=\"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   */\n  private static readonly JULIAN_DAY_JAN_1_2000: number = 2451545;\n\n  /**\n   * Julian days per century\n   */\n  private static readonly JULIAN_DAYS_PER_CENTURY: number = 36525;\n\n  /**\n   * An <code>enum</code> to indicate what type of solar event ({@link #SUNRISE SUNRISE}, {@link #SUNSET SUNSET},\n   * {@link #NOON NOON} or {@link #MIDNIGHT MIDNIGHT}) is being calculated.\n   */\n  protected static readonly SolarEvent = {\n    /** SUNRISE A solar event related to sunrise */\n    SUNRISE: 0,\n    /** SUNSET A solar event related to sunset */\n    SUNSET: 1,\n    /** NOON A solar event related to noon */\n    NOON: 2,\n    /** MIDNIGHT A solar event related to midnight */\n    MIDNIGHT: 3,\n  } as const;\n\n  /**\n   * Default constructor of the NOAACalculator.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor() {\n    super();\n  }\n\n  /**\n   * @see AstronomicalCalculator#getCalculatorName()\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public getCalculatorName(): string {\n    return 'US National Oceanic and Atmospheric Administration Algorithm'; // Implementation of the Jean Meeus algorithm\n  }\n\n  /**\n   * @see AstronomicalCalculator#getUTCSunrise(Calendar, GeoLocation, double, boolean)\n   */\n  public getUTCSunrise(date: DateTime, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number {\n    const elevation: number = adjustForElevation ? geoLocation.getElevation() : 0;\n    const adjustedZenith: number = this.adjustZenith(zenith, elevation);\n\n    let sunrise: number = NOAACalculator.getSunRiseSetUTC(date, geoLocation.getLatitude(), -geoLocation.getLongitude(),\n      adjustedZenith, NOAACalculator.SolarEvent.SUNRISE);\n    sunrise = sunrise / 60;\n\n    return sunrise > 0 ? sunrise % 24 : (sunrise % 24) + 24; // ensure that the time is >= 0 and < 24\n  }\n\n  /**\n   * @see AstronomicalCalculator#getUTCSunset(Calendar, GeoLocation, double, boolean)\n   */\n  public getUTCSunset(date: DateTime, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number {\n    const elevation: number = adjustForElevation ? geoLocation.getElevation() : 0;\n    const adjustedZenith: number = this.adjustZenith(zenith, elevation);\n\n    let sunset: number = NOAACalculator.getSunRiseSetUTC(date, geoLocation.getLatitude(), -geoLocation.getLongitude(),\n      adjustedZenith, NOAACalculator.SolarEvent.SUNSET);\n    sunset = sunset / 60;\n\n    return sunset > 0 ? sunset % 24 : (sunset % 24) + 24; // ensure that the time is >= 0 and < 24\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian day</a> from a Java Calendar.\n   *\n   * @param calendar\n   *            The Java Calendar\n   * @return the Julian day corresponding to the date Note: Number is returned for start of day. Fractional days\n   *         should be added later.\n   */\n  private static getJulianDay(date: DateTime): number {\n    let { year, month } = date;\n    const { day } = date;\n    if (month <= 2) {\n      year -= 1;\n      month += 12;\n    }\n    const a: number = Math.trunc(year / 100);\n    const b: number = Math.trunc(2 - a + a / 4);\n\n    return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n  }\n\n  /**\n   * Convert <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian day</a> to centuries since <a href=\n   * \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   *\n   * @param julianDay\n   *            the Julian Day to convert\n   * @return the centuries since 2000 Julian corresponding to the Julian Day\n   */\n  private static getJulianCenturiesFromJulianDay(julianDay: number): number {\n    return (julianDay - NOAACalculator.JULIAN_DAY_JAN_1_2000) / NOAACalculator.JULIAN_DAYS_PER_CENTURY;\n  }\n\n  /**\n   * Returns the Geometric <a href=\"https://en.wikipedia.org/wiki/Mean_longitude\">Mean Longitude</a> of the Sun.\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return the Geometric Mean Longitude of the Sun in degrees\n   */\n  private static getSunGeometricMeanLongitude(julianCenturies: number): number {\n    const longitude: number = 280.46646 + julianCenturies * (36000.76983 + 0.0003032 * julianCenturies);\n    return longitude > 0 ? longitude % 360 : (longitude % 360) + 360; // ensure that the longitude is >= 0 and < 360\n  }\n\n  /**\n   * Returns the Geometric <a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">Mean Anomaly</a> of the Sun.\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return the Geometric Mean Anomaly of the Sun in degrees\n   */\n  private static getSunGeometricMeanAnomaly(julianCenturies: number): number {\n    return 357.52911 + julianCenturies * (35999.05029 - 0.0001537 * julianCenturies);\n  }\n\n  /**\n   * Return the unitless <a href=\"https://en.wikipedia.org/wiki/Eccentricity_%28orbit%29\">eccentricity of earth's orbit</a>.\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return the unitless eccentricity\n   */\n  private static getEarthOrbitEccentricity(julianCenturies: number): number {\n    return 0.016708634 - julianCenturies * (0.000042037 + 0.0000001267 * julianCenturies);\n  }\n\n  /**\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Equation_of_the_center\">equation of center</a> for the sun in degrees.\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return the equation of center for the sun in degrees\n   */\n  private static getSunEquationOfCenter(julianCenturies: number): number {\n    const m: number = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\n\n    const mrad: number = MathUtils.degreesToRadians(m);\n    const sinm: number = Math.sin(mrad);\n    const sin2m: number = Math.sin(mrad + mrad);\n    const sin3m: number = Math.sin(mrad + mrad + mrad);\n\n    return sinm * (1.914602 - julianCenturies * (0.004817 + 0.000014 * julianCenturies)) + sin2m\n      * (0.019993 - 0.000101 * julianCenturies) + sin3m * 0.000289;\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/True_longitude\">true longitude</a> of the sun.\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return the sun's true longitude in degrees\n   */\n  private static getSunTrueLongitude(julianCenturies: number): number {\n    const sunLongitude: number = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\n    const center: number = NOAACalculator.getSunEquationOfCenter(julianCenturies);\n\n    return sunLongitude + center;\n  }\n\n  // /**\n  // * Returns the <a href=\"https://en.wikipedia.org/wiki/True_anomaly\">true anamoly</a> of the sun.\n  // *\n  // * @param julianCenturies\n  // * the number of Julian centuries since J2000.0\n  // * @return the sun's true anamoly in degrees\n  // */\n  // private static double getSunTrueAnomaly(double julianCenturies) {\n  // double meanAnomaly = getSunGeometricMeanAnomaly(julianCenturies);\n  // double equationOfCenter = getSunEquationOfCenter(julianCenturies);\n  //\n  // return meanAnomaly + equationOfCenter;\n  // }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Apparent_longitude\">apparent longitude</a> of the sun.\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return sun's apparent longitude in degrees\n   */\n  private static getSunApparentLongitude(julianCenturies: number): number {\n    const sunTrueLongitude: number = NOAACalculator.getSunTrueLongitude(julianCenturies);\n\n    const omega: number = 125.04 - 1934.136 * julianCenturies;\n    const lambda = sunTrueLongitude - 0.00569 - 0.00478 * Math.sin(MathUtils.degreesToRadians(omega));\n    return lambda;\n  }\n\n  /**\n   * Returns the mean <a href=\"https://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial tilt).\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return the mean obliquity in degrees\n   */\n  private static getMeanObliquityOfEcliptic(julianCenturies: number): number {\n    const seconds: number = 21.448 - julianCenturies\n      * (46.8150 + julianCenturies * (0.00059 - julianCenturies * (0.001813)));\n    return 23 + (26 + (seconds / 60)) / 60;\n  }\n\n  /**\n   * Returns the corrected <a href=\"https://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial\n   * tilt).\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return the corrected obliquity in degrees\n   */\n  private static getObliquityCorrection(julianCenturies: number): number {\n    const obliquityOfEcliptic: number = NOAACalculator.getMeanObliquityOfEcliptic(julianCenturies);\n\n    const omega: number = 125.04 - 1934.136 * julianCenturies;\n    return obliquityOfEcliptic + 0.00256 * Math.cos(MathUtils.degreesToRadians(omega));\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Declination\">declination</a> of the sun.\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return\n   *            the sun's declination in degrees\n   */\n  private static getSunDeclination(julianCenturies: number): number {\n    const obliquityCorrection: number = NOAACalculator.getObliquityCorrection(julianCenturies);\n    const lambda: number = NOAACalculator.getSunApparentLongitude(julianCenturies);\n\n    const sint: number = Math.sin(MathUtils.degreesToRadians(obliquityCorrection)) * Math.sin(MathUtils.degreesToRadians(lambda));\n    const theta = MathUtils.radiansToDegrees(Math.asin(sint));\n    return theta;\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Equation_of_time\">Equation of Time</a> - the difference between\n   * true solar time and mean solar time\n   *\n   * @param julianCenturies\n   *            the number of Julian centuries since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @return equation of time in minutes of time\n   */\n  private static getEquationOfTime(julianCenturies: number): number {\n    const epsilon: number = NOAACalculator.getObliquityCorrection(julianCenturies);\n    const geomMeanLongSun: number = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\n    const eccentricityEarthOrbit: number = NOAACalculator.getEarthOrbitEccentricity(julianCenturies);\n    const geomMeanAnomalySun: number = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\n\n    let y: number = Math.tan(MathUtils.degreesToRadians(epsilon) / 2);\n    y *= y;\n\n    const sin2l0: number = Math.sin(2 * MathUtils.degreesToRadians(geomMeanLongSun));\n    const sinm: number = Math.sin(MathUtils.degreesToRadians(geomMeanAnomalySun));\n    const cos2l0: number = Math.cos(2 * MathUtils.degreesToRadians(geomMeanLongSun));\n    const sin4l0: number = Math.sin(4 * MathUtils.degreesToRadians(geomMeanLongSun));\n    const sin2m: number = Math.sin(2 * MathUtils.degreesToRadians(geomMeanAnomalySun));\n\n    const equationOfTime: number = y * sin2l0 - 2 * eccentricityEarthOrbit * sinm + 4 * eccentricityEarthOrbit * y\n      * sinm * cos2l0 - 0.5 * y * y * sin4l0 - 1.25 * eccentricityEarthOrbit * eccentricityEarthOrbit * sin2m;\n    return MathUtils.radiansToDegrees(equationOfTime) * 4;\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun in\n   * <a href=\"https://en.wikipedia.org/wiki/Radian\">radians</a> at sunrise for the latitude.\n   *\n   * @param latitude\n   *            the latitude of observer in degrees\n   * @param solarDeclination\n   *            the declination angle of sun in degrees\n   * @param zenith\n   *            the zenith\n   * @param solarEvent\n   *             If the hour angle is for {@link SolarEvent#SUNRISE SUNRISE} or {@link SolarEvent#SUNSET SUNSET}\n   * @return hour angle of sunrise in <a href=\"https://en.wikipedia.org/wiki/Radian\">radians</a>\n   */\n  private static getSunHourAngle(latitude: number, solarDeclination: number, zenith: number, solarEvent: ValueOf<typeof NOAACalculator.SolarEvent>): number {\n    const latRad: number = MathUtils.degreesToRadians(latitude);\n    const sdRad: number = MathUtils.degreesToRadians(solarDeclination);\n\n    let hourAngle: number = (Math.acos(Math.cos(MathUtils.degreesToRadians(zenith)) / (Math.cos(latRad) * Math.cos(sdRad))\n      - Math.tan(latRad) * Math.tan(sdRad)));\n\n    if (solarEvent === NOAACalculator.SolarEvent.SUNSET) {\n      hourAngle = -hourAngle;\n    }\n    return hourAngle;\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Elevation</a> for the\n   * horizontal coordinate system at the given location at the given time. Can be negative if the sun is below the\n   * horizon. Not corrected for altitude.\n   *\n   * @param calendar\n   *            time of calculation\n   * @param latitude\n   *            latitude of location for calculation\n   * @param longitude\n   *            longitude of location for calculation\n   * @return solar elevation in degrees - horizon is 0 degrees, civil twilight is -6 degrees\n   */\n\n  public static getSolarElevation(date: DateTime, latitude: number, longitude: number): number {\n    const julianDay: number = NOAACalculator.getJulianDay(date);\n    const julianCenturies: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n    const eot: number = NOAACalculator.getEquationOfTime(julianCenturies);\n    let adjustedLongitude: number = (date.hour + 12) + (date.minute + eot + date.second / 60) / 60;\n    adjustedLongitude = -((adjustedLongitude * 360.0) / 24.0) % 360.0;\n    const hourAngleRad: number = MathUtils.degreesToRadians(longitude - adjustedLongitude);\n\n    const declination: number = NOAACalculator.getSunDeclination(julianCenturies);\n    const decRad: number = MathUtils.degreesToRadians(declination);\n    const latRad: number = MathUtils.degreesToRadians(latitude);\n    return MathUtils.radiansToDegrees(Math.asin((Math.sin(latRad) * Math.sin(decRad))\n      + (Math.cos(latRad) * Math.cos(decRad) * Math.cos(hourAngleRad))));\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Azimuth</a> for the\n   * horizontal coordinate system at the given location at the given time. Not corrected for altitude. True south is 0\n   * degrees.\n   *\n   * @param cal\n   *            time of calculation\n   * @param latitude\n   *            latitude of location for calculation\n   * @param longitude\n   *            longitude of location for calculation\n   * @return FIXME\n   */\n\n  public static getSolarAzimuth(date: DateTime, latitude: number, longitude: number): number {\n    const julianDay: number = NOAACalculator.getJulianDay(date);\n    const julianCenturies: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\n    const eot: number = NOAACalculator.getEquationOfTime(julianCenturies);\n    let adjustedLongitude: number = (date.hour + 12) + (date.minute + eot + date.second / 60) / 60;\n    adjustedLongitude = -((adjustedLongitude * 360.0) / 24.0) % 360.0;\n    const hourAngleRad: number = MathUtils.degreesToRadians(longitude - adjustedLongitude);\n\n    const declination: number = NOAACalculator.getSunDeclination(julianCenturies);\n    const decRad: number = MathUtils.degreesToRadians(declination);\n    const latRad: number = MathUtils.degreesToRadians(latitude);\n\n    return MathUtils.radiansToDegrees(Math.atan(Math.sin(hourAngleRad)\n      / ((Math.cos(hourAngleRad) * Math.sin(latRad)) - (Math.tan(decRad) * Math.cos(latRad))))) + 180;\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n   * of <a href=\"https://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> for the given day at the given location\n   * on earth. This implementation returns true solar noon as opposed to the time halfway between sunrise and sunset.\n   * Other calculators may return a more simplified calculation of halfway between sunrise and sunset. See <a href=\n   * \"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition of <em>Chatzos</em></a> for details on\n   * solar noon calculations.\n   * @see com.kosherjava.zmanim.util.AstronomicalCalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see #getSolarNoonMidnightUTC(double, double, SolarEvent)\n   *\n   * @param date\n   *            The Calendar representing the date to calculate solar noon for\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times. This class uses only requires\n   *            the longitude for calculating noon since it is the same time anywhere along the longitude line.\n   * @return the time in minutes from zero UTC\n   */\n  public getUTCNoon(date: DateTime, geoLocation: GeoLocation): number {\n    let noon = NOAACalculator.getSolarNoonMidnightUTC(NOAACalculator.getJulianDay(date), -geoLocation.getLongitude(), NOAACalculator.SolarEvent.NOON);\n    noon = noon / 60;\n\n    return noon > 0 ? noon % 24 : (noon % 24) + 24; // ensure that the time is >= 0 and < 24\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a>\n   * (UTC) of the <a href=\"https://en.wikipedia.org/wiki/Midnight\">solar midnight</a> for the end of the given civil\n   * day at the given location on earth (about 12 hours after solar noon). This implementation returns true solar\n   * midnight as opposed to the time halfway between sunrise and sunset. Other calculators may return a more\n   * simplified calculation of halfway between sunrise and sunset. See <a href=\n   * \"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition of <em>Chatzos</em></a> for details on\n   * solar noon / midnight calculations.\n   * @see com.kosherjava.zmanim.util.AstronomicalCalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see #getSolarNoonMidnightUTC(double, double, SolarEvent)\n   *\n   * @param calendar\n   *            The Calendar representing the date to calculate solar noon for\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times. This class uses only requires\n   *            the longitude for calculating noon since it is the same time anywhere along the longitude line.\n   * @return the time in minutes from zero UTC\n   */\n  public getUTCMidnight(date: DateTime, geoLocation: GeoLocation): number {\n    let midnight: number = NOAACalculator.getSolarNoonMidnightUTC(NOAACalculator.getJulianDay(date), -geoLocation.getLongitude(), NOAACalculator.SolarEvent.MIDNIGHT);\n    midnight = midnight / 60;\n    return midnight > 0 ? midnight % 24 : (midnight % 24) + 24; // ensure that the time is >= 0 and < 24\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n   * midnight (about 12 hours after solar noon) of the given day at the given location on earth.\n   *\n   * @param julianDay\n   *            The Julian day since <a href=\n   *            \"https://en.wikipedia.org/wiki/Epoch_(astronomy)#J2000\">J2000.0</a>.\n   * @param longitude\n   *            the longitude of observer in degrees\n   * @param solarEvent\n   *            If the calculation is for {@link SolarEvent#NOON NOON} or {@link SolarEvent#MIDNIGHT MIDNIGHT}\n   *\n   * @return the time in minutes from zero UTC\n   *\n   * @see com.kosherjava.zmanim.util.AstronomicalCalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see #getUTCNoon(Calendar, GeoLocation)\n   */\n  private static getSolarNoonMidnightUTC(julianDay: number, longitude: number, solarEvent: ValueOf<typeof NOAACalculator.SolarEvent>): number {\n    // eslint-disable-next-line no-param-reassign\n    julianDay = (solarEvent === NOAACalculator.SolarEvent.NOON) ? julianDay : julianDay + 0.5;\n    // First pass for approximate solar noon to calculate equation of time\n    const tnoon: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + longitude / 360);\n    let equationOfTime: number = NOAACalculator.getEquationOfTime(tnoon);\n    const solNoonUTC: number = (longitude * 4) - equationOfTime; // minutes\n\n    // second pass\n    const newt: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + solNoonUTC / 1440);\n\n    equationOfTime = NOAACalculator.getEquationOfTime(newt);\n    return (solarEvent === NOAACalculator.SolarEvent.NOON ? 720 : 1440) + (longitude * 4) - equationOfTime;\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n   * of sunrise or sunset for the given day at the given location on earth.\n   * @todo Possibly increase the number of passes for improved accuracy, especially in the Arctic areas.\n   *\n   * @param calendar\n   *            The calendar\n   * @param latitude\n   *            The latitude of observer in degrees\n   * @param longitude\n   *            Longitude of observer in degrees\n   * @param zenith\n   *            Zenith\n   * @param solarEvent\n   *             If the calculation is for {@link SolarEvent#SUNRISE SUNRISE} or {@link SolarEvent#SUNSET SUNSET}\n   * @return the time in minutes from zero Universal Coordinated Time (UTC)\n   */\n  private static getSunRiseSetUTC(date: DateTime, latitude: number, longitude: number, zenith: number, solarEvent: ValueOf<typeof NOAACalculator.SolarEvent>): number {\n    const julianDay: number = this.getJulianDay(date);\n\n    // Find the time of solar noon at the location, and use that declination.\n    // This is better than start of the Julian day\n    // TODO really not needed since the Julian day starts from local fixed noon. Changing this would be more\n    // efficient but would likely cause a very minor discrepancy in the calculated times (likely not reducing\n    // accuracy, just slightly different, thus potentially breaking test cases). Regardless, it would be within\n    // milliseconds.\n    const noonmin: number = NOAACalculator.getSolarNoonMidnightUTC(julianDay, longitude, NOAACalculator.SolarEvent.NOON);\n    const tnoon: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440);\n\n    // First calculates sunrise and approximate length of day\n    let equationOfTime: number = NOAACalculator.getEquationOfTime(tnoon);\n    let solarDeclination: number = NOAACalculator.getSunDeclination(tnoon);\n    let hourAngle: number = NOAACalculator.getSunHourAngle(latitude, solarDeclination, zenith, solarEvent);\n\n    let delta: number = longitude - MathUtils.radiansToDegrees(hourAngle);\n    let timeDiff: number = 4 * delta;\n    let timeUTC: number = 720 + timeDiff - equationOfTime;\n\n    // Second pass includes fractional Julian Day in gamma calc\n    const newt: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + timeUTC / 1440);\n\n    equationOfTime = NOAACalculator.getEquationOfTime(newt);\n\n    solarDeclination = NOAACalculator.getSunDeclination(newt);\n    hourAngle = NOAACalculator.getSunHourAngle(latitude, solarDeclination, zenith, solarEvent);\n\n    delta = longitude - MathUtils.radiansToDegrees(hourAngle);\n    timeDiff = 4 * delta;\n    timeUTC = 720 + timeDiff - equationOfTime;\n    return timeUTC;\n  }\n}\n","import { Big } from 'big.js';\nimport { DateTime } from 'luxon';\n\nimport { Long_MIN_VALUE, TimeZone, ValueOf } from './polyfills/Utils';\nimport { GeoLocation } from './util/GeoLocation';\nimport { AstronomicalCalculator } from './util/AstronomicalCalculator';\nimport { NOAACalculator } from './util/NOAACalculator';\nimport { IllegalArgumentException, UnsupportedError } from './polyfills/errors';\nimport getRawOffset = TimeZone.getRawOffset;\n\n/**\n * A Java calendar that calculates astronomical times such as {@link #getSunrise() sunrise} and {@link #getSunset()\n * sunset} times. This class contains a {@link #getCalendar() Calendar} and can therefore use the standard Calendar\n * functionality to change dates etc. The calculation engine used to calculate the astronomical times can be changed\n * to a different implementation by implementing the abstract {@link AstronomicalCalculator} and setting it with the\n * {@link #setAstronomicalCalculator(AstronomicalCalculator)}. A number of different calculation engine implementations\n * are included in the util package.\n * <b>Note:</b> There are times when the algorithms can't calculate proper values for sunrise, sunset and twilight. This\n * is usually caused by trying to calculate times for areas either very far North or South, where sunrise / sunset never\n * happen on that date. This is common when calculating twilight with a deep dip below the horizon for locations as far\n * south of the North Pole as London, in the northern hemisphere. The sun never reaches this dip at certain times of the\n * year. When the calculations encounter this condition a <code>null</code> will be returned when a\n * <code>{@link java.util.Date}</code> is expected and {@link Long#MIN_VALUE} when a <code>long</code> is expected. The\n * reason that <code>Exception</code>s are not thrown in these cases is because the lack of a rise/set or twilight is\n * not an exception, but an expected condition in many parts of the world.\n * <p>\n * Here is a simple example of how to use the API to calculate sunrise.\n * First create the Calendar for the location you would like to calculate sunrise or sunset times for:\n *\n * <pre>\n * String locationName = &quot;Lakewood, NJ&quot;;\n * double latitude = 40.0828; // Lakewood, NJ\n * double longitude = -74.2094; // Lakewood, NJ\n * double elevation = 20; // optional elevation correction in Meters\n * // the String parameter in getTimeZone() has to be a valid timezone listed in\n * // {@link java.util.TimeZone#getAvailableIDs()}\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\n * AstronomicalCalendar ac = new AstronomicalCalendar(location);\n * </pre>\n *\n * To get the time of sunrise, first set the date you want (if not set, the date will default to today):\n *\n * <pre>\n * ac.getCalendar().set(Calendar.MONTH, Calendar.FEBRUARY);\n * ac.getCalendar().set(Calendar.DAY_OF_MONTH, 8);\n * Date sunrise = ac.getSunrise();\n * </pre>\n *\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2016\n */\nexport class AstronomicalCalendar {\n  /**\n   * 90&deg; below the vertical. Used as a basis for most calculations since the location of the sun is 90&deg; below\n   * the horizon at sunrise and sunset.\n   * <b>Note </b>: it is important to note that for sunrise and sunset the {@link AstronomicalCalculator#adjustZenith\n   * adjusted zenith} is required to account for the radius of the sun and refraction. The adjusted zenith should not\n   * be used for calculations above or below 90&deg; since they are usually calculated as an offset to 90&deg;.\n   */\n  public static readonly GEOMETRIC_ZENITH: number = 90;\n\n  /** Sun's zenith at civil twilight (96&deg;). */\n  public static readonly CIVIL_ZENITH: number = 96;\n\n  /** Sun's zenith at nautical twilight (102&deg;). */\n  public static readonly NAUTICAL_ZENITH: number = 102;\n\n  /** Sun's zenith at astronomical twilight (108&deg;). */\n  public static readonly ASTRONOMICAL_ZENITH: number = 108;\n\n  /** constant for milliseconds in a minute (60,000) */\n  public static readonly MINUTE_MILLIS: number = 60 * 1000;\n\n  /** constant for milliseconds in an hour (3,600,000) */\n  public static readonly HOUR_MILLIS: number = AstronomicalCalendar.MINUTE_MILLIS * 60;\n\n  /**\n   * The Java Calendar encapsulated by this class to track the current date used by the class\n   */\n  private date!: DateTime;\n\n  /**\n   * the {@link GeoLocation} used for calculations.\n   */\n  private geoLocation!: GeoLocation;\n\n  /**\n   * the internal {@link AstronomicalCalculator} used for calculating solar based times.\n   */\n  private astronomicalCalculator!: AstronomicalCalculator;\n\n  /**\n   * The getSunrise method returns a <code>Date</code> representing the\n   * {@link AstronomicalCalculator#getElevationAdjustment(double) elevation adjusted} sunrise time. The zenith used\n   * for the calculation uses {@link #GEOMETRIC_ZENITH geometric zenith} of 90&deg; plus\n   * {@link AstronomicalCalculator#getElevationAdjustment(double)}. This is adjusted by the\n   * {@link AstronomicalCalculator} to add approximately 50/60 of a degree to account for 34 archminutes of refraction\n   * and 16 archminutes for the sun's radius for a total of {@link AstronomicalCalculator#adjustZenith 90.83333&deg;}.\n   * See documentation for the specific implementation of the {@link AstronomicalCalculator} that you are using.\n   *\n   * @return the <code>Date</code> representing the exact sunrise time. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see AstronomicalCalculator#adjustZenith\n   * @see #getSeaLevelSunrise()\n   * @see AstronomicalCalendar#getUTCSunrise\n   */\n  public getSunrise(): DateTime | null {\n    const sunrise: number = this.getUTCSunrise(AstronomicalCalendar.GEOMETRIC_ZENITH);\n    if (Number.isNaN(sunrise)) return null;\n    return this.getDateFromTime(sunrise, AstronomicalCalendar.SolarEvent.SUNRISE);\n  }\n\n  /**\n   * A method that returns the sunrise without {@link AstronomicalCalculator#getElevationAdjustment(double) elevation\n   * adjustment}. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible light,\n   * something that is not affected by elevation. This method returns sunrise calculated at sea level. This forms the\n   * base for dawn calculations that are calculated as a dip below the horizon before sunrise.\n   *\n   * @return the <code>Date</code> representing the exact sea-level sunrise time. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see AstronomicalCalendar#getSunrise\n   * @see AstronomicalCalendar#getUTCSeaLevelSunrise\n   * @see #getSeaLevelSunset()\n   */\n  public getSeaLevelSunrise(): DateTime | null {\n    const sunrise: number = this.getUTCSeaLevelSunrise(AstronomicalCalendar.GEOMETRIC_ZENITH);\n    if (Number.isNaN(sunrise)) return null;\n    return this.getDateFromTime(sunrise, AstronomicalCalendar.SolarEvent.SUNRISE);\n  }\n\n  /**\n   * A method that returns the beginning of <a href=\"https://en.wikipedia.org/wiki/Twilight#Civil_twilight\">civil twilight</a>\n   * (dawn) using a zenith of {@link #CIVIL_ZENITH 96&deg;}.\n   *\n   * @return The <code>Date</code> of the beginning of civil twilight using a zenith of 96&deg;. If the calculation\n   *         can't be computed, <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see #CIVIL_ZENITH\n   */\n  public getBeginCivilTwilight(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(AstronomicalCalendar.CIVIL_ZENITH);\n  }\n\n  /**\n   * A method that returns the beginning of <a href=\n   * \"https://en.wikipedia.org/wiki/Twilight#Nautical_twilight\">nautical twilight</a> using a zenith of {@link\n   * #NAUTICAL_ZENITH 102&deg;}.\n   *\n   * @return The <code>Date</code> of the beginning of nautical twilight using a zenith of 102&deg;. If the\n   *         calculation can't be computed <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see #NAUTICAL_ZENITH\n   */\n  public getBeginNauticalTwilight(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(AstronomicalCalendar.NAUTICAL_ZENITH);\n  }\n\n  /**\n   * A method that returns the beginning of <a href=\n   * \"https://en.wikipedia.org/wiki/Twilight#Astronomical_twilight\">astronomical twilight</a> using a zenith of\n   * {@link #ASTRONOMICAL_ZENITH 108&deg;}.\n   *\n   * @return The <code>Date</code> of the beginning of astronomical twilight using a zenith of 108&deg;. If the\n   *         calculation can't be computed, <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see #ASTRONOMICAL_ZENITH\n   */\n  public getBeginAstronomicalTwilight(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(AstronomicalCalendar.ASTRONOMICAL_ZENITH);\n  }\n\n  /**\n   * The getSunset method returns a <code>Date</code> representing the\n   * {@link AstronomicalCalculator#getElevationAdjustment(double) elevation adjusted} sunset time. The zenith used for\n   * the calculation uses {@link #GEOMETRIC_ZENITH geometric zenith} of 90&deg; plus\n   * {@link AstronomicalCalculator#getElevationAdjustment(double)}. This is adjusted by the\n   * {@link AstronomicalCalculator} to add approximately 50/60 of a degree to account for 34 archminutes of refraction\n   * and 16 archminutes for the sun's radius for a total of {@link AstronomicalCalculator#adjustZenith 90.83333&deg;}.\n   * See documentation for the specific implementation of the {@link AstronomicalCalculator} that you are using. Note:\n   * In certain cases the calculates sunset will occur before sunrise. This will typically happen when a timezone\n   * other than the local timezone is used (calculating Los Angeles sunset using a GMT timezone for example). In this\n   * case the sunset date will be incremented to the following date.\n   *\n   * @return the <code>Date</code> representing the exact sunset time. If the calculation can't be computed such as in\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see AstronomicalCalculator#adjustZenith\n   * @see #getSeaLevelSunset()\n   * @see AstronomicalCalendar#getUTCSunset\n   */\n  public getSunset(): DateTime | null {\n    const sunset: number = this.getUTCSunset(AstronomicalCalendar.GEOMETRIC_ZENITH);\n    if (Number.isNaN(sunset)) return null;\n    return this.getDateFromTime(sunset, AstronomicalCalendar.SolarEvent.SUNSET);\n  }\n\n  /**\n   * A method that returns the sunset without {@link AstronomicalCalculator#getElevationAdjustment(double) elevation\n   * adjustment}. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible light,\n   * something that is not affected by elevation. This method returns sunset calculated at sea level. This forms the\n   * base for dusk calculations that are calculated as a dip below the horizon after sunset.\n   *\n   * @return the <code>Date</code> representing the exact sea-level sunset time. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see AstronomicalCalendar#getSunset\n   * @see AstronomicalCalendar#getUTCSeaLevelSunset\n   * @see #getSunset()\n   */\n  public getSeaLevelSunset(): DateTime | null {\n    const sunset: number = this.getUTCSeaLevelSunset(AstronomicalCalendar.GEOMETRIC_ZENITH);\n    if (Number.isNaN(sunset)) return null;\n    return this.getDateFromTime(sunset, AstronomicalCalendar.SolarEvent.SUNSET);\n  }\n\n  /**\n   * A method that returns the end of <a href=\"https://en.wikipedia.org/wiki/Twilight#Civil_twilight\">civil twilight</a>\n   * using a zenith of {@link #CIVIL_ZENITH 96&deg;}.\n   *\n   * @return The <code>Date</code> of the end of civil twilight using a zenith of {@link #CIVIL_ZENITH 96&deg;}. If\n   *         the calculation can't be computed, <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see #CIVIL_ZENITH\n   */\n  public getEndCivilTwilight(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(AstronomicalCalendar.CIVIL_ZENITH);\n  }\n\n  /**\n   * A method that returns the end of nautical twilight using a zenith of {@link #NAUTICAL_ZENITH 102&deg;}.\n   *\n   * @return The <code>Date</code> of the end of nautical twilight using a zenith of {@link #NAUTICAL_ZENITH 102&deg;}\n   *         . If the calculation can't be computed, <code>null</code> will be returned. See detailed explanation on top of the\n   *         page.\n   * @see #NAUTICAL_ZENITH\n   */\n  public getEndNauticalTwilight(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(AstronomicalCalendar.NAUTICAL_ZENITH);\n  }\n\n  /**\n   * A method that returns the end of astronomical twilight using a zenith of {@link #ASTRONOMICAL_ZENITH 108&deg;}.\n   *\n   * @return the <code>Date</code> of the end of astronomical twilight using a zenith of {@link #ASTRONOMICAL_ZENITH\n   *         108&deg;}. If the calculation can't be computed, <code>null</code> will be returned. See detailed explanation on top\n   *         of the page.\n   * @see #ASTRONOMICAL_ZENITH\n   */\n  public getEndAstronomicalTwilight(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(AstronomicalCalendar.ASTRONOMICAL_ZENITH);\n  }\n\n  /**\n   * A utility method that returns a date offset by the offset time passed in. Please note that the level of light\n   * during twilight is not affected by elevation, so if this is being used to calculate an offset before sunrise or\n   * after sunset with the intent of getting a rough \"level of light\" calculation, the sunrise or sunset time passed\n   * to this method should be sea level sunrise and sunset.\n   *\n   * @param time\n   *            the start time\n   * @param offset\n   *            the offset in milliseconds to add to the time.\n   * @return the {@link java.util.Date} with the offset in milliseconds added to it\n   */\n  public static getTimeOffset(time: DateTime | null, offset: number): DateTime | null {\n    if (time === null || offset === Long_MIN_VALUE || Number.isNaN(offset)) {\n      return null;\n    }\n\n    return time.plus({ milliseconds: offset });\n  }\n\n  /**\n   * A utility method that returns the time of an offset by degrees below or above the horizon of\n   * {@link #getSunrise() sunrise}. Note that the degree offset is from the vertical, so for a calculation of 14&deg;\n   * before sunrise, an offset of 14 + {@link #GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\n   *\n   * @param offsetZenith\n   *            the degrees before {@link #getSunrise()} to use in the calculation. For time after sunrise use\n   *            negative numbers. Note that the degree offset is from the vertical, so for a calculation of 14&deg;\n   *            before sunrise, an offset of 14 + {@link #GEOMETRIC_ZENITH} = 104 would have to be passed as a\n   *            parameter.\n   * @return The {@link java.util.Date} of the offset after (or before) {@link #getSunrise()}. If the calculation\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\n   *         not rise, and one where it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         page.\n   */\n  public getSunriseOffsetByDegrees(offsetZenith: number): DateTime | null {\n    const dawn: number = this.getUTCSunrise(offsetZenith);\n    if (Number.isNaN(dawn)) return null;\n    return this.getDateFromTime(dawn, AstronomicalCalendar.SolarEvent.SUNRISE);\n  }\n\n  /**\n   * A utility method that returns the time of an offset by degrees below or above the horizon of {@link #getSunset()\n   * sunset}. Note that the degree offset is from the vertical, so for a calculation of 14&deg; after sunset, an\n   * offset of 14 + {@link #GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\n   *\n   * @param offsetZenith\n   *            the degrees after {@link #getSunset()} to use in the calculation. For time before sunset use negative\n   *            numbers. Note that the degree offset is from the vertical, so for a calculation of 14&deg; after\n   *            sunset, an offset of 14 + {@link #GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\n   * @return The {@link java.util.Date}of the offset after (or before) {@link #getSunset()}. If the calculation can't\n   *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\n   *         rise, and one where it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         page.\n   */\n  public getSunsetOffsetByDegrees(offsetZenith: number): DateTime | null {\n    const sunset: number = this.getUTCSunset(offsetZenith);\n    if (Number.isNaN(sunset)) return null;\n    return this.getDateFromTime(sunset, AstronomicalCalendar.SolarEvent.SUNSET);\n  }\n\n  /**\n   * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\n   * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\n   */\n\n  /*\n  constructor() {\n      this(new GeoLocation());\n  }\n  */\n\n  /**\n   * A constructor that takes in <a href=\"https://en.wikipedia.org/wiki/Geolocation\">geolocation</a> information as a\n   * parameter. The default {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} used for solar\n   * calculations is the more accurate {@link NOAACalculator}.\n   *\n   * @param geoLocation\n   *            The location information used for calculating astronomical sun times.\n   *\n   * @see #setAstronomicalCalculator(AstronomicalCalculator) for changing the calculator class.\n   * @see #ComplexZmanimCalendar(GeoLocation)\n   */\n  constructor(geoLocation: GeoLocation = new GeoLocation()) {\n    this.setDate(DateTime.fromObject({ zone: geoLocation.getTimeZone() }));\n    this.setGeoLocation(geoLocation); // duplicate call\n    this.setAstronomicalCalculator(new NOAACalculator());\n  }\n\n  /**\n   * A method that returns the sunrise in UTC time without correction for time zone offset from GMT and without using\n   * daylight savings time.\n   *\n   * @param zenith\n   *            the degrees below the horizon. For time after sunrise use negative numbers.\n   * @return The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, {@link Double#NaN} will be returned. See detailed explanation on top of the page.\n   */\n  public getUTCSunrise(zenith: number): number {\n    return this.getAstronomicalCalculator()\n      .getUTCSunrise(this.getAdjustedDate(), this.getGeoLocation(), zenith, true);\n  }\n\n  /**\n   * A method that returns the sunrise in UTC time without correction for time zone offset from GMT and without using\n   * daylight savings time. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible\n   * light, something that is not affected by elevation. This method returns UTC sunrise calculated at sea level. This\n   * forms the base for dawn calculations that are calculated as a dip below the horizon before sunrise.\n   *\n   * @param zenith\n   *            the degrees below the horizon. For time after sunrise use negative numbers.\n   * @return The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, {@link Double#NaN} will be returned. See detailed explanation on top of the page.\n   * @see AstronomicalCalendar#getUTCSunrise\n   * @see AstronomicalCalendar#getUTCSeaLevelSunset\n   */\n  public getUTCSeaLevelSunrise(zenith: number): number {\n    return this.getAstronomicalCalculator()\n      .getUTCSunrise(this.getAdjustedDate(), this.getGeoLocation(), zenith, false);\n  }\n\n  /**\n   * A method that returns the sunset in UTC time without correction for time zone offset from GMT and without using\n   * daylight savings time.\n   *\n   * @param zenith\n   *            the degrees below the horizon. For time after sunset use negative numbers.\n   * @return The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, {@link Double#NaN} will be returned. See detailed explanation on top of the page.\n   * @see AstronomicalCalendar#getUTCSeaLevelSunset\n   */\n  public getUTCSunset(zenith: number): number {\n    return this.getAstronomicalCalculator()\n      .getUTCSunset(this.getAdjustedDate(), this.getGeoLocation(), zenith, true);\n  }\n\n  /**\n   * A method that returns the sunset in UTC time without correction for elevation, time zone offset from GMT and\n   * without using daylight savings time. Non-sunrise and sunset calculations such as dawn and dusk, depend on the\n   * amount of visible light, something that is not affected by elevation. This method returns UTC sunset calculated\n   * at sea level. This forms the base for dusk calculations that are calculated as a dip below the horizon after\n   * sunset.\n   *\n   * @param zenith\n   *            the degrees below the horizon. For time before sunset use negative numbers.\n   * @return The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, {@link Double#NaN} will be returned. See detailed explanation on top of the page.\n   * @see AstronomicalCalendar#getUTCSunset\n   * @see AstronomicalCalendar#getUTCSeaLevelSunrise\n   */\n  public getUTCSeaLevelSunset(zenith: number): number {\n    return this.getAstronomicalCalculator()\n      .getUTCSunset(this.getAdjustedDate(), this.getGeoLocation(), zenith, false);\n  }\n\n  /**\n   * A method that returns a sea-level based temporal (solar) hour. The day from {@link #getSeaLevelSunrise()\n   * sea-level sunrise} to {@link #getSeaLevelSunset() sea-level sunset} is split into 12 equal parts with each\n   * one being a temporal hour.\n   *\n   * @see #getSeaLevelSunrise()\n   * @see #getSeaLevelSunset()\n   * @see #getTemporalHour(Date, Date)\n   *\n   * @return the <code>long</code> millisecond length of a temporal hour. If the calculation can't be computed,\n   *         {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the page.\n   *\n   * @see #getTemporalHour(Date, Date)\n   */\n\n  /*\n      public getTemporalHour(): number {\n          return this.getTemporalHour(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\n      }\n  */\n\n  /**\n   * A utility method that will allow the calculation of a temporal (solar) hour based on the sunrise and sunset\n   * passed as parameters to this method. An example of the use of this method would be the calculation of a\n   * non-elevation adjusted temporal hour by passing in {@link #getSunrise() sea level sunrise} and\n   * {@link #getSunset() sea level sunset} as parameters.\n   *\n   * @param startOfDay\n   *            The start of the day.\n   * @param endOfDay\n   *            The end of the day.\n   *\n   * @return the <code>long</code> millisecond length of the temporal hour. If the calculation can't be computed a\n   *         {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the page.\n   *\n   * @see #getTemporalHour()\n   */\n  public getTemporalHour(startOfDay: DateTime | null = this.getSeaLevelSunrise(),\n                         endOfDay: DateTime | null = this.getSeaLevelSunset()): number {\n    if (startOfDay === null || endOfDay === null) {\n      return Long_MIN_VALUE;\n    }\n    return (endOfDay.valueOf() - startOfDay.valueOf()) / 12;\n  }\n\n  /**\n   * A method that returns sundial or solar noon. It occurs when the Sun is <a href\n   * =\"https://en.wikipedia.org/wiki/Transit_%28astronomy%29\">transiting</a> the <a\n   * href=\"https://en.wikipedia.org/wiki/Meridian_%28astronomy%29\">celestial meridian</a>. In this class it is\n   * calculated as halfway between sea level sunrise and sea level sunset, which can be slightly off the real transit\n   * time due to changes in declination (the lengthening or shortening day).\n   *\n   * @return the <code>Date</code> representing Sun's transit. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see #getSunTransit(Date, Date)\n   * @see #getTemporalHour()\n   */\n\n  /*\n      public getSunTransit(): Date {\n          return this.getSunTransit(getSeaLevelSunrise(), this.getSeaLevelSunset());\n      }\n  */\n\n  /**\n   * A method that returns sundial or solar noon. It occurs when the Sun is <a href=\n   * \"https://en.wikipedia.org/wiki/Transit_%28astronomy%29\">transiting</a> the <a\n   * href=\"https://en.wikipedia.org/wiki/Meridian_%28astronomy%29\">celestial meridian</a>. The calculations used by\n   * this class depend on the {@link AstronomicalCalculator} used. If this calendar instance is {@link\n   * #setAstronomicalCalculator(AstronomicalCalculator) set} to use the {@link com.kosherjava.zmanim.util.NOAACalculator}\n   * (the default) it will calculate astronomical noon. If the calendar instance is  to use the\n   * {@link com.kosherjava.zmanim.util.SunTimesCalculator}, that does not have code to calculate astronomical noon, the\n   * sun transit is calculated as halfway between sea level sunrise and sea level sunset, which can be slightly off the\n   * real transit time due to changes in declination (the lengthening or shortening day). See <a href=\n   * \"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition of Chatzos</a> for details on the proper\n   * definition of solar noon / midday.\n   *\n   * @return the <code>Date</code> representing Sun's transit. If the calculation can't be computed such as when using\n   *         the {@link com.kosherjava.zmanim.util.SunTimesCalculator USNO calculator} that does not support getting solar\n   *         noon for the Arctic Circle (where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set), a <code>null</code> will be returned. See detailed explanation on top of the page.\n   * @see #getSunTransit(Date, Date)\n   * @see #getTemporalHour()\n   * @see com.kosherjava.zmanim.util.NOAACalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see com.kosherjava.zmanim.util.SunTimesCalculator#getUTCNoon(Calendar, GeoLocation)\n   */\n  public getSunTransit(): DateTime | null;\n  public getSunTransit(startOfDay: DateTime | null, endOfDay: DateTime | null): DateTime | null;\n  public getSunTransit(startOfDay?: DateTime | null, endOfDay?: DateTime | null): DateTime | null {\n    if (startOfDay === undefined && endOfDay === undefined) {\n      const noon = this.getAstronomicalCalculator().getUTCNoon(this.getAdjustedDate(), this.getGeoLocation());\n      return this.getDateFromTime(noon, AstronomicalCalendar.SolarEvent.NOON);\n    }\n\n    const temporalHour: number = this.getTemporalHour(startOfDay, endOfDay);\n    return AstronomicalCalendar.getTimeOffset(startOfDay as DateTime | null, temporalHour * 6);\n  }\n\n  /**\n   * A method that returns solar midnight. It occurs when the Sun is <a href=\n   * \"https://en.wikipedia.org/wiki/Transit_%28astronomy%29\">transiting</a> the lower <a\n   * href=\"https://en.wikipedia.org/wiki/Meridian_%28astronomy%29\">celestial meridian</a>, or when the sun is at it's\n   * <a href=\"https://en.wikipedia.org/wiki/Nadir\">nadir</a>. The calculations used by this class depend on the {@link\n   * AstronomicalCalculator} used. If this calendar instance is {@link #setAstronomicalCalculator(AstronomicalCalculator)\n   * set} to use the {@link com.kosherjava.zmanim.util.NOAACalculator} (the default) it will calculate astronomical\n   * midnight. If the calendar instance is to use the {@link com.kosherjava.zmanim.util.SunTimesCalculator}, that does not\n   * have code to calculate astronomical noon, midnight is calculated as halfway between sea level sunrise and sea level\n   * sunset on the other side of the world (180&deg; away), which can be slightly off the real transit time due to changes\n   * in declination (the lengthening or shortening day). See <a href=\n   * \"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition of Chatzos</a> for details on the proper\n   * definition of solar noon / midday.\n   *\n   * @deprecated This method was replaced by {@link #getSolarMidnight()} and will be removed in v3.0.\n   *\n   * @return the <code>Date</code> representing Sun's lower transit at the end of the current day. If the calculation can't\n   *         be computed such as when using the {@link com.kosherjava.zmanim.util.SunTimesCalculator USNO calculator} that\n   *         does not support getting solar noon or midnight for the Arctic Circle (where there is at least one day a year\n   *         where the sun does not rise, and one where it does not set), a <code>null</code> will be returned. This is not\n   *         relevant when using the {@link com.kosherjava.zmanim.util.NOAACalculator NOAA Calculator} that is never expected\n   *         to return <code>null</code>. See the detailed explanation on top of the page.\n   *\n   * @see #getSunTransit()\n   * @see #getSolarMidnight()\n   * @see com.kosherjava.zmanim.util.NOAACalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see com.kosherjava.zmanim.util.SunTimesCalculator#getUTCNoon(Calendar, GeoLocation)\n   */\n  public getSunLowerTransit(): DateTime | null {\n    return this.getSolarMidnight();\n  }\n\n  /**\n   * A method that returns solar midnight at the end of the current day (that may actually be after midnight of the day it\n   * is being calculated for). It occurs when the Sun is <a href=\"https://en.wikipedia.org/wiki/Transit_%28astronomy%29\"\n   * >transiting</a> the lower <a href=\"https://en.wikipedia.org/wiki/Meridian_%28astronomy%29\">celestial meridian</a>, or\n   * when the sun is at it's <a href=\"https://en.wikipedia.org/wiki/Nadir\">nadir</a>. The calculations used by this class\n   * depend on the {@link AstronomicalCalculator} used. If this calendar instance is {@link\n   * #setAstronomicalCalculator(AstronomicalCalculator) set} to use the {@link com.kosherjava.zmanim.util.NOAACalculator}\n   * (the default) it will calculate astronomical midnight. If the calendar instance is to use the {@link\n   * com.kosherjava.zmanim.util.SunTimesCalculator USNO Calculator}, that does not have code to calculate astronomical noon,\n   * midnight is calculated as 12 hours after halfway between sea level sunrise and sea level sunset of that day. This can\n   * be slightly off the real transit time due to changes in declination (the lengthening or shortening day). See <a href=\n   * \"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition of Chatzos</a> for details on the proper\n   * definition of solar noon / midday.\n   *\n   * @return the <code>Date</code> representing Sun's lower transit at the end of the current day. If the calculation can't\n   *         be computed such as when using the {@link com.kosherjava.zmanim.util.SunTimesCalculator USNO calculator} that\n   *         does not support getting solar noon or midnight for the Arctic Circle (where there is at least one day a year\n   *         where the sun does not rise, and one where it does not set), a <code>null</code> will be returned. This is not\n   *         relevant when using the {@link com.kosherjava.zmanim.util.NOAACalculator NOAA Calculator} that is never expected\n   *         to return <code>null</code>. See the detailed explanation on top of the page.\n   *\n   * @see #getSunTransit()\n   * @see com.kosherjava.zmanim.util.NOAACalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see com.kosherjava.zmanim.util.SunTimesCalculator#getUTCNoon(Calendar, GeoLocation)\n   */\n  public getSolarMidnight(): DateTime | null {\n    const noon: number = this.getAstronomicalCalculator().getUTCMidnight(this.getAdjustedDate(), this.getGeoLocation());\n    return this.getDateFromTime(noon, AstronomicalCalendar.SolarEvent.MIDNIGHT);\n  }\n\n  /**\n   * An enum to indicate what type of solar event is being calculated.\n   */\n  protected static readonly SolarEvent = {\n    /** SUNRISE A solar event related to sunrise */\n    SUNRISE: 0,\n    /** SUNSET A solar event related to sunset */\n    SUNSET: 1,\n    /** NOON A solar event related to noon */\n    NOON: 2,\n    /** MIDNIGHT A solar event related to midnight */\n    MIDNIGHT: 3,\n  } as const;\n\n  /**\n   * A method that returns a <code>Date</code> from the time passed in as a parameter.\n   *\n   * @param time\n   *            The time to be set as the time for the <code>Date</code>. The time expected is in the format: 18.75\n   *            for 6:45:00 PM.\n   * @param solarEvent - the type of {@link SolarEvent}\n   * @return The Date - object representation of the time double\n   */\n  protected getDateFromTime(time: number, solarEvent: ValueOf<typeof AstronomicalCalendar.SolarEvent>): DateTime | null {\n    if (Number.isNaN(time)) {\n      return null;\n    }\n    let calculatedTime: number = time;\n\n    const adjustedDate: DateTime = this.getAdjustedDate();\n    let cal = DateTime.utc(adjustedDate.year, adjustedDate.month, adjustedDate.day);\n\n    const hours: number = Math.trunc(calculatedTime); // retain only the hours\n    calculatedTime -= hours;\n    const minutes: number = Math.trunc(calculatedTime *= 60); // retain only the minutes\n    calculatedTime -= minutes;\n    const seconds: number = Math.trunc(calculatedTime *= 60); // retain only the seconds\n    calculatedTime -= seconds; // remaining milliseconds\n\n    // Check if a date transition has occurred, or is about to occur - this indicates the date of the event is\n    // actually not the target date, but the day prior or after\n    const localTimeHours: number = Math.trunc(this.getGeoLocation().getLongitude() / 15);\n    if (solarEvent === AstronomicalCalendar.SolarEvent.SUNRISE && localTimeHours + hours > 18) {\n      cal = cal.minus({ days: 1 });\n    } else if (solarEvent === AstronomicalCalendar.SolarEvent.SUNSET && localTimeHours + hours < 6) {\n      cal = cal.plus({ days: 1 });\n    } else if (solarEvent === AstronomicalCalendar.SolarEvent.MIDNIGHT && localTimeHours + hours < 12) {\n      cal = cal.plus({ days: 1 });\n    }\n\n    return cal.set({\n      hour: hours,\n      minute: minutes,\n      second: seconds,\n      millisecond: Math.trunc(calculatedTime * 1000),\n    });\n  }\n\n  /**\n   * Returns the dip below the horizon before sunrise that matches the offset minutes on passed in as a parameter. For\n   * example passing in 72 minutes for a calendar set to the equinox in Jerusalem returns a value close to 16.1&deg;\n   * Please note that this method is very slow and inefficient and should NEVER be used in a loop.\n   * @todo Improve efficiency of this method by not brute forcing the calculation.\n   *\n   * @param minutes\n   *            offset\n   * @return the degrees below the horizon before sunrise that match the offset in minutes passed it as a parameter.\n   * @see #getSunsetSolarDipFromOffset(double)\n   */\n  public getSunriseSolarDipFromOffset(minutes: number): number | null {\n    if (Number.isNaN(minutes)) return null;\n\n    let offsetByDegrees: DateTime | null = this.getSeaLevelSunrise();\n    const offsetByTime: DateTime | null = AstronomicalCalendar.getTimeOffset(this.getSeaLevelSunrise(), -(minutes * AstronomicalCalendar.MINUTE_MILLIS));\n\n    let degrees: Big = new Big(0);\n    const incrementor: Big = new Big('0.0001');\n\n    // If `minutes` is not `NaN` and `offsetByDegrees` is not null, `offsetByTime` should not be null\n    while (offsetByDegrees === null || ((minutes < 0 && offsetByDegrees < offsetByTime!)\n      || (minutes > 0 && offsetByDegrees > offsetByTime!))) {\n      if (minutes > 0) {\n        degrees = degrees.add(incrementor);\n      } else {\n        degrees = degrees.sub(incrementor);\n      }\n\n      offsetByDegrees = this.getSunriseOffsetByDegrees(AstronomicalCalendar.GEOMETRIC_ZENITH + degrees.toNumber());\n    }\n\n    return degrees.toNumber();\n  }\n\n  /**\n   * Returns the dip below the horizon after sunset that matches the offset minutes on passed in as a parameter. For\n   * example passing in 72 minutes for a calendar set to the equinox in Jerusalem returns a value close to 16.1&deg;\n   * Please note that this method is very slow and inefficient and should NEVER be used in a loop.\n   * @todo Improve efficiency of this method by not brute forcing the calculation.\n   *\n   * @param minutes\n   *            offset\n   * @return the degrees below the horizon after sunset that match the offset in minutes passed it as a parameter.\n   * @see #getSunriseSolarDipFromOffset(double)\n   */\n  public getSunsetSolarDipFromOffset(minutes: number): number | null {\n    if (Number.isNaN(minutes)) return null;\n\n    let offsetByDegrees: DateTime | null = this.getSeaLevelSunset();\n    const offsetByTime: DateTime | null = AstronomicalCalendar.getTimeOffset(this.getSeaLevelSunset(), minutes * AstronomicalCalendar.MINUTE_MILLIS);\n\n    let degrees: Big = new Big(0);\n    const incrementor: Big = new Big('0.001');\n\n    // If `minutes` is not `NaN` and `offsetByDegrees` is not null, `offsetByTime` should not be null\n    while (offsetByDegrees == null || ((minutes > 0 && offsetByDegrees < offsetByTime!)\n      || (minutes < 0 && offsetByDegrees > offsetByTime!))) {\n      if (minutes > 0) {\n        degrees = degrees.add(incrementor);\n      } else {\n        degrees = degrees.sub(incrementor);\n      }\n\n      offsetByDegrees = this.getSunsetOffsetByDegrees(AstronomicalCalendar.GEOMETRIC_ZENITH + degrees.toNumber());\n    }\n\n    return degrees.toNumber();\n  }\n\n  /**\n   * A method that returns <a href=\"https://en.wikipedia.org/wiki/Local_mean_time\">local mean time (LMT)</a> time\n   * converted to regular clock time for the number of hours (0.0 to 23.999...) passed to this method. This time is\n   * adjusted from standard time to account for the local latitude. The 360&deg; of the globe divided by 24 calculates\n   * to 15&deg; per hour with 4 minutes per degree, so at a longitude of 0 , 15, 30 etc... noon is at exactly 12:00pm.\n   * Lakewood, N.J., with a longitude of -74.222, is 0.7906 away from the closest multiple of 15 at -75&deg;. This is\n   * multiplied by 4 clock minutes (per degree) to yield 3 minutes and 7 seconds for a noon time of 11:56:53am. This\n   * method is not tied to the theoretical 15&deg; time zones, but will adjust to the actual time zone and <a href=\n   * \"https://en.wikipedia.org/wiki/Daylight_saving_time\">Daylight saving time</a> to return LMT.\n   *\n   * @param hours\n   *      the hour (such as 12.0 for noon and 0.0 for midnight) to calculate as LMT. Valid values are in the range of\n   *      0.0 to 23.999.... An IllegalArgumentException will be thrown if the value does not fit in the expected range.\n   * @return the Date representing the local mean time (LMT) for the number of hours passed in. In Lakewood, NJ, passing 12\n   *         (noon) will return 11:56:50am.\n   * @see GeoLocation#getLocalMeanTimeOffset()\n   */\n  public getLocalMeanTime(hours: number): DateTime | null {\n    if (hours < 0 || hours >= 24) {\n      throw new IllegalArgumentException('Hours must between 0 and 23.9999...');\n    }\n\n    return AstronomicalCalendar.getTimeOffset(this.getDateFromTime(hours - getRawOffset(this.getGeoLocation().getTimeZone())\n        / AstronomicalCalendar.HOUR_MILLIS, AstronomicalCalendar.SolarEvent.SUNRISE), -this.getGeoLocation().getLocalMeanTimeOffset());\n  }\n\n  /**\n   * Adjusts the <code>Calendar</code> to deal with edge cases where the location crosses the antimeridian.\n   *\n   * @see GeoLocation#getAntimeridianAdjustment()\n   * @return the adjusted Calendar\n   */\n  private getAdjustedDate(): DateTime {\n    const offset: -1 | 0 | 1 = this.getGeoLocation().getAntimeridianAdjustment();\n    if (offset === 0) return this.getDate();\n    return this.getDate().plus({ days: offset });\n  }\n\n  /**\n   * Returns an XML formatted representation of the class using the default output of the\n   *         {@link com.kosherjava.zmanim.util.ZmanimFormatter#toXML(AstronomicalCalendar) toXML} method.\n   * @see ZmanimFormatter#toXML(AstronomicalCalendar)\n   * @see java.lang.Object#toString()\n   * @deprecated (This depends on a circular dependency).\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public toString(): void {\n    throw new UnsupportedError('This method is unsupported, due to the fact that it depends on a circular dependency.');\n  }\n\n  /**\n   * Returns a JSON formatted representation of the class using the default output of the\n   *         {@link com.kosherjava.zmanim.util.ZmanimFormatter#toJSON(AstronomicalCalendar) toJSON} method.\n   * @see ZmanimFormatter#toJSON(AstronomicalCalendar)\n   * @see java.lang.Object#toString()\n   * @deprecated  This depends on a circular dependency. Use <pre>ZmanimFormatter.toJSON(astronomicalCalendar)</pre> instead.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public toJSON(): void {\n    throw new UnsupportedError('This method is unsupported, due to the fact that it depends on a circular dependency. '\n      + 'Use `ZmanimFormatter.toJSON(astronomicalCalendar)` instead.');\n  }\n\n  /**\n   * @see java.lang.Object#equals(Object)\n   */\n  public equals(object: object): boolean {\n    if (this === object) {\n      return true;\n    }\n    if (!(object instanceof AstronomicalCalendar)) {\n      return false;\n    }\n    const aCal: AstronomicalCalendar = object as AstronomicalCalendar;\n    return this.getDate().equals(aCal.getDate()) && this.getGeoLocation().equals(aCal.getGeoLocation())\n      && this.getAstronomicalCalculator() === aCal.getAstronomicalCalculator();\n  }\n\n  /**\n   * A method that returns the currently set {@link GeoLocation} which contains location information used for the\n   * astronomical calculations.\n   *\n   * @return Returns the geoLocation.\n   */\n  public getGeoLocation(): GeoLocation {\n    return this.geoLocation;\n  }\n\n  /**\n   * Sets the {@link GeoLocation} <code>Object</code> to be used for astronomical calculations.\n   *\n   * @param geoLocation\n   *            The geoLocation to set.\n   * @todo Possibly adjust for horizon elevation. It may be smart to just have the calculator check the GeoLocation\n   *       though it doesn't really belong there.\n   */\n  public setGeoLocation(geoLocation: GeoLocation): void {\n    this.geoLocation = geoLocation;\n    this.date = this.date.setZone(geoLocation.getTimeZone());\n  }\n\n  /**\n   * A method that returns the currently set AstronomicalCalculator.\n   *\n   * @return Returns the astronomicalCalculator.\n   * @see #setAstronomicalCalculator(AstronomicalCalculator)\n   */\n  public getAstronomicalCalculator(): AstronomicalCalculator {\n    return this.astronomicalCalculator;\n  }\n\n  /**\n   * A method to set the {@link AstronomicalCalculator} used for astronomical calculations. The Zmanim package ships\n   * with a number of different implementations of the <code>abstract</code> {@link AstronomicalCalculator} based on\n   * different algorithms, including the default {@link com.kosherjava.zmanim.util.NOAACalculator} based on <a href=\n   * \"https://noaa.gov\">NOAA's</a> implementation of Jean Meeus's algorithms as well as {@link\n   * com.kosherjava.zmanim.util.SunTimesCalculator} based on the <a href = \"https://www.cnmoc.usff.navy.mil/usno/\">US\n   * Naval Observatory's</a> algorithm. This allows easy runtime switching and comparison of different algorithms.\n   *\n   * @param astronomicalCalculator\n   *            The astronomicalCalculator to set.\n   */\n  public setAstronomicalCalculator(astronomicalCalculator: AstronomicalCalculator): void {\n    this.astronomicalCalculator = astronomicalCalculator;\n  }\n\n  /**\n   * returns the Calendar object encapsulated in this class.\n   *\n   * @return Returns the calendar.\n   */\n  public getDate(): DateTime {\n    return this.date;\n  }\n\n  /**\n   * Sets the date object for use in this class.\n   * @param date\n   *            The calendar to set.\n   */\n  public setDate(date: DateTime | Date | string | number): void {\n    if (DateTime.isDateTime(date)) {\n      this.date = date;\n    } else if (date instanceof Date) {\n      this.date = DateTime.fromJSDate(date);\n    } else if (typeof date === 'string') {\n      this.date = DateTime.fromISO(date);\n    } else if (typeof date === 'number') {\n      this.date = DateTime.fromMillis(date);\n    }\n  }\n\n  /**\n   * A method that creates a <a href=\"https://en.wikipedia.org/wiki/Object_copy#Deep_copy\">deep copy</a> of the object.\n   * <b>Note:</b> If the {@link java.util.TimeZone} in the cloned {@link GeoLocation} will\n   * be changed from the original, it is critical that\n   * {@link AstronomicalCalendar#getCalendar()}.\n   * {@link java.util.Calendar#setTimeZone(TimeZone) setTimeZone(TimeZone)} be called in order for the\n   * AstronomicalCalendar to output times in the expected offset after being cloned.\n   *\n   * @see java.lang.Object#clone()\n   */\n  public clone(): AstronomicalCalendar {\n    const clonedCalendar: AstronomicalCalendar = new AstronomicalCalendar();\n    clonedCalendar.setDate(this.date);\n    clonedCalendar.setAstronomicalCalculator(this.astronomicalCalculator);\n    clonedCalendar.setGeoLocation(this.geoLocation);\n\n    return clonedCalendar;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getClassName() {\n    return 'com.kosherjava.zmanim.AstronomicalCalendar';\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { Calendar, IntegerUtils } from '../polyfills/Utils';\nimport { IllegalArgumentException } from '../polyfills/errors';\n\n/**\n * The JewishDate is the base calendar class, that supports maintenance of a {@link java.util.GregorianCalendar}\n * instance along with the corresponding Jewish date. This class can use the standard Java Date and Calendar\n * classes for setting and maintaining the dates, but it does not subclass these classes or use them internally\n * in any calculations. This class also does not have a concept of a time (which the Date class does). Please\n * note that the calendar does not currently support dates prior to 1/1/1 Gregorian. Also keep in mind that the\n * Gregorian calendar started on October 15, 1582, so any calculations prior to that are suspect (at least from\n * a Gregorian perspective). While 1/1/1 Gregorian and forward are technically supported, any calculations prior to <a\n * href=\"https://en.wikipedia.org/wiki/Hillel_II\">Hillel II's (Hakatan's</a>) calendar (4119 in the Jewish Calendar / 359\n * CE Julian as recorded by <a href=\"https://en.wikipedia.org/wiki/Hai_Gaon\">Rav Hai Gaon</a>) would be just an\n * approximation.\n *\n * This open source Java code was written by <a href=\"https://www.facebook.com/avromf\">Avrom Finkelstien</a> from his C++\n * code. It was refactored to fit the KosherJava Zmanim API with simplification of the code, enhancements and some bug\n * fixing.\n *\n * Some of Avrom's original C++ code was translated from <a href=\"https://web.archive.org/web/20120124134148/http://emr.cs.uiuc.edu/~reingold/calendar.C\">C/C++\n * code</a> in <a href=\"http://www.calendarists.com\">Calendrical Calculations</a> by Nachum Dershowitz and Edward M.\n * Reingold, Software-- Practice &amp; Experience, vol. 20, no. 9 (September, 1990), pp. 899- 928. Any method with the mark\n * \"ND+ER\" indicates that the method was taken from this source with minor modifications.\n *\n * If you are looking for a class that implements a Jewish calendar version of the Calendar class, one is available from\n * the <a href=\"http://site.icu-project.org/\" >ICU (International Components for Unicode)</a> project, formerly part of\n * IBM's DeveloperWorks.\n *\n * @see JewishCalendar\n * @see HebrewDateFormatter\n * @see java.util.Date\n * @see java.util.Calendar\n * @author &copy; Avrom Finkelstien 2002\n * @author &copy; Eliyahu Hershfeld 2011 - 2015\n */\nexport class JewishDate {\n  /**\n   * Value of the month field indicating Nissan, the first numeric month of the year in the Jewish calendar. With the\n   * year starting at {@link #TISHREI}, it would actually be the 7th (or 8th in a {@link #isJewishLeapYear() leap\n   * year}) month of the year.\n   */\n  public static readonly NISSAN: number = 1;\n\n  /**\n   * Value of the month field indicating Iyar, the second numeric month of the year in the Jewish calendar. With the\n   * year starting at {@link #TISHREI}, it would actually be the 8th (or 9th in a {@link #isJewishLeapYear() leap\n   * year}) month of the year.\n   */\n  public static readonly IYAR: number = 2;\n\n  /**\n   * Value of the month field indicating Sivan, the third numeric month of the year in the Jewish calendar. With the\n   * year starting at {@link #TISHREI}, it would actually be the 9th (or 10th in a {@link #isJewishLeapYear() leap\n   * year}) month of the year.\n   */\n  public static readonly SIVAN: number = 3;\n\n  /**\n   * Value of the month field indicating Tammuz, the fourth numeric month of the year in the Jewish calendar. With the\n   * year starting at {@link #TISHREI}, it would actually be the 10th (or 11th in a {@link #isJewishLeapYear() leap\n   * year}) month of the year.\n   */\n  public static readonly TAMMUZ: number = 4;\n\n  /**\n   * Value of the month field indicating Av, the fifth numeric month of the year in the Jewish calendar. With the year\n   * starting at {@link #TISHREI}, it would actually be the 11th (or 12th in a {@link #isJewishLeapYear() leap year})\n   * month of the year.\n   */\n  public static readonly AV: number = 5;\n\n  /**\n   * Value of the month field indicating Elul, the sixth numeric month of the year in the Jewish calendar. With the\n   * year starting at {@link #TISHREI}, it would actually be the 12th (or 13th in a {@link #isJewishLeapYear() leap\n   * year}) month of the year.\n   */\n  public static readonly ELUL: number = 6;\n\n  /**\n   * Value of the month field indicating Tishrei, the seventh numeric month of the year in the Jewish calendar. With\n   * the year starting at this month, it would actually be the 1st month of the year.\n   */\n  public static readonly TISHREI: number = 7;\n\n  /**\n   * Value of the month field indicating Cheshvan/marcheshvan, the eighth numeric month of the year in the Jewish\n   * calendar. With the year starting at {@link #TISHREI}, it would actually be the 2nd month of the year.\n   */\n  public static readonly CHESHVAN: number = 8;\n\n  /**\n   * Value of the month field indicating Kislev, the ninth numeric month of the year in the Jewish calendar. With the\n   * year starting at {@link #TISHREI}, it would actually be the 3rd month of the year.\n   */\n  public static readonly KISLEV: number = 9;\n\n  /**\n   * Value of the month field indicating Teves, the tenth numeric month of the year in the Jewish calendar. With the\n   * year starting at {@link #TISHREI}, it would actually be the 4th month of the year.\n   */\n  public static readonly TEVES: number = 10;\n\n  /**\n   * Value of the month field indicating Shevat, the eleventh numeric month of the year in the Jewish calendar. With\n   * the year starting at {@link #TISHREI}, it would actually be the 5th month of the year.\n   */\n  public static readonly SHEVAT: number = 11;\n\n  /**\n   * Value of the month field indicating Adar (or Adar I in a {@link #isJewishLeapYear() leap year}), the twelfth\n   * numeric month of the year in the Jewish calendar. With the year starting at {@link #TISHREI}, it would actually\n   * be the 6th month of the year.\n   */\n  public static readonly ADAR: number = 12;\n\n  /**\n   * Value of the month field indicating Adar II, the leap (intercalary or embolismic) thirteenth (Undecimber) numeric\n   * month of the year added in Jewish {@link #isJewishLeapYear() leap year}). The leap years are years 3, 6, 8, 11,\n   * 14, 17 and 19 of a 19-year cycle. With the year starting at {@link #TISHREI}, it would actually be the 7th month\n   * of the year.\n   */\n  public static readonly ADAR_II: number = 13;\n\n  /**\n   * the Jewish epoch using the RD (Rata Die/Fixed Date or Reingold Dershowitz) day used in Calendrical Calculations.\n   * Day 1 is January 1, 0001 of the Gregorian calendar\n   */\n  private static readonly JEWISH_EPOCH: number = -1373429;\n\n  /** The number  of <em>chalakim</em> (18) in a minute. */\n  private static readonly CHALAKIM_PER_MINUTE: number = 18;\n\n  /** The number  of <em>chalakim</em> (1080) in an hour. */\n  private static readonly CHALAKIM_PER_HOUR: number = 1080;\n\n  /** The number of <em>chalakim</em> (25,920) in a 24-hour day. */\n  private static readonly CHALAKIM_PER_DAY: number = 25920; // 24 * 1080\n\n  /** The number  of <em>chalakim</em> in an average Jewish month. A month has 29 days, 12 hours and 793\n   * <em>chalakim</em> (44 minutes and 3.3 seconds) for a total of 765,433 <em>chalakim</em> */\n  private static readonly CHALAKIM_PER_MONTH: number = 765433; // (29 * 24 + 12) * 1080 + 793\n\n  /**\n   * Days from the beginning of Sunday till <em>molad BaHaRaD</em>. Calculated as 1 day, 5 hours and 204 <em>chalakim</em> =\n   * (24 + 5) * 1080 + 204 = 31524\n   */\n  private static readonly CHALAKIM_MOLAD_TOHU: number = 31524;\n\n  /**\n   * A short year where both {@link #CHESHVAN} and {@link #KISLEV} are 29 days.\n   *\n   * @see #getCheshvanKislevKviah()\n   * @see HebrewDateFormatter#getFormattedKviah(int)\n   */\n  public static readonly CHASERIM: number = 0;\n\n  /**\n   * An ordered year where {@link #CHESHVAN} is 29 days and {@link #KISLEV} is 30 days.\n   *\n   * @see #getCheshvanKislevKviah()\n   * @see HebrewDateFormatter#getFormattedKviah(int)\n   */\n  public static readonly KESIDRAN: number = 1;\n\n  /**\n   * A long year where both {@link #CHESHVAN} and {@link #KISLEV} are 30 days.\n   *\n   * @see #getCheshvanKislevKviah()\n   * @see HebrewDateFormatter#getFormattedKviah(int)\n   */\n  public static readonly SHELAIMIM: number = 2;\n\n  /** the internal Jewish month. */\n  private jewishMonth!: number;\n\n  /** the internal Jewish day. */\n  private jewishDay!: number;\n\n  /** the internal Jewish year. */\n  private jewishYear!: number;\n\n  /** the internal count of <em>molad</em> hours. */\n  private moladHours!: number;\n\n  /** the internal count of <em>molad</em> minutes. */\n  private moladMinutes!: number;\n\n  /** the internal count of <em>molad chalakim</em>. */\n  private moladChalakim!: number;\n\n  /**\n   * Returns the <em>molad</em> hours. Only a JewishDate object populated with {@link #getMolad()},\n   * {@link #setJewishDate(int, int, int, int, int, int)} or {@link #setMoladHours(int)} will have this field\n   * populated. A regular JewishDate object will have this field set to 0.\n   *\n   * @return the <em>molad</em> hours\n   * @see #setMoladHours(int)\n   * @see #getMolad()\n   * @see #setJewishDate(int, int, int, int, int, int)\n   */\n  public getMoladHours(): number {\n    return this.moladHours;\n  }\n\n  /**\n   * Sets the <em>molad</em> hours.\n   *\n   * @param moladHours\n   *            the <em>molad</em> hours to set\n   * @see #getMoladHours()\n   * @see #getMolad()\n   * @see #setJewishDate(int, int, int, int, int, int)\n   *\n   */\n  public setMoladHours(moladHours: number): void {\n    this.moladHours = moladHours;\n  }\n\n  /**\n   * Returns the <em>molad</em> minutes. Only an object populated with {@link #getMolad()},\n   * {@link #setJewishDate(int, int, int, int, int, int)} or or {@link #setMoladMinutes(int)} will have these fields\n   * populated. A regular JewishDate object will have this field set to 0.\n   *\n   * @return the <em>molad</em> minutes\n   * @see #setMoladMinutes(int)\n   * @see #getMolad()\n   * @see #setJewishDate(int, int, int, int, int, int)\n   */\n  public getMoladMinutes(): number {\n    return this.moladMinutes;\n  }\n\n  /**\n   * Sets the <em>molad</em> minutes. The expectation is that the traditional minute-less chalakim will be broken out to\n   * minutes and {@link #setMoladChalakim(int) chalakim/parts}, so 793 (TaShTZaG) parts would have the minutes set to\n   * 44 and chalakim to 1.\n   *\n   * @param moladMinutes\n   *            the molad minutes to set\n   * @see #getMoladMinutes()\n   * @see #setMoladChalakim(int)\n   * @see #getMolad()\n   * @see #setJewishDate(int, int, int, int, int, int)\n   *\n   */\n  public setMoladMinutes(moladMinutes: number): void {\n    this.moladMinutes = moladMinutes;\n  }\n\n  /**\n   * Sets the <em>molad chalakim</em> / parts. The expectation is that the traditional minute-less <em>chalakim</em> will be broken\n   * out to {@link #setMoladMinutes(int) minutes} and chalakim, so 793 (TaShTZaG) parts would have the minutes set to 44 and\n   * <em>chalakim</em> to 1.\n   *\n   * @param moladChalakim\n   *            the <em>molad chalakim</em> / parts to set\n   * @see #getMoladChalakim()\n   * @see #setMoladMinutes(int)\n   * @see #getMolad()\n   * @see #setJewishDate(int, int, int, int, int, int)\n   *\n   */\n  public setMoladChalakim(moladChalakim: number): void {\n    this.moladChalakim = moladChalakim;\n  }\n\n  /**\n   * Returns the <em>molad chalakim</em> / parts. Only an object populated with {@link #getMolad()},\n   * {@link #setJewishDate(int, int, int, int, int, int)} or {@link #setMoladChalakim(int)} will have these fields\n   * populated. A regular JewishDate object will have this field set to 0.\n   *\n   * @return the <em>molad chalakim</em> / parts\n   * @see #setMoladChalakim(int)\n   * @see #getMolad()\n   * @see #setJewishDate(int, int, int, int, int, int)\n   */\n  public getMoladChalakim(): number {\n    return this.moladChalakim;\n  }\n\n  /**\n   * Returns the last day in a gregorian month\n   *\n   * @param month\n   *            the Gregorian month\n   * @return the last day of the Gregorian month\n   */\n  public getLastDayOfGregorianMonth(month: number): number {\n    return JewishDate.getLastDayOfGregorianMonth(month, this.gregorianYear);\n  }\n\n  /**\n   * Returns is the year passed in is a <a href=\n   * \"https://en.wikipedia.org/wiki/Leap_year#Gregorian_calendar\">Gregorian leap year</a>.\n   * @param year the Gregorian year\n   * @return if the year in question is a leap year.\n   */\n  isGregorianLeapYear(year: number): boolean {\n    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n  }\n\n  /**\n   * The month, where 1 == January, 2 == February, etc... Note that this is different than Java's Calendar class\n   * where January == 0.\n   */\n  private gregorianMonth!: number;\n\n  /** The day of the Gregorian month */\n  private gregorianDayOfMonth!: number;\n\n  /** The Gregorian year */\n  private gregorianYear!: number;\n\n  /** 1 == Sunday, 2 == Monday, etc... */\n  private dayOfWeek!: number;\n\n  /** Returns the absolute date (days since January 1, 0001 of the Gregorian calendar).\n   * @see #getAbsDate()\n   * @see #absDateToJewishDate()\n   */\n  private gregorianAbsDate!: number;\n\n  /**\n   * Returns the number of days in a given month in a given month and year.\n   *\n   * @param month\n   *            the month. As with other cases in this class, this is 1-based, not zero-based.\n   * @param year\n   *            the year (only impacts February)\n   * @return the number of days in the month in the given year\n   */\n  private static getLastDayOfGregorianMonth(month: number, year: number): number {\n    switch (month) {\n      case 2:\n        if ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) {\n          return 29;\n        }\n        return 28;\n      case 4:\n      case 6:\n      case 9:\n      case 11:\n        return 30;\n      default:\n        return 31;\n    }\n  }\n\n  /**\n   * Computes the Gregorian date from the absolute date. ND+ER\n   * @param absDate - the absolute date\n   */\n  private absDateToDate(absDate: number): void {\n    let year: number = Math.trunc(absDate / 366); // Search forward year by year from approximate year\n    while (absDate >= JewishDate.gregorianDateToAbsDate(year + 1, 1, 1)) {\n      year++;\n    }\n\n    let month: number = 1; // Search forward month by month from January\n    while (absDate > JewishDate.gregorianDateToAbsDate(year, month, JewishDate.getLastDayOfGregorianMonth(month, year))) {\n      month++;\n    }\n\n    const dayOfMonth: number = absDate - JewishDate.gregorianDateToAbsDate(year, month, 1) + 1;\n    this.setInternalGregorianDate(year, month, dayOfMonth);\n  }\n\n  /**\n   * Returns the absolute date (days since January 1, 0001 of the Gregorian calendar).\n   *\n   * @return the number of days since January 1, 1\n   */\n  public getAbsDate(): number {\n    return this.gregorianAbsDate;\n  }\n\n  /**\n   * Computes the absolute date from a Gregorian date. ND+ER\n   *\n   * @param year\n   *            the Gregorian year\n   * @param month\n   *            the Gregorian month. Unlike the Java Calendar where January has the value of 0,This expects a 1 for\n   *            January\n   * @param dayOfMonth\n   *            the day of the month (1st, 2nd, etc...)\n   * @return the absolute Gregorian day\n   */\n  private static gregorianDateToAbsDate(year: number, month: number, dayOfMonth: number): number {\n    let absDate: number = dayOfMonth;\n    for (let m: number = month - 1; m > 0; m--) {\n      absDate += JewishDate.getLastDayOfGregorianMonth(m, year); // days in prior months of the year\n    }\n    return (absDate // days this year\n      + 365 * (year - 1) // days in previous years ignoring leap days\n      + Math.trunc((year - 1) / 4) // Julian leap days before this year\n      - Math.trunc((year - 1) / 100) // minus prior century years\n      + Math.trunc((year - 1) / 400)); // plus prior years divisible by 400\n  }\n\n  /**\n   * Returns if the year is a Jewish leap year. Years 3, 6, 8, 11, 14, 17 and 19 in the 19-year cycle are leap years.\n   *\n   * @param year\n   *            the Jewish year.\n   * @return true if it is a leap year\n   * @see #isJewishLeapYear()\n   */\n  private static isJewishLeapYear(year: number): boolean {\n    return ((7 * year) + 1) % 19 < 7;\n  }\n\n  /**\n   * Returns if the year the calendar is set to is a Jewish leap year. Years 3, 6, 8, 11, 14, 17 and 19 in the 19-year\n   * cycle are leap years.\n   *\n   * @return true if it is a leap year\n   * @see #isJewishLeapYear(int)\n   */\n  public isJewishLeapYear(): boolean {\n    return JewishDate.isJewishLeapYear(this.getJewishYear());\n  }\n\n  /**\n   * Returns the last month of a given Jewish year. This will be 12 on a non {@link #isJewishLeapYear(int) leap year}\n   * or 13 on a leap year.\n   *\n   * @param year\n   *            the Jewish year.\n   * @return 12 on a non leap year or 13 on a leap year\n   * @see #isJewishLeapYear(int)\n   */\n  private static getLastMonthOfJewishYear(year: number): number {\n    return JewishDate.isJewishLeapYear(year) ? JewishDate.ADAR_II : JewishDate.ADAR;\n  }\n\n  /**\n   * Returns the number of days elapsed from the Sunday prior to the start of the Jewish calendar to the mean\n   * conjunction of Tishri of the Jewish year.\n   *\n   * @param year\n   *            the Jewish year\n   * @return the number of days elapsed from prior to the <em>molad Tohu BaHaRaD</em> (Be = Monday, <em>Ha</em> = 5\n   *         hours and <em>RaD</em> = 204 <em>chalakim</em> / parts) prior to the start of the Jewish calendar, to\n   *         the mean conjunction of Tishri of the Jewish year. BeHaRaD is 23:11:20 on Sunday night(5 hours 204/1080\n   *         <em>chalakim</em> after sunset on Sunday evening).\n   */\n  public static getJewishCalendarElapsedDays(year: number): number {\n    const chalakimSince: number = JewishDate.getChalakimSinceMoladTohu(year, JewishDate.TISHREI);\n    const moladDay: number = Math.trunc(chalakimSince / JewishDate.CHALAKIM_PER_DAY);\n    const moladParts: number = Math.trunc(chalakimSince - moladDay * JewishDate.CHALAKIM_PER_DAY);\n    // delay Rosh Hashana for the 4 dechiyos\n    return JewishDate.addDechiyos(year, moladDay, moladParts);\n  }\n\n  /**\n   * Adds the 4 dechiyos for <em>molad</em> Tishrei. These are:\n   * <ol>\n   * <li><em>Lo ADU Rosh</em> - Rosh Hashana can't fall on a Sunday, Wednesday or Friday. If the <em>molad</em> fell on one\n   * of these days, Rosh Hashana is delayed to the following day.</li>\n   * <li><em>Molad Zaken</em> - If the <em>molad</em> of Tishrei falls after 12 noon, Rosh Hashana is delayed to the following\n   * day. If the following day is <em>ADU</em>, it will be delayed an additional day.</li>\n   * <li><em>GaTRaD</em> - If on a non leap year the <em>molad</em> of Tishrei falls on a Tuesday (Ga) on or after 9 hours\n   * (<em>T</em>) and (<em>RaD</em> 204 <em>chalakim</em> it is delayed till Thursday (one day delay, plus one day for\n   * <em>Lo ADU Rosh</em>)</li>\n   * <li><em>BeTuTaKPaT</em> - if the year following a leap year falls on a Monday (<em>Be</em>) on or after 15 hours\n   * (<em>Tu</em>) and 589 <em>chalakim</em> (<em>TaKPaT</em>) it is delayed till Tuesday</li>\n   * </ol>\n   *\n   * @param year the year\n   * @param moladDay the <em>molad</em> day\n   * @param moladParts the <em>molad</em> parts\n   * @return the number of elapsed days in the JewishCalendar adjusted for the 4 dechiyos.\n   */\n  private static addDechiyos(year: number, moladDay: number, moladParts: number): number {\n    let roshHashanaDay: number = moladDay; // if no dechiyos\n    // delay Rosh Hashana for the dechiyos of the Molad - new moon 1 - Molad Zaken, 2- GaTRaD 3- BeTuTaKPaT\n    if ((moladParts >= 19440) // Dechiya of Molad Zaken - molad is >= midday (18 hours * 1080 chalakim)\n      || (((moladDay % 7) === 2) // start Dechiya of GaTRaD - Ga = is a Tuesday\n        && (moladParts >= 9924) // TRaD = 9 hours, 204 parts or later (9 * 1080 + 204)\n        && !JewishDate.isJewishLeapYear(year)) // of a non-leap year - end Dechiya of GaTRaD\n      || (((moladDay % 7) === 1) // start Dechiya of BeTuTaKPaT - Be = is on a Monday\n        && (moladParts >= 16789) // TUTaKPaT part of BeTuTaKPaT = 15 hours, 589 parts or later (15 * 1080 + 589)\n        && (JewishDate.isJewishLeapYear(year - 1)))) { // in a year following a leap year - end Dechiya of BeTuTaKPaT\n      roshHashanaDay += 1; // Then postpone Rosh HaShanah one day\n    }\n    // start 4th Dechiya - Lo ADU Rosh - Rosh Hashana can't occur on A- sunday, D- Wednesday, U - Friday\n    if (((roshHashanaDay % 7) === 0) // If Rosh HaShanah would occur on Sunday,\n      || ((roshHashanaDay % 7) === 3) // or Wednesday,\n      || ((roshHashanaDay % 7) === 5)) { // or Friday - end 4th Dechiya - Lo ADU Rosh\n      roshHashanaDay++; // Then postpone it one (more) day\n    }\n    return roshHashanaDay;\n  }\n\n  /**\n   * Returns the number of <em>chalakim</em> (parts - 1080 to the hour) from the original hypothetical <em>Molad Tohu</em>\n   * to the year and month passed in.\n   *\n   * @param year\n   *            the Jewish year\n   * @param month\n   *            the Jewish month the Jewish month, with the month numbers starting from Nissan. Use the JewishDate\n   *            constants such as {@link JewishDate#TISHREI}.\n   * @return the number of <em>chalakim</em> (parts - 1080 to the hour) from the original hypothetical <em>Molad Tohu</em>\n   */\n  private static getChalakimSinceMoladTohu(year: number, month: number): number {\n    // Jewish lunar month = 29 days, 12 hours and 793 chalakim\n    // chalakim since Molad Tohu BeHaRaD - 1 day, 5 hours and 204 chalakim\n    const monthOfYear: number = JewishDate.getJewishMonthOfYear(year, month);\n    const monthsElapsed: number = (235 * Math.trunc((year - 1) / 19)) // Months in complete 19-year lunar (Metonic) cycles so far\n      + (12 * ((year - 1) % 19)) // Regular months in this cycle\n      + Math.trunc((7 * ((year - 1) % 19) + 1) / 19) // Leap months this cycle\n      + (monthOfYear - 1); // add elapsed months till the start of the molad of the month\n    // return chalakim prior to BeHaRaD + number of chalakim since\n    return JewishDate.CHALAKIM_MOLAD_TOHU + (JewishDate.CHALAKIM_PER_MONTH * monthsElapsed);\n  }\n\n  /**\n   * Returns the number of <em>chalakim</em> (parts - 1080 to the hour) from the original hypothetical <em>Molad Tohu</em>\n   * to the Jewish year and month that this Object is set to.\n   *\n   * @return the number of <em>chalakim</em> (parts - 1080 to the hour) from the original hypothetical <em>Molad Tohu</em>\n   */\n  public getChalakimSinceMoladTohu(): number {\n    return JewishDate.getChalakimSinceMoladTohu(this.jewishYear, this.jewishMonth);\n  }\n\n  /**\n   * Converts the {@link JewishDate#NISSAN} based constants used by this class to numeric month starting from\n   * {@link JewishDate#TISHREI}. This is required for <em>molad</em> calculations.\n   *\n   * @param year\n   *            The Jewish year\n   * @param month\n   *            The Jewish Month\n   * @return the Jewish month of the year starting with Tishrei\n   */\n  private static getJewishMonthOfYear(year: number, month: number): number {\n    const isLeapYear: boolean = JewishDate.isJewishLeapYear(year);\n    return ((month + (isLeapYear ? 6 : 5)) % (isLeapYear ? 13 : 12)) + 1;\n  }\n\n  /**\n   * Validates the components of a Jewish date for validity. It will throw an {@link IllegalArgumentException} if the Jewish\n   * date is earlier than 18 Teves, 3761 (1/1/1 Gregorian), a month &lt; 1 or &gt; 12 (or 13 on a {@link #isJewishLeapYear(int)\n   * leap year}), the day of month is &lt; 1 or &gt; 30, an hour &lt; 0 or &gt; 23, a minute &lt; 0 or &gt; 59 or\n   * <em>chalakim</em> &lt; 0 or &gt; 17. For larger a larger number of <em>chalakim</em> such as 793 (TaShTzaG) break the\n   * <em>chalakim</em> into minutes (18 <em>chalakim</em> per minutes, so it would be 44 minutes and 1 <em>chelek</em> in the\n   * case of 793 / <em>TaShTzaG</em>).\n   *\n   * @param year\n   *            the Jewish year to validate. It will reject any year <= 3761 (lower than the year 1 Gregorian).\n   * @param month\n   *            the Jewish month to validate. It will reject a month < 1 or > 12 (or 13 on a leap year) .\n   * @param dayOfMonth\n   *            the day of the Jewish month to validate. It will reject any value < 1 or > 30 TODO: check calling\n   *            methods to see if there is any reason that the class can validate that 30 is invalid for some months.\n   * @param hours\n   *            the hours (for <em>molad</em> calculations). It will reject an hour &lt; 0 or &gt; 23\n   * @param minutes\n   *            the minutes (for <em>molad</em> calculations). It will reject a minute &lt; 0 or &gt; 59\n   * @param chalakim\n   *            the <em>chalakim</em> / parts (for <em>molad</em> calculations). It will reject a <em>chalakim</em> &lt; 0 or &gt;\n   *            17. For larger numbers such as 793 (<em>TaShTzaG</em>) break the <em>chalakim</em> into minutes (18 <em>chalakim</em>\n   *            per minutes, so it would be 44  minutes and 1 <em>chelek</em> in the case of 793 / <em>TaShTzaG</em>)\n   *\n   * @throws IllegalArgumentException\n   *             if a Jewish date earlier than 18 Teves, 3761 (1/1/1 Gregorian), a month &lt; 1 or &gt; 12 (or 13 on a leap year),\n   *             the day of month is &lt; 1 or &gt; 30, an hour &lt; 0 or &gt; 23, a minute &lt; 0 or &gt; 59 or <em>chalakim</em>\n   *             &lt; 0 or &gt; 17. For larger a larger number of <em>chalakim</em> such as 793 (<em>TaShTzaG</em>) break the\n   *             </em>chalakim</em> into minutes (18 <em>chalakim</em> per minutes, so it would be 44 minutes and 1 <em>chelek</em>\n   *             in the case of 793 (<em>TaShTzaG</em>).\n   */\n  private static validateJewishDate(year: number, month: number, dayOfMonth: number, hours: number, minutes: number, chalakim: number): void {\n    if (month < JewishDate.NISSAN || month > JewishDate.getLastMonthOfJewishYear(year)) {\n      throw new IllegalArgumentException(`The Jewish month has to be between 1 and 12 (or 13 on a leap year). ${month} is invalid for the year ${year}.`);\n    }\n    if (dayOfMonth < 1 || dayOfMonth > 30) {\n      throw new IllegalArgumentException(`The Jewish day of month can't be < 1 or > 30. ${dayOfMonth} is invalid.`);\n    }\n    // reject dates prior to 18 Teves, 3761 (1/1/1 AD). This restriction can be relaxed if the date coding is\n    // changed/corrected\n    if ((year < 3761) || (year === 3761 && (month >= JewishDate.TISHREI && month < JewishDate.TEVES))\n      || (year === 3761 && month === JewishDate.TEVES && dayOfMonth < 18)) {\n      throw new IllegalArgumentException(`A Jewish date earlier than 18 Teves, 3761 (1/1/1 Gregorian) can't be set. ${year}, ${month}, ${dayOfMonth} is invalid.`);\n    }\n    if (hours < 0 || hours > 23) {\n      throw new IllegalArgumentException(`Hours < 0 or > 23 can't be set. ${hours} is invalid.`);\n    }\n\n    if (minutes < 0 || minutes > 59) {\n      throw new IllegalArgumentException(`Minutes < 0 or > 59 can't be set. ${minutes} is invalid.`);\n    }\n\n    if (chalakim < 0 || chalakim > 17) {\n      throw new IllegalArgumentException(`Chalakim/parts < 0 or > 17 can't be set. ${chalakim} is invalid. For larger numbers such as 793 (TaShTzaG) break the chalakim into minutes (18 chalakim per minutes, so it would be 44 minutes and 1 chelek in the case of 793 (TaShTzaG)`);\n    }\n  }\n\n  /**\n   * Validates the components of a Gregorian date for validity. It will throw an {@link IllegalArgumentException} if a\n   * year of < 1, a month < 0 or > 11 or a day of month < 1 is passed in.\n   *\n   * @param year\n   *            the Gregorian year to validate. It will reject any year < 1.\n   * @param month\n   *            the Gregorian month number to validate. It will enforce that the month is between 0 - 11 like a\n   *            {@link GregorianCalendar}, where {@link Calendar#JANUARY} has a value of 0.\n   * @param dayOfMonth\n   *            the day of the Gregorian month to validate. It will reject any value < 1, but will allow values > 31\n   *            since calling methods will simply set it to the maximum for that month. TODO: check calling methods to\n   *            see if there is any reason that the class needs days > the maximum.\n   * @throws IllegalArgumentException\n   *             if a year of < 1, a month < 0 or > 11 or a day of month < 1 is passed in\n   * @see #validateGregorianYear(int)\n   * @see #validateGregorianMonth(int)\n   * @see #validateGregorianDayOfMonth(int)\n   */\n  private static validateGregorianDate(year: number, month: number, dayOfMonth: number): void {\n    JewishDate.validateGregorianMonth(month);\n    JewishDate.validateGregorianDayOfMonth(dayOfMonth);\n    JewishDate.validateGregorianYear(year);\n  }\n\n  /**\n   * Validates a Gregorian month for validity.\n   *\n   * @param month\n   *            the Gregorian month number to validate. It will enforce that the month is between 0 - 11 like a\n   *            {@link GregorianCalendar}, where {@link Calendar#JANUARY} has a value of 0.\n   */\n  private static validateGregorianMonth(month: number): void {\n    if (month > 11 || month < 0) {\n      throw new IllegalArgumentException(`The Gregorian month has to be between 0 - 11. ${month} is invalid.`);\n    }\n  }\n\n  /**\n   * Validates a Gregorian day of month for validity.\n   *\n   * @param dayOfMonth\n   *            the day of the Gregorian month to validate. It will reject any value < 1, but will allow values > 31\n   *            since calling methods will simply set it to the maximum for that month. TODO: check calling methods to\n   *            see if there is any reason that the class needs days > the maximum.\n   */\n  private static validateGregorianDayOfMonth(dayOfMonth: number): void {\n    if (dayOfMonth <= 0) {\n      throw new IllegalArgumentException(`The day of month can't be less than 1. ${dayOfMonth} is invalid.`);\n    }\n  }\n\n  /**\n   * Validates a Gregorian year for validity.\n   *\n   * @param year\n   *            the Gregorian year to validate. It will reject any year < 1.\n   */\n  private static validateGregorianYear(year: number): void {\n    if (year < 1) {\n      throw new IllegalArgumentException(`Years < 1 can't be calculated. ${year} is invalid.`);\n    }\n  }\n\n  /**\n   * Returns the number of days for a given Jewish year. ND+ER\n   *\n   * @param year\n   *            the Jewish year\n   * @return the number of days for a given Jewish year.\n   * @see #isCheshvanLong()\n   * @see #isKislevShort()\n   */\n  public static getDaysInJewishYear(year: number): number {\n    return JewishDate.getJewishCalendarElapsedDays(year + 1) - JewishDate.getJewishCalendarElapsedDays(year);\n  }\n\n  /**\n   * Returns the number of days for the current year that the calendar is set to.\n   *\n   * @return the number of days for the Object's current Jewish year.\n   * @see #isCheshvanLong()\n   * @see #isKislevShort()\n   * @see #isJewishLeapYear()\n   */\n  public getDaysInJewishYear(): number {\n    return JewishDate.getDaysInJewishYear(this.getJewishYear());\n  }\n\n  /**\n   * Returns if Cheshvan is long in a given Jewish year. The method name isLong is done since in a Kesidran (ordered)\n   * year Cheshvan is short. ND+ER\n   *\n   * @param year\n   *            the year\n   * @return true if Cheshvan is long in Jewish year.\n   * @see #isCheshvanLong()\n   * @see #getCheshvanKislevKviah()\n   */\n  private static isCheshvanLong(year: number): boolean {\n    return JewishDate.getDaysInJewishYear(year) % 10 === 5;\n  }\n\n  /**\n   * Returns if Cheshvan is long (30 days VS 29 days) for the current year that the calendar is set to. The method\n   * name isLong is done since in a Kesidran (ordered) year Cheshvan is short.\n   *\n   * @return true if Cheshvan is long for the current year that the calendar is set to\n   * @see #isCheshvanLong()\n   */\n  public isCheshvanLong(): boolean {\n    return JewishDate.isCheshvanLong(this.getJewishYear());\n  }\n\n  /**\n   * Returns if Kislev is short (29 days VS 30 days) in a given Jewish year. The method name isShort is done since in\n   * a Kesidran (ordered) year Kislev is long. ND+ER\n   *\n   * @param year\n   *            the Jewish year\n   * @return true if Kislev is short for the given Jewish year.\n   * @see #isKislevShort()\n   * @see #getCheshvanKislevKviah()\n   */\n  private static isKislevShort(year: number): boolean {\n    return JewishDate.getDaysInJewishYear(year) % 10 === 3;\n  }\n\n  /**\n   * Returns if the Kislev is short for the year that this class is set to. The method name isShort is done since in a\n   * Kesidran (ordered) year Kislev is long.\n   *\n   * @return true if Kislev is short for the year that this class is set to\n   */\n  public isKislevShort(): boolean {\n    return JewishDate.isKislevShort(this.getJewishYear());\n  }\n\n  /**\n   * Returns the Cheshvan and Kislev kviah (whether a Jewish year is short, regular or long). It will return\n   * {@link #SHELAIMIM} if both cheshvan and kislev are 30 days, {@link #KESIDRAN} if Cheshvan is 29 days and Kislev\n   * is 30 days and {@link #CHASERIM} if both are 29 days.\n   *\n   * @return {@link #SHELAIMIM} if both cheshvan and kislev are 30 days, {@link #KESIDRAN} if Cheshvan is 29 days and\n   *         Kislev is 30 days and {@link #CHASERIM} if both are 29 days.\n   * @see #isCheshvanLong()\n   * @see #isKislevShort()\n   */\n  public getCheshvanKislevKviah(): number {\n    if (this.isCheshvanLong() && !this.isKislevShort()) {\n      return JewishDate.SHELAIMIM;\n    } else if (!this.isCheshvanLong() && this.isKislevShort()) {\n      return JewishDate.CHASERIM;\n    }\n    return JewishDate.KESIDRAN;\n  }\n\n  /**\n   * Returns the number of days of a Jewish month for a given month and year.\n   *\n   * @param month\n   *            the Jewish month\n   * @param year\n   *            the Jewish Year\n   * @return the number of days for a given Jewish month\n   */\n  private static getDaysInJewishMonth(month: number, year: number): number {\n    const shortMonths = [\n      JewishDate.IYAR,\n      JewishDate.TAMMUZ,\n      JewishDate.ELUL,\n      JewishDate.ADAR_II,\n    ];\n    if (shortMonths.includes(month)\n      || ((month === JewishDate.CHESHVAN) && !(JewishDate.isCheshvanLong(year)))\n      || ((month === JewishDate.KISLEV) && JewishDate.isKislevShort(year)) || (month === JewishDate.TEVES)\n      || ((month === JewishDate.ADAR) && !(JewishDate.isJewishLeapYear(year)))) {\n      return 29;\n    }\n    return 30;\n  }\n\n  /**\n   * Returns the number of days of the Jewish month that the calendar is currently set to.\n   *\n   * @return the number of days for the Jewish month that the calendar is currently set to.\n   */\n  public getDaysInJewishMonth(): number {\n    return JewishDate.getDaysInJewishMonth(this.getJewishMonth(), this.getJewishYear());\n  }\n\n  /**\n   * Computes the Jewish date from the absolute date.\n   */\n  private absDateToJewishDate(): void {\n    // Approximation from below\n    this.jewishYear = Math.trunc((this.gregorianAbsDate - JewishDate.JEWISH_EPOCH) / 366);\n    // Search forward for year from the approximation\n    while (this.gregorianAbsDate >= JewishDate.jewishDateToAbsDate(this.jewishYear + 1, JewishDate.TISHREI, 1)) {\n      this.jewishYear++;\n    }\n    // Search forward for month from either Tishri or Nissan.\n    if (this.gregorianAbsDate < JewishDate.jewishDateToAbsDate(this.jewishYear, JewishDate.NISSAN, 1)) {\n      this.jewishMonth = JewishDate.TISHREI; // Start at Tishri\n    } else {\n      this.jewishMonth = JewishDate.NISSAN; // Start at Nissan\n    }\n    while (this.gregorianAbsDate > JewishDate.jewishDateToAbsDate(this.jewishYear, this.jewishMonth, this.getDaysInJewishMonth())) {\n      this.jewishMonth++;\n    }\n    // Calculate the day by subtraction\n    this.jewishDay = this.gregorianAbsDate - JewishDate.jewishDateToAbsDate(this.jewishYear, this.jewishMonth, 1) + 1;\n  }\n\n  /**\n   * Returns the absolute date of Jewish date. ND+ER\n   *\n   * @param year\n   *            the Jewish year. The year can't be negative\n   * @param month\n   *            the Jewish month starting with Nissan. Nissan expects a value of 1 etc. until Adar with a value of 12.\n   *            For a leap year, 13 will be the expected value for Adar II. Use the constants {@link JewishDate#NISSAN}\n   *            etc.\n   * @param dayOfMonth\n   *            the Jewish day of month. valid values are 1-30. If the day of month is set to 30 for a month that only\n   *            has 29 days, the day will be set as 29.\n   * @return the absolute date of the Jewish date.\n   */\n  private static jewishDateToAbsDate(year: number, month: number, dayOfMonth: number): number {\n    const elapsed: number = JewishDate.getDaysSinceStartOfJewishYear(year, month, dayOfMonth);\n    // add elapsed days this year + Days in prior years + Days elapsed before absolute year 1\n    return elapsed + JewishDate.getJewishCalendarElapsedDays(year) + JewishDate.JEWISH_EPOCH;\n  }\n\n  /**\n   * Returns the <em>molad</em> for a given year and month. Returns a JewishDate {@link Object} set to the date of the <em>molad</em>\n   * with the {@link #getMoladHours() hours}, {@link #getMoladMinutes() minutes} and {@link #getMoladChalakim()\n   * chalakim} set. In the current implementation, it sets the <em>molad</em> time based on a midnight date rollover. This\n   * means that Rosh Chodesh Adar II, 5771 with a <em>molad</em> of 7 <em>chalakim</em> past midnight on Shabbos 29 Adar I / March 5,\n   * 2011 12:00 AM and 7 chalakim, will have the following values: hours: 0, minutes: 0, Chalakim: 7.\n   *\n   * @return a JewishDate {@link Object} set to the date of the <em>molad</em> with the {@link #getMoladHours() hours},\n   *         {@link #getMoladMinutes() minutes} and {@link #getMoladChalakim() <em>chalakim</em>} set.\n   */\n  public getMolad(): JewishDate {\n    const moladDate: JewishDate = new JewishDate(this.getChalakimSinceMoladTohu());\n    if (moladDate.getMoladHours() >= 6) {\n      moladDate.forward(Calendar.DATE, 1);\n    }\n    moladDate.setMoladHours((moladDate.getMoladHours() + 18) % 24);\n    return moladDate;\n  }\n\n  /**\n   * Returns the number of days from the Jewish epoch from the number of chalakim from the epoch passed in.\n   *\n   * @param chalakim\n   *            the number of <em>chalakim</em> since the beginning of Sunday prior to BaHaRaD\n   * @return the number of days from the Jewish epoch\n   */\n  private static moladToAbsDate(chalakim: number): number {\n    return Math.trunc(chalakim / JewishDate.CHALAKIM_PER_DAY) + JewishDate.JEWISH_EPOCH;\n  }\n\n  /**\n   * Constructor that creates a JewishDate based on a <em>molad</em> passed in. The <em>molad</em> would be the number of\n   * <em>chalakim</em> / parts starting at the beginning of Sunday prior to the <em>Molad Tohu BeHaRaD</em> (</em>Be</em> =\n   * Monday, <em>Ha</em> = 5 hours and <em>Rad</em> = 204 <em>chalakim</em> / parts) - prior to the start of the Jewish\n   * calendar. <em>BeHaRaD</em> is 23:11:20 on Sunday night(5 hours 204/1080  </em>chalakim</em> after sunset on Sunday evening).\n   *\n   * @param molad the number of <em>chalakim</em> since the beginning of Sunday prior to BaHaRaD\n   */\n\n  /*\n      public JewishDate(molad: number) {\n          this.absDateToDate(JewishDate.moladToAbsDate(molad));\n          // long chalakimSince = getChalakimSinceMoladTohu(year, JewishDate.TISHREI);// tishrei\n          const conjunctionDay: number = Math.trunc(molad / JewishDate.CHALAKIM_PER_DAY);\n          const conjunctionParts: number = Math.trunc(molad - conjunctionDay * JewishDate.CHALAKIM_PER_DAY);\n          this.setMoladTime(conjunctionParts);\n      }\n  */\n\n  /**\n   * Sets the <em>molad</em> time (hours minutes and chalakim) based on the number of <em>chalakim</em> since the start of the day.\n   *\n   * @param chalakim\n   *            the number of <em>chalakim</em> since the start of the day.\n   */\n  private setMoladTime(chalakim: number): void {\n    let adjustedChalakim: number = chalakim;\n    this.setMoladHours(Math.trunc(adjustedChalakim / JewishDate.CHALAKIM_PER_HOUR));\n    adjustedChalakim = adjustedChalakim - (this.getMoladHours() * JewishDate.CHALAKIM_PER_HOUR);\n    this.setMoladMinutes(Math.trunc(adjustedChalakim / JewishDate.CHALAKIM_PER_MINUTE));\n    this.setMoladChalakim(adjustedChalakim - this.moladMinutes * JewishDate.CHALAKIM_PER_MINUTE);\n  }\n\n  /**\n   * returns the number of days from Rosh Hashana of the date passed in, to the full date passed in.\n   *\n   * @return the number of days\n   */\n  public getDaysSinceStartOfJewishYear(): number {\n    return JewishDate.getDaysSinceStartOfJewishYear(this.getJewishYear(), this.getJewishMonth(), this.getJewishDayOfMonth());\n  }\n\n  /**\n   * returns the number of days from Rosh Hashana of the date passed in, to the full date passed in.\n   *\n   * @param year\n   *            the Jewish year\n   * @param month\n   *            the Jewish month\n   * @param dayOfMonth\n   *            the day in the Jewish month\n   * @return the number of days\n   */\n  private static getDaysSinceStartOfJewishYear(year: number, month: number, dayOfMonth: number): number {\n    let elapsedDays: number = dayOfMonth;\n    // Before Tishrei (from Nissan to Tishrei), add days in prior months\n    if (month < JewishDate.TISHREI) {\n      // this year before and after Nissan.\n      for (let m: number = JewishDate.TISHREI; m <= JewishDate.getLastMonthOfJewishYear(year); m++) {\n        elapsedDays += JewishDate.getDaysInJewishMonth(m, year);\n      }\n      for (let m: number = JewishDate.NISSAN; m < month; m++) {\n        elapsedDays += JewishDate.getDaysInJewishMonth(m, year);\n      }\n    } else { // Add days in prior months this year\n      for (let m: number = JewishDate.TISHREI; m < month; m++) {\n        elapsedDays += JewishDate.getDaysInJewishMonth(m, year);\n      }\n    }\n    return elapsedDays;\n  }\n\n  constructor(jewishYear: number, jewishMonth: number, jewishDayOfMonth: number)\n  constructor(molad: number)\n  constructor(date: Date)\n  constructor(date: DateTime)\n  constructor()\n  constructor(jewishYearOrDateTimeOrDateOrMolad?: number | Date | DateTime, jewishMonth?: number, jewishDayOfMonth?: number) {\n    if (!jewishYearOrDateTimeOrDateOrMolad) {\n      this.resetDate();\n    } else if (jewishMonth) {\n      this.setJewishDate(jewishYearOrDateTimeOrDateOrMolad as number, jewishMonth, jewishDayOfMonth!);\n    } else if (jewishYearOrDateTimeOrDateOrMolad instanceof Date) {\n      this.setDate(DateTime.fromJSDate(jewishYearOrDateTimeOrDateOrMolad as Date));\n    } else if (DateTime.isDateTime(jewishYearOrDateTimeOrDateOrMolad)) {\n      this.setDate(jewishYearOrDateTimeOrDateOrMolad as DateTime);\n    } else if (typeof jewishYearOrDateTimeOrDateOrMolad === 'number') {\n      const molad = jewishYearOrDateTimeOrDateOrMolad as number;\n      this.absDateToDate(JewishDate.moladToAbsDate(molad));\n      // long chalakimSince = getChalakimSinceMoladTohu(year, JewishDate.TISHREI);// tishrei\n      const conjunctionDay: number = Math.trunc(molad / JewishDate.CHALAKIM_PER_DAY);\n      const conjunctionParts: number = Math.trunc(molad - conjunctionDay * JewishDate.CHALAKIM_PER_DAY);\n      this.setMoladTime(conjunctionParts);\n    }\n  }\n\n  /**\n   * Creates a Jewish date based on a Jewish year, month and day of month.\n   *\n   * @param jewishYear\n   *            the Jewish year\n   * @param jewishMonth\n   *            the Jewish month. The method expects a 1 for Nissan ... 12 for Adar and 13 for Adar II. Use the\n   *            constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a leap year Adar II) to avoid any\n   *            confusion.\n   * @param jewishDayOfMonth\n   *            the Jewish day of month. If 30 is passed in for a month with only 29 days (for example {@link #IYAR},\n   *            or {@link #KISLEV} in a year that {@link #isKislevShort()}), the 29th (last valid date of the month)\n   *            will be set\n   * @throws IllegalArgumentException\n   *             if the day of month is &lt; 1 or &gt; 30, or a year of &lt; 0 is passed in.\n   */\n  /*\n      public JewishDate(jewishYear: number, jewishMonth: number, jewishDayOfMonth: number) {\n          this.setJewishDate(jewishYear, jewishMonth, jewishDayOfMonth);\n      }\n  */\n\n  /**\n   * Default constructor will set a default date to the current system date.\n   */\n  /*\n      public JewishDate() {\n          this.resetDate();\n      }\n  */\n\n  /**\n   * A constructor that initializes the date to the {@link java.util.Date Date} parameter.\n   *\n   * @param date\n   *            the <code>Date</code> to set the calendar to\n   * @throws IllegalArgumentException\n   *             if the date would fall prior to the January 1, 1 AD\n   */\n  /*\n      public JewishDate(date: Date) {\n          this.setDate(date);\n      }\n  */\n\n  /**\n   * A constructor that initializes the date to the {@link java.util.Calendar Calendar}parameter.\n   *\n   * @param calendar\n   *            the <code>Calendar</code> to set the calendar to\n   * @throws IllegalArgumentException\n   *             if the {@link Calendar#ERA} is {@link GregorianCalendar#BC}\n   */\n\n  /*\n      public JewishDate(calendar: GregorianCalendar) {\n          this.setDate(calendar);\n      }\n  */\n\n  /**\n   * Sets the date based on a {@link java.util.Calendar Calendar} object. Modifies the Jewish date as well.\n   *\n   * @param date\n   *            the <code>Calendar</code> to set the calendar to\n   * @throws IllegalArgumentException\n   *             if the {@link Calendar#ERA} is {@link GregorianCalendar#BC}\n   */\n  public setDate(date: DateTime): void {\n    if (date.year < 1) {\n      throw new IllegalArgumentException(`Dates with a BC era are not supported. The year ${date.year} is invalid.`);\n    }\n\n    this.gregorianMonth = date.month;\n    this.gregorianDayOfMonth = date.day;\n    this.gregorianYear = date.year;\n    this.gregorianAbsDate = JewishDate.gregorianDateToAbsDate(this.gregorianYear, this.gregorianMonth, this.gregorianDayOfMonth); // init the date\n    this.absDateToJewishDate();\n\n    this.dayOfWeek = Math.abs(this.gregorianAbsDate % 7) + 1; // set day of week\n  }\n\n  /**\n   * Sets the date based on a {@link java.util.Date Date} object. Modifies the Jewish date as well.\n   *\n   * @param date\n   *            the <code>Date</code> to set the calendar to\n   * @throws IllegalArgumentException\n   *             if the date would fall prior to the year 1 AD\n   */\n\n  /*\n      public setDate(date: Date): void {\n          const cal: GregorianCalendar = new GregorianCalendar();\n          cal.setTime(date);\n          this.setDate(cal);\n      }\n  */\n\n  /**\n   * Sets the Gregorian Date, and updates the Jewish date accordingly. Like the Java Calendar A value of 0 is expected\n   * for January.\n   *\n   * @param year\n   *            the Gregorian year\n   * @param month\n   *            the Gregorian month. Like the Java Calendar, this class expects 0 for January\n   * @param dayOfMonth\n   *            the Gregorian day of month. If this is &gt; the number of days in the month/year, the last valid date of\n   *            the month will be set\n   * @throws IllegalArgumentException\n   *             if a year of &lt; 1, a month &lt; 0 or &gt; 11 or a day of month &lt; 1 is passed in\n   */\n  public setGregorianDate(year: number, month: number, dayOfMonth: number): void {\n    JewishDate.validateGregorianDate(year, month, dayOfMonth);\n    this.setInternalGregorianDate(year, month + 1, dayOfMonth);\n  }\n\n  /**\n   * Sets the hidden internal representation of the Gregorian date , and updates the Jewish date accordingly. While\n   * public getters and setters have 0 based months matching the Java Calendar classes, This class internally\n   * represents the Gregorian month starting at 1. When this is called it will not adjust the month to match the Java\n   * Calendar classes.\n   *\n   * @param year - the year\n   * @param month - the month\n   * @param dayOfMonth - the day of month\n   */\n  private setInternalGregorianDate(year: number, month: number, dayOfMonth: number): void {\n    // make sure date is a valid date for the given month, if not, set to last day of month\n    if (dayOfMonth > JewishDate.getLastDayOfGregorianMonth(month, year)) {\n      dayOfMonth = JewishDate.getLastDayOfGregorianMonth(month, year);\n    }\n    // init month, date, year\n    this.gregorianMonth = month;\n    this.gregorianDayOfMonth = dayOfMonth;\n    this.gregorianYear = year;\n\n    this.gregorianAbsDate = JewishDate.gregorianDateToAbsDate(this.gregorianYear, this.gregorianMonth, this.gregorianDayOfMonth); // init date\n    this.absDateToJewishDate();\n\n    this.dayOfWeek = Math.abs(this.gregorianAbsDate % 7) + 1; // set day of week\n  }\n\n  /**\n   * Sets the Jewish Date and updates the Gregorian date accordingly.\n   *\n   * @param year\n   *            the Jewish year. The year can't be negative\n   * @param month\n   *            the Jewish month starting with Nissan. A value of 1 is expected for Nissan ... 12 for Adar and 13 for\n   *            Adar II. Use the constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a leap year Adar\n   *            II) to avoid any confusion.\n   * @param dayOfMonth\n   *            the Jewish day of month. valid values are 1-30. If the day of month is set to 30 for a month that only\n   *            has 29 days, the day will be set as 29.\n   * @throws IllegalArgumentException\n   *             if a Jewish date earlier than 18 Teves, 3761 (1/1/1 Gregorian), a month &lt; 1 or &gt; 12 (or 13 on a\n   *             leap year) or the day of month is &lt; 1 or &gt; 30 is passed in\n   */\n\n  /*\n      public setJewishDate(year: number, month: number, dayOfMonth: number): void {\n          this.setJewishDate(year, month, dayOfMonth, 0, 0, 0);\n      }\n  */\n\n  /**\n   * Sets the Jewish Date and updates the Gregorian date accordingly.\n   *\n   * @param year\n   *            the Jewish year. The year can't be negative\n   * @param month\n   *            the Jewish month starting with Nissan. A value of 1 is expected for Nissan ... 12 for Adar and 13 for\n   *            Adar II. Use the constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a leap year Adar\n   *            II) to avoid any confusion.\n   * @param dayOfMonth\n   *            the Jewish day of month. valid values are 1-30. If the day of month is set to 30 for a month that only\n   *            has 29 days, the day will be set as 29.\n   *\n   * @param hours\n   *            the hour of the day. Used for <em>molad</em> calculations\n   * @param minutes\n   *            the minutes. Used for <em>molad</em> calculations\n   * @param chalakim\n   *            the <em>chalakim</em> / parts. Used for <em>molad</em> calculations. The <em>chalakim</em> should not\n   *            exceed 17. Minutes should be used for larger numbers.\n   *\n   * @throws IllegalArgumentException\n   *             if a Jewish date earlier than 18 Teves, 3761 (1/1/1 Gregorian), a month &lt; 1 or &gt; 12 (or 13 on a leap year), the day\n   *             of month is &lt; 1 or &gt; 30, an hour &lt; 0 or &gt; 23, a minute &lt; 0 &gt; 59 or <em>chalakim</em> &lt; 0 &gt; 17. For\n   *             larger a larger number of <em>chalakim</em> such as 793 (<em>TaShTzaG</em>) break the <em>chalakim</em> into minutes (18\n   *             <em>chalakim</em> per minutes, so it would be 44 minutes and 1 <em>chelek</em> in the case of 793 (<em>TaShTzaG</em>).\n   */\n  public setJewishDate(year: number, month: number, dayOfMonth: number, hours: number, minutes: number, chalakim: number): void;\n  public setJewishDate(year: number, month: number, dayOfMonth: number): void;\n  public setJewishDate(year: number, month: number, dayOfMonth: number, hours: number = 0, minutes: number = 0, chalakim: number = 0): void {\n    JewishDate.validateJewishDate(year, month, dayOfMonth, hours, minutes, chalakim);\n\n    // if 30 is passed for a month that only has 29 days (for example by rolling the month from a month that had 30\n    // days to a month that only has 29) set the date to 29th\n    if (dayOfMonth > JewishDate.getDaysInJewishMonth(month, year)) {\n      dayOfMonth = JewishDate.getDaysInJewishMonth(month, year);\n    }\n\n    this.jewishMonth = month;\n    this.jewishDay = dayOfMonth;\n    this.jewishYear = year;\n    this.moladHours = hours;\n    this.moladMinutes = minutes;\n    this.moladChalakim = chalakim;\n\n    this.gregorianAbsDate = JewishDate.jewishDateToAbsDate(this.jewishYear, this.jewishMonth, this.jewishDay); // reset Gregorian date\n    this.absDateToDate(this.gregorianAbsDate);\n\n    this.dayOfWeek = Math.abs(this.gregorianAbsDate % 7) + 1; // reset day of week\n  }\n\n  /**\n   * Returns this object's date as a {@link java.util.Calendar} object.\n   *\n   * @return The {@link java.util.Calendar}\n   */\n  public getDate(): DateTime {\n    return DateTime.fromObject({\n      year: this.gregorianYear,\n      month: this.gregorianMonth,\n      day: this.gregorianDayOfMonth,\n    });\n  }\n\n  /**\n   * Resets this date to the current system date.\n   */\n  public resetDate(): void {\n    this.setDate(DateTime.local());\n  }\n\n  /**\n   * Returns a string containing the Jewish date in the form, \"day Month, year\" e.g. \"21 Shevat, 5729\". For more\n   * complex formatting, use the formatter classes.\n   *\n   * This functionality is duplicated from {@link HebrewDateFormatter} to avoid circular dependencies.\n   *\n   * @return the Jewish date in the form \"day Month, year\" e.g. \"21 Shevat, 5729\"\n   * @see HebrewDateFormatter#format(JewishDate)\n   */\n  public toString(): string {\n    const transliteratedMonths: string[] = ['Nissan', 'Iyar', 'Sivan', 'Tammuz', 'Av', 'Elul', 'Tishrei', 'Cheshvan',\n      'Kislev', 'Teves', 'Shevat', 'Adar', 'Adar II', 'Adar I'];\n\n    let formattedMonth: string;\n    if (this.isJewishLeapYear() && this.jewishMonth === JewishDate.ADAR) {\n      formattedMonth = transliteratedMonths[13]; // return Adar I, not Adar in a leap year\n    } else {\n      formattedMonth = transliteratedMonths[this.jewishMonth - 1];\n    }\n\n    return `${this.getJewishDayOfMonth()} ${formattedMonth}, ${this.getJewishYear()}`;\n  }\n\n  /**\n   * Rolls the date, month or year forward by the amount passed in. It modifies both the Gregorian and Jewish dates\n   * accordingly. If manipulation beyond the fields supported here is required, use the {@link Calendar} class\n   * {@link Calendar#add(int, int)} or {@link Calendar#roll(int, int)} methods in the following manner.\n   *\n   * <pre>\n   * <code>\n   *     Calendar cal = jewishDate.getTime(); // get a java.util.Calendar representation of the JewishDate\n   *     cal.add(Calendar.MONTH, 3); // add 3 Gregorian months\n   *     jewishDate.setDate(cal); // set the updated calendar back to this class\n   * </code>\n   * </pre>\n   *\n   * @param field the calendar field to be forwarded. The must be {@link Calendar#DATE}, {@link Calendar#MONTH} or {@link Calendar#YEAR}\n   * @param amount the positive amount to move forward\n   * @throws IllegalArgumentException if the field is anything besides {@link Calendar#DATE}, {@link Calendar#MONTH}\n   * or {@link Calendar#YEAR} or if the amount is less than 1\n   *\n   * @see #back()\n   * @see Calendar#add(int, int)\n   * @see Calendar#roll(int, int)\n   */\n  public forward(field: number, amount: number): void {\n    if (field !== Calendar.DATE && field !== Calendar.MONTH && field !== Calendar.YEAR) {\n      throw new IllegalArgumentException('Unsupported field was passed to Forward. Only Calendar.DATE, Calendar.MONTH or Calendar.YEAR are supported.');\n    }\n    if (amount < 1) {\n      throw new IllegalArgumentException('JewishDate.forward() does not support amounts less than 1. See JewishDate.back()');\n    }\n    if (field === Calendar.DATE) {\n      // Change Gregorian date\n      for (let i = 0; i < amount; i++) {\n        if (this.gregorianDayOfMonth === JewishDate.getLastDayOfGregorianMonth(this.gregorianMonth, this.gregorianYear)) {\n          this.gregorianDayOfMonth = 1;\n\n          // if last day of year\n          if (this.gregorianMonth === 12) {\n            this.gregorianYear++;\n            this.gregorianMonth = 1;\n          } else {\n            this.gregorianMonth++;\n          }\n        } else {\n          // if not last day of month\n          this.gregorianDayOfMonth++;\n        }\n\n        // Change the Jewish Date\n        if (this.jewishDay === this.getDaysInJewishMonth()) {\n          // if it last day of elul (i.e. last day of Jewish year)\n          if (this.jewishMonth === JewishDate.ELUL) {\n            this.jewishYear++;\n            this.jewishMonth++;\n            this.jewishDay = 1;\n          } else if (this.jewishMonth === JewishDate.getLastMonthOfJewishYear(this.jewishYear)) {\n            // if it is the last day of Adar, or Adar II as case may be\n            this.jewishMonth = JewishDate.NISSAN;\n            this.jewishDay = 1;\n          } else {\n            this.jewishMonth++;\n            this.jewishDay = 1;\n          }\n        } else {\n          // if not last date of month\n          this.jewishDay++;\n        }\n\n        if (this.dayOfWeek === Calendar.SATURDAY) {\n          // if last day of week, loop back to Sunday\n          this.dayOfWeek = 1;\n        } else {\n          this.dayOfWeek++;\n        }\n\n        // increment the absolute date\n        this.gregorianAbsDate++;\n      }\n    } else if (field === Calendar.MONTH) {\n      this.forwardJewishMonth(amount);\n    } else if (field === Calendar.YEAR) {\n      this.setJewishYear(this.getJewishYear() + amount);\n    }\n  }\n\n  /**\n   * Forward the Jewish date by the number of months passed in.\n   * FIXME: Deal with forwarding a date such as 30 Nissan by a month. 30 Iyar does not exist. This should be dealt with similar to\n   * the way that the Java Calendar behaves (not that simple since there is a difference between add() or roll().\n   *\n   * @throws IllegalArgumentException if the amount is less than 1\n   * @param amount the number of months to roll the month forward\n   */\n  private forwardJewishMonth(amount: number): void {\n    if (amount < 1) {\n      throw new IllegalArgumentException('the amount of months to forward has to be greater than zero.');\n    }\n    for (let i = 0; i < amount; i++) {\n      if (this.getJewishMonth() === JewishDate.ELUL) {\n        this.setJewishMonth(JewishDate.TISHREI);\n        this.setJewishYear(this.getJewishYear() + 1);\n      } else if ((!this.isJewishLeapYear() && this.getJewishMonth() === JewishDate.ADAR)\n        || (this.isJewishLeapYear() && this.getJewishMonth() === JewishDate.ADAR_II)) {\n        this.setJewishMonth(JewishDate.NISSAN);\n      } else {\n        this.setJewishMonth(this.getJewishMonth() + 1);\n      }\n    }\n  }\n\n  /**\n   * Rolls the date back by 1 day. It modifies both the Gregorian and Jewish dates accordingly. The API does not\n   * currently offer the ability to forward more than one day at a time, or to forward by month or year. If such\n   * manipulation is required use the {@link Calendar} class {@link Calendar#add(int, int)} or\n   * {@link Calendar#roll(int, int)} methods in the following manner.\n   *\n   * <pre>\n   * <code>\n   *     Calendar cal = jewishDate.getTime(); // get a java.util.Calendar representation of the JewishDate\n   *     cal.add(Calendar.MONTH, -3); // subtract 3 Gregorian months\n   *     jewishDate.setDate(cal); // set the updated calendar back to this class\n   * </code>\n   * </pre>\n   *\n   * @see #back()\n   * @see Calendar#add(int, int)\n   * @see Calendar#roll(int, int)\n   */\n  public back(): void {\n    // Change Gregorian date\n    if (this.gregorianDayOfMonth === 1) { // if first day of month\n      if (this.gregorianMonth === 1) { // if first day of year\n        this.gregorianMonth = 12;\n        this.gregorianYear--;\n      } else {\n        this.gregorianMonth--;\n      }\n      // change to last day of previous month\n      this.gregorianDayOfMonth = JewishDate.getLastDayOfGregorianMonth(this.gregorianMonth, this.gregorianYear);\n    } else {\n      this.gregorianDayOfMonth--;\n    }\n    // change Jewish date\n    if (this.jewishDay === 1) { // if first day of the Jewish month\n      if (this.jewishMonth === JewishDate.NISSAN) {\n        this.jewishMonth = JewishDate.getLastMonthOfJewishYear(this.jewishYear);\n      } else if (this.jewishMonth === JewishDate.TISHREI) { // if Rosh Hashana\n        this.jewishYear--;\n        this.jewishMonth--;\n      } else {\n        this.jewishMonth--;\n      }\n      this.jewishDay = this.getDaysInJewishMonth();\n    } else {\n      this.jewishDay--;\n    }\n\n    if (this.dayOfWeek === Calendar.SUNDAY) { // if first day of week, loop back to Saturday\n      this.dayOfWeek = 7;\n    } else {\n      this.dayOfWeek--;\n    }\n    this.gregorianAbsDate--; // change the absolute date\n  }\n\n  /**\n   * Indicates whether some other object is \"equal to\" this one.\n   * @see Object#equals(Object)\n   */\n  public equals(object: object): boolean {\n    if (this === object as JewishDate) {\n      return true;\n    }\n    if (!(object instanceof JewishDate)) {\n      return false;\n    }\n    const jewishDate: JewishDate = object as JewishDate;\n    return this.gregorianAbsDate === jewishDate.getAbsDate();\n  }\n\n  /**\n   * Compares two dates as per the compareTo() method in the Comparable interface. Returns a value less than 0 if this\n   * date is \"less than\" (before) the date, greater than 0 if this date is \"greater than\" (after) the date, or 0 if\n   * they are equal.\n   */\n  public compareTo(jewishDate: JewishDate): number {\n    return IntegerUtils.compare(this.gregorianAbsDate, jewishDate.getAbsDate());\n  }\n\n  /**\n   * Returns the Gregorian month (between 0-11).\n   *\n   * @return the Gregorian month (between 0-11). Like the java.util.Calendar, months are 0 based.\n   */\n  public getGregorianMonth(): number {\n    return this.gregorianMonth - 1;\n  }\n\n  /**\n   * Returns the Gregorian day of the month.\n   *\n   * @return the Gregorian day of the mont\n   */\n  public getGregorianDayOfMonth(): number {\n    return this.gregorianDayOfMonth;\n  }\n\n  /**\n   * Returns the Gregorian year.\n   *\n   * @return the Gregorian year\n   */\n  public getGregorianYear(): number {\n    return this.gregorianYear;\n  }\n\n  /**\n   * Returns the Jewish month 1-12 (or 13 years in a leap year). The month count starts with 1 for Nissan and goes to\n   * 13 for Adar II\n   *\n   * @return the Jewish month from 1 to 12 (or 13 years in a leap year). The month count starts with 1 for Nissan and\n   *         goes to 13 for Adar II\n   */\n  public getJewishMonth(): number {\n    return this.jewishMonth;\n  }\n\n  /**\n   * Returns the Jewish day of month.\n   *\n   * @return the Jewish day of the month\n   */\n  public getJewishDayOfMonth(): number {\n    return this.jewishDay;\n  }\n\n  /**\n   * Returns the Jewish year.\n   *\n   * @return the Jewish year\n   */\n  public getJewishYear(): number {\n    return this.jewishYear;\n  }\n\n  /**\n   * Returns the day of the week as a number between 1-7.\n   *\n   * @return the day of the week as a number between 1-7.\n   */\n  public getDayOfWeek(): number {\n    return this.dayOfWeek;\n  }\n\n  /**\n   * Sets the Gregorian month.\n   *\n   * @param month\n   *            the Gregorian month\n   *\n   * @throws IllegalArgumentException\n   *             if a month &lt; 0 or &gt; 11 is passed in\n   */\n  public setGregorianMonth(month: number): void {\n    JewishDate.validateGregorianMonth(month);\n    this.setInternalGregorianDate(this.gregorianYear, month + 1, this.gregorianDayOfMonth);\n  }\n\n  /**\n   * sets the Gregorian year.\n   *\n   * @param year\n   *            the Gregorian year.\n   * @throws IllegalArgumentException\n   *             if a year of &lt; 1 is passed in\n   */\n  public setGregorianYear(year: number): void {\n    JewishDate.validateGregorianYear(year);\n    this.setInternalGregorianDate(year, this.gregorianMonth, this.gregorianDayOfMonth);\n  }\n\n  /**\n   * sets the Gregorian Day of month.\n   *\n   * @param dayOfMonth\n   *            the Gregorian Day of month.\n   * @throws IllegalArgumentException\n   *             if the day of month of &lt; 1 is passed in\n   */\n  public setGregorianDayOfMonth(dayOfMonth: number): void {\n    JewishDate.validateGregorianDayOfMonth(dayOfMonth);\n    this.setInternalGregorianDate(this.gregorianYear, this.gregorianMonth, dayOfMonth);\n  }\n\n  /**\n   * sets the Jewish month.\n   *\n   * @param month\n   *            the Jewish month from 1 to 12 (or 13 years in a leap year). The month count starts with 1 for Nissan\n   *            and goes to 13 for Adar II\n   * @throws IllegalArgumentException\n   *             if a month &lt; 1 or &gt; 12 (or 13 on a leap year) is passed in\n   */\n  public setJewishMonth(month: number): void {\n    this.setJewishDate(this.jewishYear, month, this.jewishDay);\n  }\n\n  /**\n   * sets the Jewish year.\n   *\n   * @param year\n   *            the Jewish year\n   * @throws IllegalArgumentException\n   *             if a year of &lt; 3761 is passed in. The same will happen if the year is 3761 and the month and day\n   *             previously set are &lt; 18 Teves (prior to Jan 1, 1 AD)\n   */\n  public setJewishYear(year: number): void {\n    this.setJewishDate(year, this.jewishMonth, this.jewishDay);\n  }\n\n  /**\n   * sets the Jewish day of month.\n   *\n   * @param dayOfMonth\n   *            the Jewish day of month\n   * @throws IllegalArgumentException\n   *             if the day of month is &lt; 1 or &gt; 30 is passed in\n   */\n  public setJewishDayOfMonth(dayOfMonth: number): void {\n    this.setJewishDate(this.jewishYear, this.jewishMonth, dayOfMonth);\n  }\n\n  /**\n   * A method that creates a <a href=\"https://en.wikipedia.org/wiki/Object_copy#Deep_copy\">deep copy</a> of the object.\n   *\n   * @see Object#clone()\n   */\n  public clone(): JewishDate {\n    const clone: JewishDate = new JewishDate(this.jewishYear, this.jewishMonth, this.jewishDay);\n    clone.setMoladHours(this.moladHours);\n    clone.setMoladMinutes(this.moladMinutes);\n    clone.setMoladChalakim(this.moladChalakim);\n\n    return clone;\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { GeoLocation } from '../util/GeoLocation';\nimport { Daf } from './Daf';\nimport { JewishDate } from './JewishDate';\nimport { Calendar } from '../polyfills/Utils';\nimport { UnsupportedError } from '../polyfills/errors';\n\nconst { MONDAY, TUESDAY, THURSDAY, FRIDAY, SATURDAY } = Calendar;\n\n/**\n * List of <em>parshiyos</em> or special <em>Shabasos</em>. {@link #NONE} indicates a week without a <em>parsha</em>, while the enum for\n * the <em>parsha</em> of {@link #VZOS_HABERACHA} exists for consistency, but is not currently used. The special <em>Shabasos</em> of\n * Shekalim, Zachor, Para, Hachodesh, as well as Shabbos Shuva, Shira, Hagadol, Chazon and Nachamu are also represented in this collection\n * of <em>parshiyos</em>.\n * @see #getSpecialShabbos()\n * @see #getParsha()\n */\nexport enum Parsha {\n  /** NONE - A week without any <em>parsha</em> such as <em>Shabbos Chol Hamoed</em> */\n  NONE,\n  BERESHIS, NOACH, LECH_LECHA, VAYERA, CHAYEI_SARA, TOLDOS, VAYETZEI,\n  VAYISHLACH, VAYESHEV, MIKETZ, VAYIGASH, VAYECHI, SHEMOS, VAERA, BO,\n  BESHALACH, YISRO, MISHPATIM, TERUMAH, TETZAVEH, KI_SISA, VAYAKHEL,\n  PEKUDEI, VAYIKRA, TZAV, SHMINI, TAZRIA, METZORA, ACHREI_MOS, KEDOSHIM,\n  EMOR, BEHAR, BECHUKOSAI, BAMIDBAR, NASSO, BEHAALOSCHA, SHLACH, KORACH,\n  CHUKAS, BALAK, PINCHAS, MATOS, MASEI, DEVARIM, VAESCHANAN, EIKEV,\n  REEH, SHOFTIM, KI_SEITZEI, KI_SAVO, NITZAVIM, VAYEILECH, HAAZINU,\n  VZOS_HABERACHA,\n  /** The double parsha of Vayakhel &amp; Peudei */\n  VAYAKHEL_PEKUDEI,\n  /** The double <em>parsha</em> of Tazria &amp; Metzora */\n  TAZRIA_METZORA,\n  /** The double <em>parsha</em> of Achrei Mos &amp; Kedoshim */\n  ACHREI_MOS_KEDOSHIM,\n  /** The double <em>parsha</em> of Behar &amp; Bechukosai */\n  BEHAR_BECHUKOSAI,\n  /** The double <em>parsha</em> of Chukas &amp; Balak */\n  CHUKAS_BALAK,\n  /** The double <em>parsha</em> of Matos &amp; Masei */\n  MATOS_MASEI,\n  /** The double <em>parsha</em> of Nitzavim &amp; Vayelech */\n  NITZAVIM_VAYEILECH,\n  /** The special <em>parsha</em> of Shekalim */\n  SHKALIM,\n  /** The special <em>parsha</em> of Zachor */\n  ZACHOR,\n  /** The special <em>parsha</em> of Para */\n  PARA,\n  /** The special <em>parsha</em> of Hachodesh */\n  HACHODESH,\n  /** <em>Shabbos</em> Shuva */\n  SHUVA,\n  /** <em>Shabbos</em> Shira */\n  SHIRA,\n  /** <em>Shabbos</em> Hagadol */\n  HAGADOL,\n  /** <em>Shabbos</em> Chazon */\n  CHAZON,\n  /** <em>Shabbos</em> Nachamu */\n  NACHAMU,\n}\n\n/**\n * The JewishCalendar extends the JewishDate class and adds calendar methods.\n *\n * This open source Java code was originally ported by <a href=\"https://www.facebook.com/avromf\">Avrom Finkelstien</a>\n * from his C++ code. It was refactored to fit the KosherJava Zmanim API with simplification of the code, enhancements\n * and some bug fixing. The class allows setting whether the holiday and parsha scheme follows the Israel scheme or outside Israel\n * scheme. The default is the outside Israel scheme.\n * The parsha code was ported by Y. Paritcher from his <a href=\"https://github.com/yparitcher/libzmanim\">libzmanim</a> code.\n *\n * TODO: Some do not belong in this class, but here is a partial list of what should still be implemented in some form:\n * <ol>\n * <li>Mishna yomis etc</li>\n * </ol>\n *\n * @see java.util.Date\n * @see java.util.Calendar\n * @author &copy; Y. Paritcher 2019\n * @author &copy; Avrom Finkelstien 2002\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\n */\nexport class JewishCalendar extends JewishDate {\n  /** The 14th day of Nisan, the day before Pesach (Passover). */\n  public static readonly EREV_PESACH: number = 0;\n\n  /** The holiday of Pesach (Passover) on the 15th (and 16th out of Israel) day of Nisan. */\n  public static readonly PESACH: number = 1;\n\n  /** Chol Hamoed (interim days) of Pesach (Passover) */\n  public static readonly CHOL_HAMOED_PESACH: number = 2;\n\n  /** Pesach Sheni, the 14th day of Iyar, a minor holiday. */\n  public static readonly PESACH_SHENI: number = 3;\n\n  /** Erev Shavuos (the day before Shavuos), the 5th of Sivan */\n  public static readonly EREV_SHAVUOS: number = 4;\n\n  /** Shavuos (Pentecost), the 6th of Sivan */\n  public static readonly SHAVUOS: number = 5;\n\n  /** The fast of the 17th day of Tammuz */\n  public static readonly SEVENTEEN_OF_TAMMUZ: number = 6;\n\n  /** The fast of the 9th of Av */\n  public static readonly TISHA_BEAV: number = 7;\n\n  /** The 15th day of Av, a minor holiday */\n  public static readonly TU_BEAV: number = 8;\n\n  /** Erev Rosh Hashana (the day before Rosh Hashana), the 29th of Elul */\n  public static readonly EREV_ROSH_HASHANA: number = 9;\n\n  /** Rosh Hashana, the first and second days of Tishrei. */\n  public static readonly ROSH_HASHANA: number = 10;\n\n  /** The fast of Gedalyah, the 3rd of Tishrei. */\n  public static readonly FAST_OF_GEDALYAH: number = 11;\n\n  /** The 9th day of Tishrei, the day before of Yom Kippur. */\n  public static readonly EREV_YOM_KIPPUR: number = 12;\n\n  /** The holiday of Yom Kippur, the 10th day of Tishrei */\n  public static readonly YOM_KIPPUR: number = 13;\n\n  /** The 14th day of Tishrei, the day before of Succos/Sukkos (Tabernacles). */\n  public static readonly EREV_SUCCOS: number = 14;\n\n  /** The holiday of Succos/Sukkos (Tabernacles), the 15th (and 16th out of Israel) day of Tishrei */\n  public static readonly SUCCOS: number = 15;\n\n  /** Chol Hamoed (interim days) of Succos/Sukkos (Tabernacles) */\n  public static readonly CHOL_HAMOED_SUCCOS: number = 16;\n\n  /** Hoshana Rabba, the 7th day of Succos/Sukkos that occurs on the 21st of Tishrei. */\n  public static readonly HOSHANA_RABBA: number = 17;\n\n  /** Shmini Atzeres, the 8th day of Succos/Sukkos is an independent holiday that occurs on the 22nd of Tishrei. */\n  public static readonly SHEMINI_ATZERES: number = 18;\n\n  /** Simchas Torah, the 9th day of Succos/Sukkos, or the second day of Shmini Atzeres that is celebrated\n   * {@link #getInIsrael() out of Israel} on the 23rd of Tishrei.\n   */\n  public static readonly SIMCHAS_TORAH: number = 19;\n\n  // public static final int EREV_CHANUKAH = 20;// probably remove this\n\n  /** The holiday of Chanukah. 8 days starting on the 25th day Kislev. */\n  public static readonly CHANUKAH: number = 21;\n\n  /** The fast of the 10th day of Teves. */\n  public static readonly TENTH_OF_TEVES: number = 22;\n\n  /** Tu Bishvat on the 15th day of Shevat, a minor holiday. */\n  public static readonly TU_BESHVAT: number = 23;\n\n  /** The fast of Esther, usually on the 13th day of Adar (or Adar II on leap years). It is earlier on some years. */\n  public static readonly FAST_OF_ESTHER: number = 24;\n\n  /** The holiday of Purim on the 14th day of Adar (or Adar II on leap years). */\n  public static readonly PURIM: number = 25;\n\n  /** The holiday of Shushan Purim on the 15th day of Adar (or Adar II on leap years). */\n  public static readonly SHUSHAN_PURIM: number = 26;\n\n  /** The holiday of Purim Katan on the 14th day of Adar I on a leap year when Purim is on Adar II, a minor holiday. */\n  public static readonly PURIM_KATAN: number = 27;\n\n  /**\n   * Rosh Chodesh, the new moon on the first day of the Jewish month, and the 30th day of the previous month in the\n   * case of a month with 30 days.\n   */\n  public static readonly ROSH_CHODESH: number = 28;\n\n  /** Yom HaShoah, Holocaust Remembrance Day, usually held on the 27th of Nisan. If it falls on a Friday, it is moved\n   * to the 26th, and if it falls on a Sunday it is moved to the 28th. A {@link #isUseModernHolidays() modern holiday}.\n   */\n  public static readonly YOM_HASHOAH: number = 29;\n\n  /**\n   * Yom HaZikaron, Israeli Memorial Day, held a day before Yom Ha'atzmaut.  A {@link #isUseModernHolidays() modern holiday}.\n   */\n  public static readonly YOM_HAZIKARON: number = 30;\n\n  /** Yom Ha'atzmaut, Israel Independence Day, the 5th of Iyar, but if it occurs on a Friday or Saturday, the holiday is\n   * moved back to Thursday, the 3rd of 4th of Iyar, and if it falls on a Monday, it is moved forward to Tuesday the\n   * 6th of Iyar.  A {@link #isUseModernHolidays() modern holiday}. */\n  public static readonly YOM_HAATZMAUT: number = 31;\n\n  /**\n   * Yom Yerushalayim or Jerusalem Day, on 28 Iyar. A {@link #isUseModernHolidays() modern holiday}.\n   */\n  public static readonly YOM_YERUSHALAYIM: number = 32;\n\n  /** The 33rd day of the Omer, the 18th of Iyar, a minor holiday. */\n  public static readonly LAG_BAOMER: number = 33;\n\n  /** The holiday of Purim Katan on the 15th day of Adar I on a leap year when Purim is on Adar II, a minor holiday. */\n  public static readonly SHUSHAN_PURIM_KATAN: number = 34;\n\n  /** The day following the last day of Pesach, Shavuos and Sukkos. */\n  public static readonly ISRU_CHAG: number = 35;\n\n  /**\n   * The day before <em>Rosh Chodesh</em> (moved to Thursday if <em>Rosh Chodesh</em> is on a Friday or <em>Shabbos</em>) in most months.\n   * This constant is not actively in use.\n   * @see #isYomKippurKatan()\n   */\n  public static readonly YOM_KIPPUR_KATAN: number = 36;\n\n  /**\n   * The Monday, Thursday and Monday after the first <em>Shabbos</em> after <em>Rosh Chodesh Cheshvan</em> and <em>Iyar</em> are BeHab\n   * days. This constant is not actively in use.\n   * @see #isBeHaB()\n   */\n  public static readonly BEHAB: number = 37;\n\n  /**\n   * Is the calendar set to Israel, where some holidays have different rules.\n   * @see #getInIsrael()\n   * @see #setInIsrael(boolean)\n   */\n  private inIsrael: boolean = false;\n\n  /**\n   * Is the calendar set to have Purim <em>demukafim</em>, where Purim is celebrated on Shushan Purim.\n   * @see #getIsMukafChoma()\n   * @see #setIsMukafChoma(boolean)\n   */\n  private isMukafChoma: boolean = false;\n\n  /**\n   * Is the calendar set to use modern Israeli holidays such as Yom Haatzmaut.\n   * @see #isUseModernHolidays()\n   * @see #setUseModernHolidays(boolean)\n   */\n  private useModernHolidays: boolean = false;\n\n  /**\n   * An array of <em>parshiyos</em> in the 17 possible combinations.\n   */\n  public static readonly parshalist: Parsha[][] = [\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NONE, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS_BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NONE, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS_BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.ACHREI_MOS, Parsha.NONE, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS, Parsha.MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.ACHREI_MOS, Parsha.NONE, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS, Parsha.MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NONE, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS_BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS, Parsha.MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\n  ];\n\n  /**\n   * Is this calendar set to return modern Israeli national holidays. By default, this value is false. The holidays\n   * are: <em>Yom HaShoah</em>, <em>Yom Hazikaron</em>, <em>Yom Ha'atzmaut</em> and <em>Yom Yerushalayim</em>.\n   *\n   * @return the useModernHolidays true if set to return modern Israeli national holidays\n   *\n   * @see #setUseModernHolidays(boolean)\n   */\n  public isUseModernHolidays(): boolean {\n    return this.useModernHolidays;\n  }\n\n  /**\n   * Sets the calendar to return modern Israeli national holidays. By default, this value is false. The holidays are:\n   * <em>Yom HaShoah</em>, <em>Yom Hazikaron</em>, <em>Yom Ha'atzmaut</em> and <em>Yom Yerushalayim</em>.\n   *\n   * @param useModernHolidays\n   *            the useModernHolidays to set\n   *\n   * @see #isUseModernHolidays()\n   */\n  public setUseModernHolidays(useModernHolidays: boolean): void {\n    this.useModernHolidays = useModernHolidays;\n  }\n\n  /**\n   * Default constructor will set a default date to the current system date.\n   */\n  /*\n      public JewishCalendar() {\n          super();\n      }\n  */\n\n  /**\n   * A constructor that initializes the date to the {@link java.util.Date Date} parameter.\n   *\n   * @param date\n   *            the <code>Date</code> to set the calendar to\n   */\n  /*\n      public JewishCalendar(date: Date) {\n          super(date);\n      }\n  */\n\n  /**\n   * A constructor that initializes the date to the {@link java.util.Calendar Calendar} parameter.\n   *\n   * @param calendar\n   *            the <code>Calendar</code> to set the calendar to\n   */\n  /*\n      public JewishCalendar(calendar: GregorianCalendar) {\n          super(calendar);\n      }\n  */\n\n  /**\n   * Creates a Jewish date based on a Jewish year, month and day of month.\n   *\n   * @param jewishYear\n   *            the Jewish year\n   * @param jewishMonth\n   *            the Jewish month. The method expects a 1 for <em>Nissan</em> ... 12 for <em>Adar</em> and 13 for\n   *            <em>Adar II</em>. Use the constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a\n   *            leap year Adar II) to avoid any confusion.\n   * @param jewishDayOfMonth\n   *            the Jewish day of month. If 30 is passed in for a month with only 29 days (for example {@link #IYAR},\n   *            or {@link #KISLEV} in a year that {@link #isKislevShort()}), the 29th (last valid date of the month)\n   *            will be set.\n   * @param inIsrael\n   *            whether in Israel. This affects <em>Yom Tov</em> calculations\n   */\n  /*\n      public JewishCalendar(jewishYear: number, jewishMonth: number, jewishDayOfMonth: number, inIsrael: boolean) {\n          super(jewishYear, jewishMonth, jewishDayOfMonth, inIsrael);\n          setInIsrael(inIsrael);\n      }\n  */\n\n  /**\n   * Creates a Jewish date based on a Jewish date and whether in Israel\n   *\n   * @param jewishYear\n   *            the Jewish year\n   * @param jewishMonth\n   *            the Jewish month. The method expects a 1 for Nissan ... 12 for Adar and 13 for Adar II. Use the\n   *            constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a leap year Adar II) to avoid any\n   *            confusion.\n   * @param jewishDayOfMonth\n   *            the Jewish day of month. If 30 is passed in for a month with only 29 days (for example {@link #IYAR},\n   *            or {@link #KISLEV} in a year that {@link #isKislevShort()}), the 29th (last valid date of the month)\n   *            will be set\n   * @param inIsrael\n   *            whether in Israel. This affects Yom Tov calculations\n   */\n  constructor(jewishYear: number, jewishMonth: number, jewishDayOfMonth: number, inIsrael?: boolean)\n  constructor(date: Date)\n  constructor(date: DateTime)\n  constructor()\n  constructor(jewishYearOrDateTimeOrDate?: number | Date | DateTime, jewishMonth?: number, jewishDayOfMonth?: number, inIsrael?: boolean) {\n    // @ts-ignore\n    super(jewishYearOrDateTimeOrDate, jewishMonth, jewishDayOfMonth);\n    if (inIsrael) this.setInIsrael(inIsrael);\n  }\n\n  /**\n   * Sets whether to use Israel holiday scheme or not. Default is false.\n   *\n   * @param inIsrael\n   *            set to true for calculations for Israel\n   *\n   * @see #getInIsrael()\n   */\n  public setInIsrael(inIsrael: boolean): void {\n    this.inIsrael = inIsrael;\n  }\n\n  /**\n   * Gets whether Israel holiday scheme is used or not. The default (if not set) is false.\n   *\n   * @return if the if the calendar is set to Israel\n   *\n   * @see #setInIsrael(boolean)\n   */\n  public getInIsrael(): boolean {\n    return this.inIsrael;\n  }\n\n  /**\n   * Returns if the city is set as a city surrounded by a wall from the time of Yehoshua, and Shushan Purim\n   * should be celebrated as opposed to regular Purim.\n   * @return if the city is set as a city surrounded by a wall from the time of Yehoshua, and Shushan Purim\n   *         should be celebrated as opposed to regular Purim.\n   * @see #setIsMukafChoma(boolean)\n   */\n  public getIsMukafChoma(): boolean {\n    return this.isMukafChoma;\n  }\n\n  /**\n   * Sets if the location is surrounded by a wall from the time of Yehoshua, and Shushan Purim should be\n   * celebrated as opposed to regular Purim. This should be set for Yerushalayim, Shushan and other cities.\n   * @param isMukafChoma is the city surrounded by a wall from the time of Yehoshua.\n   *\n   * @see #getIsMukafChoma()\n   */\n  public setIsMukafChoma(isMukafChoma: boolean): void {\n    this.isMukafChoma = isMukafChoma;\n  }\n\n  /**\n   * <a href=\"https://en.wikipedia.org/wiki/Birkat_Hachama\">Birkas Hachamah</a> is recited every 28 years based on\n   * Tekufas Shmulel (Julian years) that a year is 365.25 days. The <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a>\n   * in <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=14278&amp;st=&amp;pgnum=323\">Hilchos Kiddush Hachodesh 9:3</a> states that\n   * tekufas Nisan of year 1 was 7 days + 9 hours before molad Nisan. This is calculated as every 10,227 days (28 * 365.25).\n   * @return true for a day that Birkas Hachamah is recited.\n   */\n  public isBirkasHachamah(): boolean {\n    // elapsed days since molad ToHu\n    let elapsedDays: number = JewishCalendar.getJewishCalendarElapsedDays(this.getJewishYear());\n    // elapsed days to the current calendar date\n    elapsedDays += this.getDaysSinceStartOfJewishYear();\n\n    /* Molad Nisan year 1 was 177 days after molad tohu of Tishrei. We multiply 29.5 day months * 6 months from Tishrei\n     * to Nisan = 177. Subtract 7 days since tekufas Nisan was 7 days and 9 hours before the molad as stated in the Rambam\n     * and we are now at 170 days. Because getJewishCalendarElapsedDays and getDaysSinceStartOfJewishYear use the value for\n     * Rosh Hashana as 1, we have to add 1 day for a total of 171. To this add a day since the tekufah is on a Tuesday\n     * night, and we push off the bracha to Wednesday morning, resulting in the 172 used in the calculation.\n     */\n    return elapsedDays % (28 * 365.25) === 172; // 28 years of 365.25 days + the offset from molad tohu mentioned above\n  }\n\n  /**\n   * Return the type of year for parsha calculations. The algorithm follows the\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=14268&amp;st=&amp;pgnum=222\">Luach Arba'ah Shearim</a> in the Tur Ohr Hachaim.\n   * @return the type of year for parsha calculations.\n   * @todo Use constants in this class.\n   */\n  private getParshaYearType(): number {\n    // plus one to the original Rosh Hashana of year 1 to get a week starting on Sunday\n    let roshHashanaDayOfWeek: number = (JewishCalendar.getJewishCalendarElapsedDays(this.getJewishYear()) + 1) % 7;\n    if (roshHashanaDayOfWeek === 0) {\n      // convert 0 to 7 for Shabbos for readability\n      roshHashanaDayOfWeek = SATURDAY;\n    }\n\n    if (this.isJewishLeapYear()) {\n      // eslint-disable-next-line default-case\n      switch (roshHashanaDayOfWeek) {\n        case MONDAY:\n          // BaCh\n          if (this.isKislevShort()) {\n            if (this.getInIsrael()) {\n              return 14;\n            }\n            return 6;\n          }\n\n          // BaSh\n          if (this.isCheshvanLong()) {\n            if (this.getInIsrael()) {\n              return 15;\n            }\n            return 7;\n          }\n          break;\n        // GaK\n        case TUESDAY:\n          if (this.getInIsrael()) {\n            return 15;\n          }\n          return 7;\n        case THURSDAY:\n          // HaCh\n          if (this.isKislevShort()) {\n            return 8;\n          }\n\n          // HaSh\n          if (this.isCheshvanLong()) {\n            return 9;\n          }\n\n          break;\n        case SATURDAY:\n          // ZaCh\n          if (this.isKislevShort()) {\n            return 10;\n          }\n\n          // ZaSh\n          if (this.isCheshvanLong()) {\n            if (this.getInIsrael()) {\n              return 16;\n            }\n            return 11;\n          }\n\n          break;\n      }\n    } else {\n      // not a leap year\n      // eslint-disable-next-line default-case\n      switch (roshHashanaDayOfWeek) {\n        case MONDAY:\n          // BaCh\n          if (this.isKislevShort()) {\n            return 0;\n          }\n\n          // BaSh\n          if (this.isCheshvanLong()) {\n            if (this.getInIsrael()) {\n              return 12;\n            }\n            return 1;\n          }\n\n          break;\n        case TUESDAY:\n          // GaK\n          if (this.getInIsrael()) {\n            return 12;\n          }\n          return 1;\n        case THURSDAY:\n          // HaSh\n          if (this.isCheshvanLong()) {\n            return 3;\n          }\n\n          // HaK\n          if (!this.isKislevShort()) {\n            if (this.getInIsrael()) {\n              return 13;\n            }\n            return 2;\n          }\n\n          break;\n        case SATURDAY:\n          // ZaCh\n          if (this.isKislevShort()) {\n            return 4;\n          }\n\n          // ZaSh\n          if (this.isCheshvanLong()) {\n            return 5;\n          }\n\n          break;\n      }\n    }\n\n    // keep the compiler happy\n    return -1;\n  }\n\n  /**\n   * Returns this week's {@link Parsha} if it is <em>Shabbos</em>.\n   * returns Parsha.NONE if a weekday or if there is no <em>parsha</em> that week (for example <em>Yomtov</em> is on <em>Shabbos</em>).\n   *\n   * @return the current <em>parsha</em>.\n   */\n  public getParsha(): Parsha {\n    if (this.getDayOfWeek() !== SATURDAY) {\n      return Parsha.NONE;\n    }\n\n    const yearType: number = this.getParshaYearType();\n    const roshHashanaDayOfWeek: number = JewishCalendar.getJewishCalendarElapsedDays(this.getJewishYear()) % 7;\n    const day: number = roshHashanaDayOfWeek + this.getDaysSinceStartOfJewishYear();\n\n    // negative year should be impossible, but lets cover all bases\n    if (yearType >= 0) {\n      return JewishCalendar.parshalist[yearType][day / 7];\n    }\n\n    // keep the compiler happy\n    return Parsha.NONE;\n  }\n\n  /**\n   * Returns the upcoming {@link Parsha <em>Parsha</em>} regardless of if it is the weekday or <em>Shabbos</em> (where next\n   * Shabbos's <em>Parsha</em> will be returned. This is unlike {@link #getParsha()} that returns {@link Parsha#NONE} if\n   * the date is not <em>Shabbos</em>. If the upcoming Shabbos is a <em>Yom Tov</em> and has no <em>Parsha</em>, the\n   * following week's <em>Parsha</em> will be returned.\n   *\n   * @return the upcoming <em>parsha</em>.\n   */\n  public getUpcomingParsha(): Parsha {\n    const clone: JewishCalendar = this.clone() as JewishCalendar;\n    const daysToShabbos: number = (Calendar.SATURDAY - this.getDayOfWeek() + 7) % 7;\n    if (this.getDayOfWeek() !== Calendar.SATURDAY) {\n      clone.forward(Calendar.DATE, daysToShabbos);\n    } else {\n      clone.forward(Calendar.DATE, 7);\n    }\n    while (clone.getParsha() === Parsha.NONE) { // Yom Kippur / Sukkos or Pesach with 2 potential non-parsha Shabbosim in a row\n      clone.forward(Calendar.DATE, 7);\n    }\n    return clone.getParsha();\n  }\n\n  /**\n   * Returns a {@link Parsha <em>Parsha</em>} enum if the <em>Shabbos</em> is one of the four <em>parshiyos</em> of {@link\n   * Parsha#SHKALIM <em>Shkalim</em>}, {@link Parsha#ZACHOR <em>Zachor</em>}, {@link Parsha#PARA <em>Para</em>}, {@link\n   * Parsha#HACHODESH <em>Hachodesh</em>}, or five other special <em>Shabbasos</em> of {@link Parsha#HAGADOL <em>Hagadol</em>},\n   * {@link Parsha#CHAZON <em>Chazon</em>}, {@link Parsha#NACHAMU <em>Nachamu</em>}, {@link Parsha#SHUVA <em>Shuva</em>},\n   * {@link Parsha#SHIRA <em>Shira</em>}, or {@link Parsha#NONE Parsha.NONE} for a regular <em>Shabbos</em> (or any weekday).\n   *\n   * @return one of the four <em>parshiyos</em> of {@link Parsha#SHKALIM <em>Shkalim</em>}, {@link Parsha#ZACHOR <em>Zachor</em>},\n   *         {@link Parsha#PARA <em>Para</em>}, {@link Parsha#HACHODESH <em>Hachodesh</em>}, or five other special <em>Shabbasos</em>\n   *         of {@link Parsha#HAGADOL <em>Hagadol</em>}, {@link Parsha#CHAZON <em>Chazon</em>}, {@link Parsha#NACHAMU <em>Nachamu</em>},\n   *         {@link Parsha#SHUVA <em>Shuva</em>}, {@link Parsha#SHIRA <em>Shira</em>}, or {@link Parsha#NONE Parsha.NONE} for a regular\n   *         <em>Shabbos</em> (or any weekday).\n   */\n  public getSpecialShabbos(): Parsha {\n    if (this.getDayOfWeek() === SATURDAY) {\n      if (((this.getJewishMonth() === JewishCalendar.SHEVAT && !this.isJewishLeapYear())\n        || (this.getJewishMonth() === JewishCalendar.ADAR && this.isJewishLeapYear()))\n        && [25, 27, 29].includes(this.getJewishDayOfMonth())) {\n        return Parsha.SHKALIM;\n      }\n\n      if ((this.getJewishMonth() === JewishCalendar.ADAR && !this.isJewishLeapYear())\n        || this.getJewishMonth() === JewishCalendar.ADAR_II) {\n        if (this.getJewishDayOfMonth() === 1) {\n          return Parsha.SHKALIM;\n        }\n\n        if ([8, 9, 11, 13].includes(this.getJewishDayOfMonth())) {\n          return Parsha.ZACHOR;\n        }\n\n        if ([18, 20, 22, 23].includes(this.getJewishDayOfMonth())) {\n          return Parsha.PARA;\n        }\n\n        if ([25, 27, 29].includes(this.getJewishDayOfMonth())) {\n          return Parsha.HACHODESH;\n        }\n      }\n\n      if (this.getJewishMonth() === JewishCalendar.NISSAN) {\n        if (this.getJewishDayOfMonth() === 1) {\n          return Parsha.HACHODESH;\n        }\n\n        if (this.getJewishDayOfMonth() >= 8 && this.getJewishDayOfMonth() <= 14) {\n          return Parsha.HAGADOL;\n        }\n      }\n\n      if (this.getJewishMonth() === JewishCalendar.AV) {\n        if (this.getJewishDayOfMonth() >= 4 && this.getJewishDayOfMonth() <= 9) {\n          return Parsha.CHAZON;\n        }\n\n        if (this.getJewishDayOfMonth() >= 10 && this.getJewishDayOfMonth() <= 16) {\n          return Parsha.NACHAMU;\n        }\n      }\n\n      if (this.getJewishMonth() === JewishCalendar.TISHREI) {\n        if (this.getJewishDayOfMonth() >= 3 && this.getJewishDayOfMonth() <= 8) {\n          return Parsha.SHUVA;\n        }\n      }\n\n      if (this.getParsha() === Parsha.BESHALACH) {\n        return Parsha.SHIRA;\n      }\n    }\n\n    return Parsha.NONE;\n  }\n\n  /**\n   * Returns an index of the Jewish holiday or fast day for the current day, or a -1 if there is no holiday for this day.\n   * There are constants in this class representing each <em>Yom Tov</em>. Formatting of the <em>Yomim tovim</em> is done\n   * in the {@link HebrewDateFormatter#formatYomTov(JewishCalendar)}.\n   *\n   * @todo Consider using enums instead of the constant ints.\n   *\n   * @return the index of the holiday such as the constant {@link #LAG_BAOMER} or {@link #YOM_KIPPUR} or a -1 if it is not a holiday.\n   *\n   * @see HebrewDateFormatter#formatYomTov(JewishCalendar)\n   */\n  public getYomTovIndex(): number {\n    const day: number = this.getJewishDayOfMonth();\n    const dayOfWeek: number = this.getDayOfWeek();\n\n    // check by month (starting from Nissan)\n    // eslint-disable-next-line default-case\n    switch (this.getJewishMonth()) {\n      case JewishCalendar.NISSAN:\n        if (day === 14) {\n          return JewishCalendar.EREV_PESACH;\n        } else if (day === 15 || day === 21 || (!this.inIsrael && (day === 16 || day === 22))) {\n          return JewishCalendar.PESACH;\n        } else if ((day >= 17 && day <= 20) || (day === 16 && this.inIsrael)) {\n          return JewishCalendar.CHOL_HAMOED_PESACH;\n        } else if ((day === 22 && this.inIsrael) || (day === 23 && !this.inIsrael)) {\n          return JewishCalendar.ISRU_CHAG;\n        }\n\n        if (this.isUseModernHolidays()\n          && ((day === 26 && dayOfWeek === Calendar.THURSDAY) || (day === 28 && dayOfWeek === Calendar.MONDAY)\n            || (day === 27 && dayOfWeek !== Calendar.SUNDAY && dayOfWeek !== Calendar.FRIDAY))) {\n          return JewishCalendar.YOM_HASHOAH;\n        }\n        break;\n      case JewishCalendar.IYAR:\n        if (this.isUseModernHolidays()\n          && ((day === 4 && dayOfWeek === Calendar.TUESDAY) || ((day === 3 || day === 2) && dayOfWeek === Calendar.WEDNESDAY)\n            || (day === 5 && dayOfWeek === Calendar.MONDAY))) {\n          return JewishCalendar.YOM_HAZIKARON;\n        }\n\n        // if 5 Iyar falls on Wed Yom Haatzmaut is that day. If it falls on Friday or Shabbos it is moved back to\n        // Thursday. If it falls on Monday it is moved to Tuesday\n        if (this.isUseModernHolidays() && ((day === 5 && dayOfWeek === Calendar.WEDNESDAY)\n          || ((day === 4 || day === 3) && dayOfWeek === Calendar.THURSDAY) || (day === 6 && dayOfWeek === Calendar.TUESDAY))) {\n          return JewishCalendar.YOM_HAATZMAUT;\n        }\n\n        if (day === 14) {\n          return JewishCalendar.PESACH_SHENI;\n        }\n\n        if (day === 18) {\n          return JewishCalendar.LAG_BAOMER;\n        }\n\n        if (this.isUseModernHolidays() && day === 28) {\n          return JewishCalendar.YOM_YERUSHALAYIM;\n        }\n        break;\n      case JewishCalendar.SIVAN:\n        if (day === 5) {\n          return JewishCalendar.EREV_SHAVUOS;\n        } else if (day === 6 || (day === 7 && !this.inIsrael)) {\n          return JewishCalendar.SHAVUOS;\n        } else if ((day === 7 && this.inIsrael) || (day === 8 && !this.inIsrael)) {\n          return JewishCalendar.ISRU_CHAG;\n        }\n        break;\n      case JewishCalendar.TAMMUZ:\n        // push off the fast day if it falls on Shabbos\n        if ((day === 17 && dayOfWeek !== Calendar.SATURDAY) || (day === 18 && dayOfWeek === Calendar.SUNDAY)) {\n          return JewishCalendar.SEVENTEEN_OF_TAMMUZ;\n        }\n        break;\n      case JewishCalendar.AV:\n        // if Tisha B'av falls on Shabbos, push off until Sunday\n        if ((dayOfWeek === Calendar.SUNDAY && day === 10) || (dayOfWeek !== Calendar.SATURDAY && day === 9)) {\n          return JewishCalendar.TISHA_BEAV;\n        } else if (day === 15) {\n          return JewishCalendar.TU_BEAV;\n        }\n        break;\n      case JewishCalendar.ELUL:\n        if (day === 29) {\n          return JewishCalendar.EREV_ROSH_HASHANA;\n        }\n        break;\n      case JewishCalendar.TISHREI:\n        if (day === 1 || day === 2) {\n          return JewishCalendar.ROSH_HASHANA;\n        } else if ((day === 3 && dayOfWeek !== Calendar.SATURDAY) || (day === 4 && dayOfWeek === Calendar.SUNDAY)) {\n          // push off Tzom Gedalia if it falls on Shabbos\n          return JewishCalendar.FAST_OF_GEDALYAH;\n        } else if (day === 9) {\n          return JewishCalendar.EREV_YOM_KIPPUR;\n        } else if (day === 10) {\n          return JewishCalendar.YOM_KIPPUR;\n        } else if (day === 14) {\n          return JewishCalendar.EREV_SUCCOS;\n        }\n\n        if (day === 15 || (day === 16 && !this.inIsrael)) {\n          return JewishCalendar.SUCCOS;\n        }\n\n        if ((day >= 16 && day <= 20)) {\n          return JewishCalendar.CHOL_HAMOED_SUCCOS;\n        }\n\n        if (day === 21) {\n          return JewishCalendar.HOSHANA_RABBA;\n        }\n\n        if (day === 22) {\n          return JewishCalendar.SHEMINI_ATZERES;\n        }\n\n        if (day === 23 && !this.inIsrael) {\n          return JewishCalendar.SIMCHAS_TORAH;\n        }\n\n        if ((day === 23 && this.inIsrael) || (day === 24 && !this.inIsrael)) {\n          return JewishCalendar.ISRU_CHAG;\n        }\n\n        break;\n      case JewishCalendar.KISLEV: // no yomtov in CHESHVAN\n        // if (day == 24) {\n        // return EREV_CHANUKAH;\n        // } else\n        if (day >= 25) {\n          return JewishCalendar.CHANUKAH;\n        }\n        break;\n      case JewishCalendar.TEVES:\n        if (day === 1 || day === 2 || (day === 3 && this.isKislevShort())) {\n          return JewishCalendar.CHANUKAH;\n        } else if (day === 10) {\n          return JewishCalendar.TENTH_OF_TEVES;\n        }\n        break;\n      case JewishCalendar.SHEVAT:\n        if (day === 15) {\n          return JewishCalendar.TU_BESHVAT;\n        }\n        break;\n      case JewishCalendar.ADAR:\n        if (!this.isJewishLeapYear()) {\n          // if 13th Adar falls on Friday or Shabbos, push back to Thursday\n          if (((day === 11 || day === 12) && dayOfWeek === Calendar.THURSDAY)\n              || (day === 13 && !(dayOfWeek === Calendar.FRIDAY || dayOfWeek === Calendar.SATURDAY))) {\n            return JewishCalendar.FAST_OF_ESTHER;\n          }\n\n          if (day === 14) {\n            return JewishCalendar.PURIM;\n          } else if (day === 15) {\n            return JewishCalendar.SHUSHAN_PURIM;\n          }\n        } else {\n          // else if a leap year\n          if (day === 14) {\n            return JewishCalendar.PURIM_KATAN;\n          }\n\n          if (day === 15) {\n            return JewishCalendar.SHUSHAN_PURIM_KATAN;\n          }\n        }\n        break;\n      case JewishCalendar.ADAR_II:\n        // if 13th Adar falls on Friday or Shabbos, push back to Thursday\n        if (((day === 11 || day === 12) && dayOfWeek === Calendar.THURSDAY)\n            || (day === 13 && !(dayOfWeek === Calendar.FRIDAY || dayOfWeek === Calendar.SATURDAY))) {\n          return JewishCalendar.FAST_OF_ESTHER;\n        }\n\n        if (day === 14) {\n          return JewishCalendar.PURIM;\n        } else if (day === 15) {\n          return JewishCalendar.SHUSHAN_PURIM;\n        }\n        break;\n    }\n    // if we get to this stage, then there are no holidays for the given date return -1\n    return -1;\n  }\n\n  /**\n   * Returns true if the current day is <em>Yom Tov</em>. The method returns true even for holidays such as {@link #CHANUKAH}\n   * and minor ones such as {@link #TU_BEAV} and {@link #PESACH_SHENI}. <em>Erev Yom Tov</em> (with the exception of\n   * {@link #HOSHANA_RABBA} and <em>erev</em> the second days of <em>Pesach</em>) returns false, as do {@link #isTaanis() fast\n   * days} besides {@link #YOM_KIPPUR}. Use {@link #isAssurBemelacha()} to find the days that have a prohibition of work.\n   *\n   * @return true if the current day is a Yom Tov\n   *\n   * @see #getYomTovIndex()\n   * @see #isErevYomTov()\n   * @see #isErevYomTovSheni()\n   * @see #isTaanis()\n   * @see #isAssurBemelacha()\n   * @see #isCholHamoed()\n   */\n  public isYomTov(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    if ((this.isErevYomTov() && !(holidayIndex === JewishCalendar.HOSHANA_RABBA || holidayIndex === JewishCalendar.CHOL_HAMOED_PESACH))\n        || (this.isTaanis() && holidayIndex !== JewishCalendar.YOM_KIPPUR) || holidayIndex === JewishCalendar.ISRU_CHAG) {\n      return false;\n    }\n\n    return this.getYomTovIndex() !== -1;\n  }\n\n  /**\n   * Returns true if the <em>Yom Tov</em> day has a <em>melacha</em> (work) prohibition. This method will return false for a\n   * non-<em>Yom Tov</em> day, even if it is <em>Shabbos</em>.\n   *\n   * @return if the <em>Yom Tov</em> day has a <em>melacha</em> (work) prohibition.\n   */\n  public isYomTovAssurBemelacha(): boolean {\n    const yamimTovimAssurBemelacha = [\n      JewishCalendar.PESACH,\n      JewishCalendar.SHAVUOS,\n      JewishCalendar.SUCCOS,\n      JewishCalendar.SHEMINI_ATZERES,\n      JewishCalendar.SIMCHAS_TORAH,\n      JewishCalendar.ROSH_HASHANA,\n      JewishCalendar.YOM_KIPPUR,\n    ];\n    const holidayIndex: number = this.getYomTovIndex();\n    return yamimTovimAssurBemelacha.includes(holidayIndex);\n  }\n\n  /**\n   * Returns true if it is <em>Shabbos</em> or if it is a <em>Yom Tov</em> day that has a <em>melacha</em> (work)  prohibition.\n   *\n   * @return if the day is a <em>Yom Tov</em> that is <em>assur bemlacha</em> or <em>Shabbos</em>\n   */\n  public isAssurBemelacha(): boolean {\n    return this.getDayOfWeek() === SATURDAY || this.isYomTovAssurBemelacha();\n  }\n\n  /**\n   * Returns true if the day has candle lighting. This will return true on erev <em>Shabbos</em>, erev <em>Yom Tov</em>, the\n   * first day of <em>Rosh Hashana</em> and the first days of <em>Yom Tov</em> out of Israel. It is identical\n   * to calling {@link #isTomorrowShabbosOrYomTov()}.\n   *\n   * @return if the day has candle lighting.\n   *\n   * @see #isTomorrowShabbosOrYomTov()\n   */\n  public hasCandleLighting(): boolean {\n    return this.isTomorrowShabbosOrYomTov();\n  }\n\n  /**\n   * Returns true if tomorrow is <em>Shabbos</em> or <em>Yom Tov</em>. This will return true on erev <em>Shabbos</em>,\n   * <em>erev Yom Tov</em>, the first day of <em>Rosh Hashana</em> and <em>erev</em> the first days of <em>Yom Tov</em>\n   * out of Israel. It is identical to calling {@link #hasCandleLighting()}.\n   *\n   * @return will return if the next day is <em>Shabbos</em> or <em>Yom Tov</em>.\n   *\n   * @see #hasCandleLighting()\n   */\n  public isTomorrowShabbosOrYomTov(): boolean {\n    return this.getDayOfWeek() === FRIDAY || this.isErevYomTov() || this.isErevYomTovSheni();\n  }\n\n  /**\n   * Returns true if the day is the second day of <em>Yom Tov</em>. This impacts the second day of <em>Rosh Hashana</em>\n   * everywhere, and the second days of Yom Tov in <em>chutz laaretz</em> (out of Israel).\n   *\n   * @return  if the day is the second day of <em>Yom Tov</em>.\n   */\n  public isErevYomTovSheni(): boolean {\n    return (this.getJewishMonth() === JewishCalendar.TISHREI && (this.getJewishDayOfMonth() === 1))\n      || (!this.getInIsrael()\n        && ((this.getJewishMonth() === JewishCalendar.NISSAN && [15, 21].includes(this.getJewishDayOfMonth()))\n          || (this.getJewishMonth() === JewishCalendar.TISHREI && [15, 22].includes(this.getJewishDayOfMonth()))\n          || (this.getJewishMonth() === JewishCalendar.SIVAN && this.getJewishDayOfMonth() === 6)));\n  }\n\n  /**\n   * Returns true if the current day is <em>Aseret Yemei Teshuva</em>.\n   *\n   * @return if the current day is <em>Aseret Yemei Teshuva</em>\n   */\n  public isAseresYemeiTeshuva(): boolean {\n    return this.getJewishMonth() === JewishCalendar.TISHREI && this.getJewishDayOfMonth() <= 10;\n  }\n\n  /**\n   * Returns true if the current day is <em>Pesach</em> (either  the <em>Yom Tov</em> of <em>Pesach</em> or<em>Chol Hamoed Pesach</em>).\n   *\n   * @return true if the current day is <em>Pesach</em> (either  the <em>Yom Tov</em> of <em>Pesach</em> or<em>Chol Hamoed Pesach</em>).\n   * @see #isYomTov()\n   * @see #isCholHamoedPesach()\n   * @see #PESACH\n   * @see #CHOL_HAMOED_PESACH\n   */\n  public isPesach(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.PESACH || holidayIndex === JewishCalendar.CHOL_HAMOED_PESACH;\n  }\n\n  /**\n   * Returns true if the current day is <em>Chol Hamoed</em> of <em>Pesach</em>.\n   *\n   * @return true if the current day is <em>Chol Hamoed</em> of <em>Pesach</em>\n   * @see #isYomTov()\n   * @see #isPesach()\n   * @see #CHOL_HAMOED_PESACH\n   */\n  public isCholHamoedPesach(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.CHOL_HAMOED_PESACH;\n  }\n\n  /**\n   * Returns true if the current day is <em>Shavuos</em>.\n   *\n   * @return true if the current day is <em>Shavuos</em>.\n   * @see #isYomTov()\n   * @see #SHAVUOS\n   */\n  public isShavuos(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.SHAVUOS;\n  }\n\n  /**\n   * Returns true if the current day is <em>Rosh Hashana</em>.\n   *\n   * @return true if the current day is <em>Rosh Hashana</em>.\n   * @see #isYomTov()\n   * @see #ROSH_HASHANA\n   */\n  public isRoshHashana(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.ROSH_HASHANA;\n  }\n\n  /**\n   * Returns true if the current day is <em>Yom Kippur</em>.\n   *\n   * @return true if the current day is <em>Yom Kippur</em>.\n   * @see #isYomTov()\n   * @see #YOM_KIPPUR\n   */\n  public isYomKippur(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.YOM_KIPPUR;\n  }\n\n  /**\n   * Returns true if the current day is <em>Succos</em> (either  the <em>Yom Tov</em> of <em>Succos</em> or<em>Chol Hamoed Succos</em>).\n   * It will return false for {@link #isShminiAtzeres() Shmini Atzeres} and {@link #isSimchasTorah() Simchas Torah}.\n   *\n   * @return true if the current day is <em>Succos</em> (either  the <em>Yom Tov</em> of <em>Succos</em> or<em>Chol Hamoed Succos</em>.\n   * @see #isYomTov()\n   * @see #isCholHamoedSuccos()\n   * @see #isHoshanaRabba()\n   * @see #SUCCOS\n   * @see #CHOL_HAMOED_SUCCOS\n   * @see #HOSHANA_RABBA\n   */\n  public isSuccos(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.SUCCOS || holidayIndex === JewishCalendar.CHOL_HAMOED_SUCCOS\n        || holidayIndex === JewishCalendar.HOSHANA_RABBA;\n  }\n\n  /**\n   * Returns true if the current day is <em>Hoshana Rabba</em>.\n   *\n   * @return true if the current day is <em>Hoshana Rabba</em>.\n   * @see #isYomTov()\n   * @see #HOSHANA_RABBA\n   */\n  public isHoshanaRabba(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.HOSHANA_RABBA;\n  }\n\n  /**\n   * Returns true if the current day is <em>Shmini Atzeres</em>.\n   *\n   * @return true if the current day is <em>Shmini Atzeres</em>.\n   * @see #isYomTov()\n   * @see #SHEMINI_ATZERES\n   */\n  public isShminiAtzeres(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.SHEMINI_ATZERES;\n  }\n\n  /**\n   * Returns true if the current day is <em>Simchas Torah</em>. This will always return false if {@link #getInIsrael() in Israel}\n   *\n   * @return true if the current day is <em>Shmini Atzeres</em>.\n   * @see #isYomTov()\n   * @see #SIMCHAS_TORAH\n   */\n  public isSimchasTorah(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    // if in Israel, Holiday index of SIMCHAS_TORAH will not be returned by getYomTovIndex()\n    return holidayIndex === JewishCalendar.SIMCHAS_TORAH;\n  }\n\n  /**\n   * Returns true if the current day is <em>Chol Hamoed</em> of <em>Succos</em>.\n   *\n   * @return true if the current day is <em>Chol Hamoed</em> of <em>Succos</em>\n   * @see #isYomTov()\n   * @see #CHOL_HAMOED_SUCCOS\n   */\n  public isCholHamoedSuccos(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.CHOL_HAMOED_SUCCOS || holidayIndex === JewishCalendar.HOSHANA_RABBA;\n  }\n\n  /**\n   * Returns true if the current day is <em>Chol Hamoed</em> of <em>Pesach</em> or <em>Succos</em>.\n   *\n   * @return true if the current day is <em>Chol Hamoed</em> of <em>Pesach</em> or <em>Succos</em>\n   * @see #isYomTov()\n   * @see #CHOL_HAMOED_PESACH\n   * @see #CHOL_HAMOED_SUCCOS\n   */\n  public isCholHamoed(): boolean {\n    return this.isCholHamoedPesach() || this.isCholHamoedSuccos();\n  }\n\n  /**\n   * Returns true if the current day is erev Yom Tov. The method returns true for <em>Erev</em> - <em>Pesach</em> (first and\n   * last days), <em>Shavuos</em>, <em>Rosh Hashana</em>, <em>Yom Kippur</em>, <em>Succos</em> and <em>Hoshana Rabba</em>.\n   *\n   * @return true if the current day is <em>Erev</em> - <em>Pesach</em>, <em>Shavuos</em>, <em>Rosh Hashana</em>, <em>Yom\n   * Kippur</em>, <em>Succos</em> and <em>Hoshana Rabba</em>.\n   * @see #isYomTov()\n   * @see #isErevYomTovSheni()\n   */\n  public isErevYomTov(): boolean {\n    const erevYomTov = [\n      JewishCalendar.EREV_PESACH,\n      JewishCalendar.EREV_SHAVUOS,\n      JewishCalendar.EREV_ROSH_HASHANA,\n      JewishCalendar.EREV_YOM_KIPPUR,\n      JewishCalendar.EREV_SUCCOS,\n      JewishCalendar.HOSHANA_RABBA,\n    ];\n    const holidayIndex: number = this.getYomTovIndex();\n    return erevYomTov.includes(holidayIndex)\n      || (holidayIndex === JewishCalendar.CHOL_HAMOED_PESACH && this.getJewishDayOfMonth() === 20);\n  }\n\n  /**\n   * Returns true if the current day is Erev Rosh Chodesh. Returns false for Erev Rosh Hashana\n   *\n   * @return true if the current day is Erev Rosh Chodesh. Returns false for Erev Rosh Hashana\n   * @see #isRoshChodesh()\n   */\n  public isErevRoshChodesh(): boolean {\n    // Erev Rosh Hashana is not Erev Rosh Chodesh.\n    return (this.getJewishDayOfMonth() === 29 && this.getJewishMonth() !== JewishCalendar.ELUL);\n  }\n\n  /**\n   * Returns true if the current day is <em>Yom Kippur Katan</em>. Returns false for <em>Erev Rosh Hashana</em>,\n   * <em>Erev Rosh Chodesh Cheshvan</em>, <em>Teves</em> and <em>Iyyar</em>. If <em>Erev Rosh Chodesh</em> occurs\n   * on a Friday or <em>Shabbos</em>, <em>Yom Kippur Katan</em> is moved back to Thursday.\n   *\n   * @return true if the current day is <em>Erev Rosh Chodesh</em>. Returns false for <em>Erev Rosh Hashana</em>.\n   * @see #isRoshChodesh()\n   */\n  public isYomKippurKatan(): boolean {\n    const dayOfWeek: number = this.getDayOfWeek();\n    const month: number = this.getJewishMonth();\n    const day: number = this.getJewishDayOfMonth();\n\n    if (month === JewishDate.ELUL || month === JewishDate.TISHREI || month === JewishDate.KISLEV || month === JewishDate.NISSAN) {\n      return false;\n    }\n\n    if (day === 29 && dayOfWeek !== Calendar.FRIDAY && dayOfWeek !== Calendar.SATURDAY) {\n      return true;\n    }\n\n    return (day === 27 || day === 28) && dayOfWeek === Calendar.THURSDAY;\n  }\n\n  /**\n   * The Monday, Thursday and Monday after the first <em>Shabbos</em> after {@link #isRoshChodesh() <em>Rosh Chodesh</em>}\n   * {@link JewishDate#CHESHVAN <em>Cheshvan</em>} and {@link JewishDate#IYAR <em>Iyar</em>} are <a href=\n   * \"https://outorah.org/p/41334/\"> <em>BeHaB</em></a> days. If the last Monday of Iyar's BeHaB coincides with {@link\n   * #PESACH_SHENI <em>Pesach Sheni</em>}, the method currently considers it both <em>Pesach Sheni</em> and <em>BeHaB</em>.\n   * As seen in an Ohr Sameach  article on the subject <a href=\"https://ohr.edu/this_week/insights_into_halacha/9340\">The\n   * unknown Days: BeHaB Vs. Pesach Sheini?</a> there are some customs that delay the day to various points in the future.\n   * @return true if the day is <em>BeHaB</em>.\n   */\n  public isBeHaB(): boolean {\n    const dayOfWeek: number = this.getDayOfWeek();\n    const month: number = this.getJewishMonth();\n    const day: number = this.getJewishDayOfMonth();\n\n    if (month === JewishDate.CHESHVAN || month === JewishDate.IYAR) {\n      if ((dayOfWeek === Calendar.MONDAY && day > 4 && day < 18)\n          || (dayOfWeek === Calendar.THURSDAY && day > 7 && day < 14)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Return true if the day is a Taanis (fast day). Return true for <em>17 of Tammuz</em>, <em>Tisha B'Av</em>,\n   * <em>Yom Kippur</em>, <em>Fast of Gedalyah</em>, <em>10 of Teves</em> and the <em>Fast of Esther</em>.\n   *\n   * @return true if today is a fast day\n   */\n  public isTaanis(): boolean {\n    const taaniyos = [\n      JewishCalendar.SEVENTEEN_OF_TAMMUZ,\n      JewishCalendar.TISHA_BEAV,\n      JewishCalendar.YOM_KIPPUR,\n      JewishCalendar.FAST_OF_GEDALYAH,\n      JewishCalendar.TENTH_OF_TEVES,\n      JewishCalendar.FAST_OF_ESTHER,\n    ];\n    const holidayIndex: number = this.getYomTovIndex();\n    return taaniyos.includes(holidayIndex);\n  }\n\n  /**\n   * Return true if the day is <em>Taanis Bechoros</em> (on <em>erev Pesach</em>). It will return true for the 14th\n   * of <em>Nissan</em> if it is not on <em>Shabbos</em>, or if the 12th of <em>Nissan</em> occurs on a Thursday.\n   *\n   * @return true if today is <em>Taanis Bechoros</em>.\n   */\n  public isTaanisBechoros(): boolean {\n    const day: number = this.getJewishDayOfMonth();\n    const dayOfWeek: number = this.getDayOfWeek();\n    // on 14 Nisan unless that is Shabbos where the fast is moved back to Thursday\n    return this.getJewishMonth() === JewishCalendar.NISSAN && ((day === 14 && dayOfWeek !== Calendar.SATURDAY)\n        || (day === 12 && dayOfWeek === Calendar.THURSDAY));\n  }\n\n  /**\n   * Returns the day of <em>Chanukah</em> or -1 if it is not <em>Chanukah</em>.\n   *\n   * @return the day of <em>Chanukah</em> or -1 if it is not <em>Chanukah</em>.\n   * @see #isChanukah()\n   */\n  public getDayOfChanukah(): number {\n    const day: number = this.getJewishDayOfMonth();\n\n    if (this.isChanukah()) {\n      if (this.getJewishMonth() === JewishCalendar.KISLEV) {\n        return day - 24;\n      }\n      // teves\n      return this.isKislevShort() ? day + 5 : day + 6;\n    }\n    return -1;\n  }\n\n  /**\n   * Returns true if the current day is one of the 8 days of <em>Chanukah</em>.\n   *\n   * @return if the current day is one of the 8 days of <em>Chanukah</em>.\n   *\n   * @see #getDayOfChanukah()\n   */\n  public isChanukah(): boolean {\n    return this.getYomTovIndex() === JewishCalendar.CHANUKAH;\n  }\n\n  /**\n   * Returns if the day is Purim (<a href=\"https://en.wikipedia.org/wiki/Purim#Shushan_Purim\">Shushan Purim</a>\n   * in a mukaf choma and regular Purim in a non-mukaf choma).\n   * @return if the day is Purim (Shushan Purim in a mukaf choma and regular Purim in a non-mukaf choma)\n   *\n   * @see #getIsMukafChoma()\n   * @see #setIsMukafChoma(boolean)\n   */\n  public isPurim(): boolean {\n    return this.isMukafChoma\n        ? this.getYomTovIndex() === JewishCalendar.SHUSHAN_PURIM\n        : this.getYomTovIndex() === JewishCalendar.PURIM;\n  }\n\n  /**\n   * Returns if the day is Rosh Chodesh. Rosh Hashana will return false\n   *\n   * @return true if it is Rosh Chodesh. Rosh Hashana will return false\n   */\n  public isRoshChodesh(): boolean {\n    // Rosh Hashana is not rosh chodesh. Elul never has 30 days\n    return (this.getJewishDayOfMonth() === 1 && this.getJewishMonth() !== JewishCalendar.TISHREI) || this.getJewishDayOfMonth() === 30;\n  }\n\n  /**\n   * Returns if the day is <em>Shabbos</em> and Sunday is <em>Rosh Chodesh</em>.\n   *\n   * @return true if it is <em>Shabbos</em> and Sunday is <em>Rosh Chodesh</em>.\n   * @todo There is more to tweak in this method (it does not cover all cases and opinions), and it may be removed.\n   */\n  public isMacharChodesh(): boolean {\n    return (this.getDayOfWeek() === SATURDAY && (this.getJewishDayOfMonth() === 30 || this.getJewishDayOfMonth() === 29));\n  }\n\n  /**\n   * Returns if the day is <em>Shabbos Mevorchim</em>.\n   *\n   * @return true if it is <em>Shabbos Mevorchim</em>.\n   */\n  public isShabbosMevorchim(): boolean {\n    return this.getDayOfWeek() === SATURDAY\n      && this.getJewishDayOfMonth() >= 23\n      && this.getJewishDayOfMonth() <= 29\n      && this.getJewishMonth() !== JewishCalendar.ELUL;\n  }\n\n  /**\n   * Returns the int value of the <em>Omer</em> day or -1 if the day is not in the <em>Omer</em>.\n   *\n   * @return The <em>Omer</em> count as an int or -1 if it is not a day of the <em>Omer</em>.\n   */\n  public getDayOfOmer(): number {\n    let omer: number = -1; // not a day of the Omer\n    const month: number = this.getJewishMonth();\n    const day: number = this.getJewishDayOfMonth();\n\n    // if Nissan and second day of Pesach and on\n    if (month === JewishCalendar.NISSAN && day >= 16) {\n      omer = day - 15;\n      // if Iyar\n    } else if (month === JewishCalendar.IYAR) {\n      omer = day + 15;\n      // if Sivan and before Shavuos\n    } else if (month === JewishCalendar.SIVAN && day < 6) {\n      omer = day + 44;\n    }\n    return omer;\n  }\n\n  /**\n   * Returns if the day is Tisha Be'Av (the 9th of Av).\n   * @return if the day is Tisha Be'Av (the 9th of Av).\n   */\n  public isTishaBav(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.TISHA_BEAV;\n  }\n\n  /**\n   * Returns the molad in Standard Time in Yerushalayim as a Date. The traditional calculation uses local time. This\n   * method subtracts 20.94 minutes (20 minutes and 56.496 seconds) from the local time (Har Habayis with a longitude\n   * of 35.2354&deg; is 5.2354&deg; away from the %15 timezone longitude) to get to standard time. This method\n   * intentionally uses standard time and not dailight savings time. Java will implicitly format the time to the\n   * default (or set) Timezone.\n   *\n   * @return the Date representing the moment of the molad in Yerushalayim standard time (GMT + 2)\n   */\n  public getMoladAsDate(): DateTime {\n    const molad: JewishDate = this.getMolad();\n    const locationName: string = 'Jerusalem, Israel';\n\n    const latitude: number = 31.778; // Har Habayis latitude\n    const longitude: number = 35.2354; // Har Habayis longitude\n\n    // The raw molad Date (point in time) must be generated using standard time. Using \"Asia/Jerusalem\" timezone will result in the time\n    // being incorrectly off by an hour in the summer due to DST. Proper adjustment for the actual time in DST will be done by the date\n    // formatter class used to display the Date.\n    const yerushalayimStandardTZ: string = 'Etc/GMT+2';\n    const geo: GeoLocation = new GeoLocation(locationName, latitude, longitude, yerushalayimStandardTZ);\n\n    const moladSeconds: number = (molad.getMoladChalakim() * 10) / 3;\n    // subtract local time difference of 20.94 minutes (20 minutes and 56.496 seconds) to get to Standard time\n    const milliseconds: number = Math.trunc(1000 * (moladSeconds - Math.trunc(moladSeconds)));\n\n    return DateTime.fromObject({\n      year: molad.getGregorianYear(),\n      month: molad.getGregorianMonth() + 1,\n      day: molad.getGregorianDayOfMonth(),\n      hour: molad.getMoladHours(),\n      minute: molad.getMoladMinutes(),\n      second: Math.trunc(moladSeconds),\n      millisecond: milliseconds,\n      zone: geo.getTimeZone(),\n    })\n      .minus({ milliseconds: Math.trunc(geo.getLocalMeanTimeOffset()) });\n  }\n\n  /**\n   * Returns the earliest time of <em>Kiddush Levana</em> calculated as 3 days after the molad. This method returns the time\n   * even if it is during the day when <em>Kiddush Levana</em> can't be said. Callers of this method should consider\n   * displaying the next <em>tzais</em> if the zman is between <em>alos</em> and <em>tzais</em>.\n   *\n   * @return the Date representing the moment 3 days after the molad.\n   *\n   * @see ComplexZmanimCalendar#getTchilasZmanKidushLevana3Days()\n   * @see ComplexZmanimCalendar#getTchilasZmanKidushLevana3Days(Date, Date)\n   */\n  public getTchilasZmanKidushLevana3Days(): DateTime {\n    const molad: DateTime = this.getMoladAsDate();\n\n    return molad.plus({ hours: 72 });\n  }\n\n  /**\n   * Returns the earliest time of Kiddush Levana calculated as 7 days after the molad as mentioned by the <a\n   * href=\"https://en.wikipedia.org/wiki/Yosef_Karo\">Mechaber</a>. See the <a\n   * href=\"https://en.wikipedia.org/wiki/Yoel_Sirkis\">Bach's</a> opinion on this time. This method returns the time\n   * even if it is during the day when <em>Kiddush Levana</em> can't be said. Callers of this method should consider\n   * displaying the next <em>tzais</em> if the zman is between <em>alos</em> and <em>tzais</em>.\n   *\n   * @return the Date representing the moment 7 days after the molad.\n   *\n   * @see ComplexZmanimCalendar#getTchilasZmanKidushLevana7Days()\n   * @see ComplexZmanimCalendar#getTchilasZmanKidushLevana7Days(Date, Date)\n   */\n  public getTchilasZmanKidushLevana7Days(): DateTime {\n    const molad: DateTime = this.getMoladAsDate();\n\n    return molad.plus({ hours: 168 });\n  }\n\n  /**\n   * Returns the latest time of Kiddush Levana according to the <a\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> opinion that it is calculated as\n   * halfway between molad and molad. This adds half the 29 days, 12 hours and 793 chalakim time between molad and\n   * molad (14 days, 18 hours, 22 minutes and 666 milliseconds) to the month's molad. This method returns the time\n   * even if it is during the day when <em>Kiddush Levana</em> can't be said. Callers of this method should consider\n   * displaying <em>alos</em> before this time if the zman is between <em>alos</em> and <em>tzais</em>.\n   *\n   * @return the Date representing the moment halfway between molad and molad.\n   *\n   * @see #getSofZmanKidushLevana15Days()\n   * @see ComplexZmanimCalendar#getSofZmanKidushLevanaBetweenMoldos()\n   * @see ComplexZmanimCalendar#getSofZmanKidushLevanaBetweenMoldos(Date, Date)\n   */\n  public getSofZmanKidushLevanaBetweenMoldos(): DateTime {\n    const molad: DateTime = this.getMoladAsDate();\n\n    // add half the time between molad and molad (half of 29 days, 12 hours and 793 chalakim (44 minutes, 3.3\n    // seconds), or 14 days, 18 hours, 22 minutes and 666 milliseconds). Add it as hours, not days, to avoid\n    // DST/ST crossover issues.\n    return molad.plus({\n      hours: (24 * 14) + 18,\n      minutes: 22,\n      seconds: 1,\n      milliseconds: 666,\n    });\n  }\n\n  /**\n   * Returns the latest time of Kiddush Levana calculated as 15 days after the molad. This is the opinion brought down\n   * in the Shulchan Aruch (Orach Chaim 426). It should be noted that some opinions hold that the\n   * <a href=\"https://en.wikipedia.org/wiki/Moses_Isserles\">Rema</a> who brings down the opinion of the <a\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> of calculating\n   * {@link #getSofZmanKidushLevanaBetweenMoldos() half way between molad and mold} is of the opinion that Mechaber\n   * agrees to his opinion. Also see the Aruch Hashulchan. For additional details on the subject, See Rabbi Dovid\n   * Heber's very detailed writeup in Siman Daled (chapter 4) of <a\n   * href=\"https://www.worldcat.org/oclc/461326125\">Shaarei Zmanim</a>. This method returns the time even if it is during\n   * the day when <em>Kiddush Levana</em> can't be said. Callers of this method should consider displaying <em>alos</em>\n   * before this time if the zman is between <em>alos</em> and <em>tzais</em>.\n   *\n   * @return the Date representing the moment 15 days after the molad.\n   * @see #getSofZmanKidushLevanaBetweenMoldos()\n   * @see ComplexZmanimCalendar#getSofZmanKidushLevana15Days()\n   * @see ComplexZmanimCalendar#getSofZmanKidushLevana15Days(Date, Date)\n   */\n  public getSofZmanKidushLevana15Days(): DateTime {\n    const molad: DateTime = this.getMoladAsDate();\n\n    // 15 days after the molad. Add it as hours, not days, to avoid DST/ST crossover issues.\n    return molad.plus({ hours: 24 * 15 });\n  }\n\n  /**\n   * Returns the <em>Daf Yomi (Bavli)</em> for the date that the calendar is set to. See the\n   * {@link HebrewDateFormatter#formatDafYomiBavli(Daf)} for the ability to format the <em>daf</em> in\n   * Hebrew or transliterated <em>masechta</em> names.\n   *\n   * @deprecated This depends on a circular dependency. Use <pre>YomiCalculator.getDafYomiBavli(jewishCalendar)</pre> instead.\n   * @return the daf as a {@link Daf}\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public getDafYomiBavli(): Daf {\n    // return YomiCalculator.getDafYomiBavli(this);\n    throw new UnsupportedError('This method is not supported, due to a circular dependency. Use `YomiCalculator.getDafYomiBavli(jewishCalendar)` instead');\n  }\n\n  /**\n   * Returns the <em>Daf Yomi (Yerushalmi)</em> for the date that the calendar is set to. See the\n   * {@link HebrewDateFormatter#formatDafYomiYerushalmi(Daf)} for the ability to format the <em>daf</em>\n   * in Hebrew or transliterated <em>masechta</em> names.\n   *\n   * @deprecated This depends on a circular dependency. Use <pre>YerushalmiYomiCalculator.getDafYomiYerushalmi(jewishCalendar)</pre> instead.\n   * @return the daf as a {@link Daf}\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public getDafYomiYerushalmi(): Daf {\n    // return YerushalmiYomiCalculator.getDafYomiYerushalmi(this);\n    throw new UnsupportedError('This method is not supported, due to a circular dependency. Use `YerushalmiYomiCalculator.getDafYomiYerushalmi(jewishCalendar)` instead');\n  }\n\n  /**\n   * Returns true if the current day is <em>Isru Chag</em>. The method returns true for the day following <em>Pesach</em>\n   * <em>Shavuos</em> and <em>Succos</em>. It utilizes {@see #getInIsrael()} to return the proper date.\n   *\n   * @return true if the current day is <em>Isru Chag</em>. The method returns true for the day following <em>Pesach</em>\n   * <em>Shavuos</em> and <em>Succos</em>. It utilizes {@see #getInIsrael()} to return the proper date.\n   */\n  public isIsruChag(): boolean {\n    const holidayIndex: number = this.getYomTovIndex();\n    return holidayIndex === JewishCalendar.ISRU_CHAG;\n  }\n\n  /**\n   * Indicates whether some other object is \"equal to\" this one.\n   * @see Object#equals(Object)\n   */\n  public equals(object: object): boolean {\n    if (this === object as JewishCalendar) return true;\n    if (!(object instanceof JewishCalendar)) return false;\n\n    const jewishCalendar: JewishCalendar = object as JewishCalendar;\n    return this.getAbsDate() === jewishCalendar.getAbsDate() && this.getInIsrael() === jewishCalendar.getInIsrael();\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { AstronomicalCalendar } from './AstronomicalCalendar';\nimport { JewishCalendar } from './hebrewcalendar/JewishCalendar';\nimport { NullPointerException } from './polyfills/errors';\nimport { Double_MIN_VALUE, Long_MIN_VALUE } from './polyfills/Utils';\n\n/**\n * The ZmanimCalendar is a specialized calendar that can calculate sunrise, sunset and Jewish <em>zmanim</em>\n * (religious times) for prayers and other Jewish religious duties. This class contains the main functionality of the\n * <em>Zmanim</em> library. For a much more extensive list of <em>zmanim</em>, use the {@link ComplexZmanimCalendar} that\n * extends this class. See documentation for the {@link ComplexZmanimCalendar} and {@link AstronomicalCalendar} for\n * simple examples on using the API.\n * <strong>Elevation based <em>zmanim</em> (even sunrise and sunset) should not be used <em>lekula</em> without the guidance\n * of a <em>posek</em></strong>. According to Rabbi Dovid Yehudah Bursztyn in his\n * <a href=\"https://www.worldcat.org/oclc/1158574217\">Zmanim Kehilchasam, 7th edition</a> chapter 2, section 7 (pages 181-182)\n * and section 9 (pages 186-187), no <em>zmanim</em> besides sunrise and sunset should use elevation. However, Rabbi Yechiel\n * Avrahom Zilber in the <a href=\"https://hebrewbooks.org/51654\">Birur Halacha Vol. 6</a> Ch. 58 Pages\n * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=42\">34</a> and\n * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=50\">42</a> is of the opinion that elevation should be\n * accounted for in <em>zmanim</em> calculations. Related to this, Rabbi Yaakov Karp in <a href=\n * \"https://www.worldcat.org/oclc/919472094\">Shimush Zekeinim</a>, Ch. 1, page 17 states that obstructing horizons should\n * be factored into <em>zmanim</em> calculations. The setting defaults to false (elevation will not be used for\n * <em>zmanim</em> calculations besides sunrise and sunset), unless the setting is changed to true in {@link\n * #setUseElevation(boolean)}. This will impact sunrise and sunset-based <em>zmanim</em> such as {@link #getSunrise()},\n * {@link #getSunset()}, {@link #getSofZmanShmaGRA()}, <em>alos</em>-based <em>zmanim</em> such as {@link #getSofZmanShmaMGA()}\n * that are based on a fixed offset of sunrise or sunset and <em>zmanim</em> based on a percentage of the day such as\n * {@link ComplexZmanimCalendar#getSofZmanShmaMGA90MinutesZmanis()} that are based on sunrise and sunset. Even when set to\n * true it will not impact <em>zmanim</em> that are a degree-based offset of sunrise and sunset, such as {@link\n * ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()} or {@link ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()} since\n * these <em>zmanim</em> are not linked to sunrise or sunset times (the calculations are based on the astronomical definition of\n * sunrise and sunset calculated in a vacuum with the solar radius above the horizon), and are therefore not impacted by the use\n * of elevation.\n * For additional information on the <em>halachic</em> impact of elevation on <em>zmanim</em> see:\n * <ul>\n * <li><a href=\"https://www.nli.org.il/en/books/NNL_ALEPH002542826/NLI\">Zmanei Halacha Lema'aseh</a> 4th edition by <a href=\n * \"http://beinenu.com/rabbis/%D7%94%D7%A8%D7%91-%D7%99%D7%93%D7%99%D7%93%D7%99%D7%94-%D7%9E%D7%A0%D7%AA\">Rabbi Yedidya Manat</a>.\n * See section 1, pages 11-12 for a very concise write-up, with details in section 2, pages 37 - 63 and 133 - 151.</li>\n * <li><a href=\"https://www.worldcat.org/oclc/1158574217\">Zmanim Kehilchasam</a> 7th edition, by Rabbi Dovid Yehuda Burstein,  vol 1,\n * chapter 2, pages 95 - 188.</li>\n * <li><a href=\"https://www.worldcat.org/oclc/36089452\">Hazmanim Bahalacha</a> by Rabbi Chaim Banish , perek 7, pages 53 - 63.</li>\n * </ul>\n *\n * <p><b>Note:</b> It is important to read the technical notes on top of the {@link AstronomicalCalculator} documentation\n * before using this code.\n * <p>I would like to thank <a href=\"https://www.worldcat.org/search?q=au%3AShakow%2C+Yaakov\">Rabbi Yaakov Shakow</a>, the\n * author of Luach Ikvei Hayom who spent a considerable amount of time reviewing, correcting and making suggestions on the\n * documentation in this library.\n * <h2>Disclaimer:</h2> I did my best to get accurate results, but please double-check before relying on these\n * <em>zmanim</em> for <em>halacha lema'aseh</em>.\n *\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2022\n */\nexport class ZmanimCalendar extends AstronomicalCalendar {\n  /**\n   * Is elevation factored in for some zmanim (see {@link #isUseElevation()} for additional information).\n   * @see #isUseElevation()\n   * @see #setUseElevation(boolean)\n   */\n  private useElevation: boolean = false;\n\n  /**\n   * Is elevation above sea level calculated for times besides sunrise and sunset. According to Rabbi Dovid Yehuda\n   * Bursztyn in his <a href=\"https://www.worldcat.org/oclc/659793988\">Zmanim Kehilchasam (second edition published\n   * in 2007)</a> chapter 2 (pages 186-187) no <em>zmanim</em> besides sunrise and sunset should use elevation. However,\n   * Rabbi Yechiel Avrahom Zilber in the <a href=\"https://hebrewbooks.org/51654\">Birur Halacha Vol. 6</a> Ch. 58 Pages\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=42\">34</a> and <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=50\">42</a> is of the opinion that elevation should be\n   * accounted for in <em>zmanim</em> calculations. Related to this, Rabbi Yaakov Karp in <a href=\n   * \"https://www.worldcat.org/oclc/919472094\">Shimush Zekeinim</a>, Ch. 1, page 17 states that obstructing horizons\n   * should be factored into <em>zmanim</em> calculations.The setting defaults to false (elevation will not be used for\n   * <em>zmanim</em> calculations), unless the setting is changed to true in {@link #setUseElevation(boolean)}. This will\n   * impact sunrise and sunset based <em>zmanim</em> such as {@link #getSunrise()}, {@link #getSunset()},\n   * {@link #getSofZmanShmaGRA()}, alos based <em>zmanim</em> such as {@link #getSofZmanShmaMGA()} that are based on a\n   * fixed offset of sunrise or sunset and <em>zmanim</em> based on a percentage of the day such as {@link\n   * ComplexZmanimCalendar#getSofZmanShmaMGA90MinutesZmanis()} that are based on sunrise and sunset. It will not impact\n   * <em>zmanim</em> that are a degree based offset of sunrise and sunset, such as\n   * {@link ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()} or {@link ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()}.\n   *\n   * @return if the use of elevation is active\n   *\n   * @see #setUseElevation(boolean)\n   */\n  public isUseElevation(): boolean {\n    return this.useElevation;\n  }\n\n  /**\n   * Sets whether elevation above sea level is factored into <em>zmanim</em> calculations for times besides sunrise and sunset.\n   * See {@link #isUseElevation()} for more details.\n   * @see #isUseElevation()\n   *\n   * @param useElevation set to true to use elevation in <em>zmanim</em> calculations\n   */\n  public setUseElevation(useElevation: boolean): void {\n    this.useElevation = useElevation;\n  }\n\n  /**\n   * Is astronomical <em>chatzos</em> used for <em>zmanim</em> calculations. The default value of <code>true</code> will\n   * keep the standard astronomical <em>chatzos</em> calculation, while setting it to <code>false</code> will use half of\n   * a solar day calculation for <em>chatzos</em>.\n   * @see #isUseAstronomicalChatzos()\n   * @see #setUseAstronomicalChatzos(boolean)\n   * @see #getChatzos()\n   * @see #getSunTransit()\n   * @see #getChatzosAsHalfDay()\n   * @see #useAstronomicalChatzosForOtherZmanim\n   */\n  private useAstronomicalChatzos: boolean = true;\n\n  /**\n   * Is {@link #getSunTransit() astronomical <em>chatzos</em>} used for {@link #getChatzos()} for enhanced accuracy. For\n   * example, as the day lengthens, the second half of the day is longer than the first and astronomical <em>chatzos</em>\n   * would be a drop earlier than half of the time between sunrise and sunset.\n   *\n   * @todo In the future, if this is set to true, the following may change to enhance accuracy. {@link #getSofZmanShmaGRA()\n   * <em>Sof zman Shma</em> GRA} would be calculated as 3 <em>shaos zmaniyos</em> after sunrise, but the <em>shaos\n   * zmaniyos</em> would be calculated as a 6th of the time between sunrise and <em>chatzos</em>, as opposed to a 12th of the\n   * time between sunrise and sunset. {@link #getMinchaGedola() <em>mincha gedola</em>} will be calculated as half a\n   * <em>shaah zmanis</em> of afternoon hours (a 6th of the time between <em>chatzos</em> and sunset after astronomical\n   * <em>chatzos</em> as opposed to 6.5 <em>shaos zmaniyos</em> after sunrise. {@link #getPlagHamincha() <em>Plag\n   * hamincha</em>} would be calculated as 4.75 <em>shaos zmaniyos</em> after astronomical <em>chatzos</em> as opposed to 10.75\n   * <em>shaos zmaniyos</em> after sunrise. Etc.\n   *\n   * @return if the use of astronomical <em>chatzos</em> is active.\n   * @see #useAstronomicalChatzos\n   * @see #setUseAstronomicalChatzos(boolean)\n   * @see #getChatzos()\n   * @see #getSunTransit()\n   * @see #getChatzosAsHalfDay()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public isUseAstronomicalChatzos(): boolean {\n    return this.useAstronomicalChatzos;\n  }\n\n  /**\n   * Sets if astronomical <em>chatzos</em> should be used in calculations of other <em>zmanim</em> for enhanced accuracy.\n   * @param useAstronomicalChatzos set to true to use astronomical in <em>chatzos</em> in <em>zmanim</em> calculations.\n   * @see #useAstronomicalChatzos\n   * @see #isUseAstronomicalChatzos()\n   * @see #getChatzos()\n   * @see #getSunTransit()\n   * @see #getChatzosAsHalfDay()\n   * @see #setUseAstronomicalChatzosForOtherZmanim(boolean)\n   */\n  public setUseAstronomicalChatzos(useAstronomicalChatzos: boolean): void {\n    this.useAstronomicalChatzos = useAstronomicalChatzos;\n  }\n\n  /**\n   * Is astronomical <em>chatzos</em> used for <em>zmanim</em> calculations besides <em>chatzos</em> itself for enhanced\n   * accuracy. The default value of <code>false</code> will keep the standard start to end of day calculations, while setting\n   * it to <code>true</code> will use half of a solar day calculation for <em>zmanim</em>.\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   * @see #setUseAstronomicalChatzosForOtherZmanim(boolean)\n   * @see #isUseAstronomicalChatzos()\n   * @see #setUseAstronomicalChatzos(boolean)\n   * @see #getChatzos()\n   */\n  private useAstronomicalChatzosForOtherZmanim: boolean = false;\n\n  /**\n   * Is astronomical <em>chatzos</em> used for <em>zmanim</em> calculations besides <em>chatzos</em> itself for enhanced\n   * accuracy. For example, as the day is lengthening (as we approach spring season), the second half of the day is longer than\n   * the first and astronomical <em>chatzos</em> would be a drop earlier than half of the time between sunrise and sunset.\n   * Conversely, the second half of the day would be shorter in the autumn as the days start getting shorter.\n   *\n   * @todo In the future, if this is set to true, the following may change to enhance accuracy. {@link #getSofZmanShmaGRA()\n   * <em>Sof zman Shma</em> GRA} would be calculated as 3 <em>shaos zmaniyos</em> after sunrise, but the <em>shaos\n   * zmaniyos</em> would be calculated as a 6th of the time between sunrise and <em>chatzos</em>, as opposed to a 12th of the\n   * time between sunrise and sunset. {@link #getMinchaGedola() <em>mincha gedola</em>} will be calculated as half a\n   * <em>shaah zmanis</em> of afternoon hours (a 6th of the time between <em>chatzos</em> and sunset after astronomical\n   * <em>chatzos</em> as opposed to 6.5 <em>shaos zmaniyos</em> after sunrise. {@link #getPlagHamincha() <em>Plag\n   * hamincha</em>} would be calculated as 4.75 <em>shaos zmaniyos</em> after astronomical <em>chatzos</em> as opposed to 10.75\n   * <em>shaos zmaniyos</em> after sunrise. Etc.\n   *\n   * @return if the use of astronomical <em>chatzos</em> is active.\n   * @see #useAstronomicalChatzosForOtherZmanim\n   * @see #setUseAstronomicalChatzosForOtherZmanim(boolean)\n   * @see #useAstronomicalChatzos\n   * @see #setUseAstronomicalChatzos(boolean)\n   */\n  public isUseAstronomicalChatzosForOtherZmanim(): boolean {\n    return this.useAstronomicalChatzosForOtherZmanim;\n  }\n\n  /**\n   * Sets if astronomical <em>chatzos</em> should be used in calculations of other <em>zmanim</em> for enhanced accuracy.\n   * @param useAstronomicalChatzosForOtherZmanim set to true to use astronomical in <em>chatzos</em> in <em>zmanim</em> calculations.\n   * @see #useAstronomicalChatzos\n   * @see #isUseAstronomicalChatzos()\n   */\n  public setUseAstronomicalChatzosForOtherZmanim(useAstronomicalChatzosForOtherZmanim: boolean): void {\n    this.useAstronomicalChatzosForOtherZmanim = useAstronomicalChatzosForOtherZmanim;\n  }\n\n  /**\n   * The zenith of 16.1&deg; below geometric zenith (90&deg;). This calculation is used for determining <em>alos</em>\n   * (dawn) and <em>tzais</em> (nightfall) in some opinions. It is based on the calculation that the time between dawn\n   * and sunrise (and sunset to nightfall) is 72 minutes, the time that is takes to walk 4 <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> at 18 minutes a mil (<a href=\n   * \"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others). The sun's position below the horizon 72 minutes\n   * before {@link #getSunrise() sunrise} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> is\n   * 16.1&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @see #getAlosHashachar()\n   * @see ComplexZmanimCalendar#getAlos16Point1Degrees()\n   * @see ComplexZmanimCalendar#getTzais16Point1Degrees()\n   * @see ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()\n   * @see ComplexZmanimCalendar#getSofZmanTfilaMGA16Point1Degrees()\n   * @see ComplexZmanimCalendar#getMinchaGedola16Point1Degrees()\n   * @see ComplexZmanimCalendar#getMinchaKetana16Point1Degrees()\n   * @see ComplexZmanimCalendar#getPlagHamincha16Point1Degrees()\n   * @see ComplexZmanimCalendar#getPlagAlos16Point1ToTzaisGeonim7Point083Degrees()\n   * @see ComplexZmanimCalendar#getSofZmanShmaAlos16Point1ToSunset()\n   */\n  protected static readonly ZENITH_16_POINT_1: number = ZmanimCalendar.GEOMETRIC_ZENITH + 16.1;\n\n  /**\n   * The zenith of 8.5&deg; below geometric zenith (90&deg;). This calculation is used for calculating <em>alos</em>\n   * (dawn) and <em>tzais</em> (nightfall) in some opinions. This calculation is based on the sun's position below the\n   * horizon 36 minutes after {@link #getSunset() sunset} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\n   * is 8.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. The <em><a href=\n   * \"https://www.worldcat.org/oclc/29283612\">Ohr Meir</a></em> considers this the time that 3 small stars are visible,\n   * which is later than the required 3 medium stars.\n   *\n   * @see #getTzais()\n   * @see ComplexZmanimCalendar#getTzaisGeonim8Point5Degrees()\n   */\n  protected static readonly ZENITH_8_POINT_5: number = ZmanimCalendar.GEOMETRIC_ZENITH + 8.5;\n\n  /**\n   * The default <em>Shabbos</em> candle lighting offset is 18 minutes. This can be changed via the\n   * {@link #setCandleLightingOffset(double)} and retrieved by the {@link #getCandleLightingOffset()}.\n   */\n  private candleLightingOffset: number = 18;\n\n  /**\n   * This method will return {@link #getSeaLevelSunrise() sea level sunrise} if {@link #isUseElevation()} is false (the\n   * default), or elevation adjusted {@link AstronomicalCalendar#getSunrise()} if it is true. This allows relevant <em>zmanim</em>\n   * in this and extending classes (such as the {@link ComplexZmanimCalendar}) to automatically adjust to the elevation setting.\n   *\n   * @return {@link #getSeaLevelSunrise()} if {@link #isUseElevation()} is false (the default), or elevation adjusted\n   *         {@link AstronomicalCalendar#getSunrise()} if it is true.\n   * @see com.kosherjava.zmanim.AstronomicalCalendar#getSunrise()\n   */\n  protected getElevationAdjustedSunrise(): DateTime | null {\n    if (this.isUseElevation()) {\n      return super.getSunrise();\n    }\n    return this.getSeaLevelSunrise();\n  }\n\n  /**\n   * This method will return {@link #getSeaLevelSunrise() sea level sunrise} if {@link #isUseElevation()} is false (the default),\n   * or elevation adjusted {@link AstronomicalCalendar#getSunrise()} if it is true. This allows relevant <em>zmanim</em>\n   * in this and extending classes (such as the {@link ComplexZmanimCalendar}) to automatically adjust to the elevation setting.\n   *\n   * @return {@link #getSeaLevelSunset()} if {@link #isUseElevation()} is false (the default), or elevation adjusted\n   *         {@link AstronomicalCalendar#getSunset()} if it is true.\n   * @see AstronomicalCalendar#getSunset()\n   */\n  protected getElevationAdjustedSunset(): DateTime | null {\n    if (this.isUseElevation()) {\n      return super.getSunset();\n    }\n    return this.getSeaLevelSunset();\n  }\n\n  /**\n   * A method that returns <em>tzais</em> (nightfall) when the sun is {@link #ZENITH_8_POINT_5 8.5&deg;} below the\n   * {@link #GEOMETRIC_ZENITH geometric horizon} (90&deg;) after {@link #getSunset() sunset}, a time that Rabbi Meir\n   * Posen in his the <em><a href=\"https://www.worldcat.org/oclc/29283612\">Ohr Meir</a></em> calculated that 3 small\n   * stars are visible, which is later than the required 3 medium stars. See the {@link #ZENITH_8_POINT_5} constant.\n   *\n   * @see #ZENITH_8_POINT_5\n   *\n   * @return The <code>Date</code> of nightfall. If the calculation can't be computed such as northern and southern\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\n   *         low enough below the horizon for this calculation, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_8_POINT_5\n   * ComplexZmanimCalendar#getTzaisGeonim8Point5Degrees() that returns an identical time to this generic <em>tzais</em>\n   */\n  public getTzais(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ZmanimCalendar.ZENITH_8_POINT_5);\n  }\n\n  /**\n   * Returns <em>alos</em> (dawn) based on the time when the sun is {@link #ZENITH_16_POINT_1 16.1&deg;} below the\n   * eastern {@link #GEOMETRIC_ZENITH geometric horizon} before {@link #getSunrise() sunrise}. This is based on the\n   * calculation that the time between dawn and sunrise (and sunset to nightfall) is 72 minutes, the time that is\n   * takes to walk 4 <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> at\n   * 18 minutes a mil (<a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others). The sun's position\n   * below the horizon 72 minutes before {@link #getSunrise() sunrise} in Jerusalem on the <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> is\n   * 16.1&deg; below {@link #GEOMETRIC_ZENITH}.\n   *\n   * @see #ZENITH_16_POINT_1\n   * @see ComplexZmanimCalendar#getAlos16Point1Degrees()\n   *\n   * @return The <code>Date</code> of dawn. If the calculation can't be computed such as northern and southern\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\n   *         low enough below the horizon for this calculation, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getAlosHashachar(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ZmanimCalendar.ZENITH_16_POINT_1);\n  }\n\n  /**\n   * Method to return <em>alos</em> (dawn) calculated as 72 minutes before {@link #getSunrise() sunrise} or\n   * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting). This time\n   * is based on the time to walk the distance of 4 <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> at 18 minutes a mil. The\n   * 72-minute time (but not the concept of fixed minutes) is based on the opinion that the time of the <em>Neshef</em>\n   * (twilight between dawn and sunrise) does not vary by the time of year or location but depends on the time it takes\n   * to walk the distance of 4 mil.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   */\n  public getAlos72(): DateTime | null {\n    return ZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -72 * ZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * This method returns {@link #getSunTransit() Astronomical <em>chatzos</em>} if the\n   * {@link com.kosherjava.zmanim.util.AstronomicalCalculator calculator} class used supports it and\n   * {@link #isUseAstronomicalChatzos() isUseAstronomicalChatzos()} is set to <em>true</em> or the {@link #getChatzosAsHalfDay()\n   * halfway point between sunrise and sunset} if it does not support it or it is not configured to use it. There are currently\n   * two {@link com.kosherjava.zmanim.util.AstronomicalCalculator calculators} available in the API, the default {@link\n   * com.kosherjava.zmanim.util.NOAACalculator NOAA calculator} and the {@link com.kosherjava.zmanim.util.SunTimesCalculator USNO\n   * calculator}. The USNO calculator calculates <em>chatzos</em> as halfway between sunrise and sunset (identical to six <em>shaos\n   * zmaniyos</em> after sunrise), while the NOAACalculator calculates it more accurately as {@link #getSunTransit() astronomical\n   * <em>chatzos</em>}. See <a href=\"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition of <em>Chatzos</em></a>\n   * for a detailed explanation of the ways to calculate <em>Chatzos</em>. Since half-day <em>chatzos</em> can be <code>null</code> in\n   * the Arctic on a day when either sunrise or sunset did not happen and astronomical <em>chatzos</em> can be calculated even in the\n   * Arctic, if half-day <em>chatzos</em> calculates as <code>null</code> and astronomical <em>chatzos</em> is supported by the\n   * calculator, astronomical <em>chatzos</em> will be returned to avoid returning a <code>null</code>.\n   *\n   * @see AstronomicalCalendar#getSunTransit()\n   * @see #getChatzosAsHalfDay()\n   * @see #isUseAstronomicalChatzos()\n   * @see #setUseAstronomicalChatzos(boolean)\n   * @return the <code>Date</code> of <em>chatzos</em>. If the calculation can't be computed such as in the Arctic Circle\n   *         where there is at least one day where the sun does not rise, and one where it does not set, and the calculator does not\n   *         support astronomical calculations (that will never report a <code>null</code>) a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getChatzos(): DateTime | null {\n    if (this.useAstronomicalChatzos) {\n      return this.getSunTransit(); // can be null of the calculator does not support astronomical chatzos\n    }\n\n    const halfDayChatzos: DateTime | null = this.getChatzosAsHalfDay();\n    return halfDayChatzos === null\n        ? this.getSunTransit() // can be null if the calculator does not support astronomical chatzos\n        : halfDayChatzos;\n  }\n\n  /**\n   * Returns <em>chatzos</em> calculated as halfway between sunrise and sunset. Many are of the opinion that\n   * <em>chatzos</em> is calculated as the midpoint between {@link #getSeaLevelSunrise() sea level sunrise} and\n   * {@link #getSeaLevelSunset() sea level sunset}, despite it not being the most accurate way to calculate it. A day\n   * starting at <em>alos</em> and ending at <em>tzais</em> using the same time or degree offset will also return\n   * the same time. In reality due to lengthening or shortening of day, this is not necessarily the exact midpoint of\n   * the day, but it is very close. This method allows you to use the NOAACalculator and still calculate <em>chatzos\n   * </em> as six <em>shaos zmaniyos</em> after sunrise. There are currently two {@link\n   * com.kosherjava.zmanim.util.AstronomicalCalculator calculators} available in the API, the {@link\n   * com.kosherjava.zmanim.util.NOAACalculator} and the {@link com.kosherjava.zmanim.util.SunTimesCalculator}.\n   * The SunTimesCalculator calculates <em>chatzos</em> as halfway between sunrise and sunset (and of six <em>shaos\n   * zmaniyos</em>), while the NOAACalculator calculates it as astronomical <em>chatzos</em> that is slightly more\n   * accurate. This method allows you to use the NOAACalculator and still calculate <em>chatzos</em> as six <em>shaos\n   * zmaniyos</em> after sunrise. See <a href=\"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition\n   * of <em>Chatzos</em></a> for a detailed explanation of the ways to calculate <em>Chatzos</em>.\n   *\n   * @see com.kosherjava.zmanim.util.NOAACalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see com.kosherjava.zmanim.util.SunTimesCalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see com.kosherjava.zmanim.util.AstronomicalCalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see AstronomicalCalendar#getSunTransit(Date, Date)\n   * @see #getChatzos()\n   * @see #getSunTransit()\n   * @see #isUseAstronomicalChatzos()\n   *\n   * @return the <code>Date</code> of the latest <em>chatzos</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getChatzosAsHalfDay(): DateTime | null {\n    return this.getSunTransit(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\n  }\n\n  /**\n   * A generic method for calculating the latest <em>zman krias shema</em> (time to recite shema in the morning) that is 3 *\n   * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and end of the day passed\n   * to this method. The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal\n   * hours), and the latest <em>zman krias shema</em> is calculated as 3 of those <em>shaos zmaniyos</em> after the beginning of\n   * the day. If {@link #isUseAstronomicalChatzosForOtherZmanim()} is <code>true</code>, the 3 <em>shaos zmaniyos</em> will be\n   * based on 1/6 of the time between sunrise and {@link #getSunTransit() astronomical <em>chatzos</em>}. As an example, passing\n   * {@link #getSunrise() sunrise} and {@link #getSunset() sunset} or {@link #getSeaLevelSunrise() sea level sunrise} and {@link\n   * #getSeaLevelSunset() sea level sunset} to this method (or {@link #getElevationAdjustedSunrise()} and {@link\n   * #getElevationAdjustedSunset()} that is driven off the {@link #isUseElevation()} setting) will return <em>sof zman krias\n   * shema</em> according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. In cases\n   * where the start and end dates are not synchronous such as in {@link ComplexZmanimCalendar\n   * #getSofZmanShmaAlos16Point1ToTzaisGeonim7Point083Degrees()} <code>false</code> should be passed to the synchronous parameter\n   * to ensure that {@link #isUseAstronomicalChatzosForOtherZmanim()} will not be used.\n   *\n   * @param startOfDay\n   *            the start of day for calculating <em>zman krias shema</em>. This can be sunrise or any <em>alos</em> passed\n   *            to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>zman krias shema</em>. This can be sunset or any <em>tzais</em> passed to\n   *            this method.\n   * @param synchronous\n   *            If the <em>zman</em> has a synchronous start and end of the day. If this is <code>false</code>, using a {@link\n   *            #isUseAstronomicalChatzosForOtherZmanim()} makes no sense and will be ignored even if set to true, since by\n   *            definition <em>chatzos</em> will not be the middle of the day for the <em>zman</em>.\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   * @return the <code>Date</code> of the latest <em>zman shema</em> based on the start and end of day times passed to this\n   *         method. If the calculation can't be computed such as in the Arctic Circle where there is at least one day\n   *         a year where the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanShma(startOfDay: DateTime | null, endOfDay: DateTime | null, synchronous?: boolean): DateTime | null {\n    if (this.isUseAstronomicalChatzosForOtherZmanim() && synchronous) {\n      return this.getHalfDayBasedZman(startOfDay, this.getChatzos(), 3);\n    }\n\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 3);\n  }\n\n  /**\n   * A generic method for calculating the latest <em>zman krias shema</em> that calls {@link #getSofZmanShma(Date, Date, boolean)}\n   * passing <code>false</code> to the synchronous parameter since there is no way to know if the start and end of the day are\n   * synchronous. Passing true when they are not synchronous is too much of a risk. See information on that method for more details.\n   * @param startOfDay\n   *            the start of day for calculating <em>zman krias shema</em>. This can be sunrise or any <em>alos</em> passed\n   *            to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>zman krias shema</em>. This can be sunset or any <em>tzais</em> passed to\n   *            this method.\n   * @return the <code>Date</code> of the latest <em>zman shema</em> based on the start and end of day times passed to this\n   *         method. If the calculation can't be computed such as in the Arctic Circle where there is at least one day\n   *         a year where the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getSofZmanShma(Date, Date, boolean)\n   */\n  /*\n  public Date getSofZmanShma(Date startOfDay, Date endOfDay) {\n    return getSofZmanShma(startOfDay, endOfDay, false);\n  }\n  */\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite shema in the morning) that is 3 *\n   * {@link #getShaahZmanisGra() <em>shaos zmaniyos</em>} (solar hours) after {@link #getSunrise() sunrise} or\n   * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\n   * to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>.\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunset() sea level\n   * sunset} or from {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the\n   * {@link #isUseElevation()} setting).\n   *\n   * @see #getSofZmanShma(Date, Date)\n   * @see #getShaahZmanisGra()\n   * @see #isUseElevation()\n   * @see ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()\n   * @return the <code>Date</code> of the latest <em>zman shema</em> according to the GRA. If the calculation can't be\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\n   *         and one where it does not set, a <code>null</code> will be returned. See the detailed explanation on top\n   *         of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanShmaGRA(): DateTime | null {\n    return this.getSofZmanShma(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite shema in the morning) that is 3 *\n   * {@link #getShaahZmanisMGA() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72()}, according to the\n   * <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a>. The day is calculated\n   * from 72 minutes before {@link #getSeaLevelSunrise() sea level sunrise} to 72 minutes after {@link\n   * #getSeaLevelSunset() sea level sunset} or from 72 minutes before {@link #getSunrise() sunrise} to {@link #getSunset()\n   * sunset} (depending on the {@link #isUseElevation()} setting).\n   *\n   * @return the <code>Date</code> of the latest <em>zman shema</em>. If the calculation can't be computed such as in\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getSofZmanShma(Date, Date)\n   * @see ComplexZmanimCalendar#getShaahZmanis72Minutes()\n   * @see ComplexZmanimCalendar#getAlos72()\n   * @see ComplexZmanimCalendar#getSofZmanShmaMGA72Minutes()\n   */\n  public getSofZmanShmaMGA(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos72(), this.getTzais72(), true);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of <em>Rabbeinu Tam</em> that\n   * <em>tzais hakochavim</em> is calculated as 72 minutes after sunset, the time it takes to walk 4 <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> at 18 minutes a mil.\n   * According to the <a href=\"https://en.wikipedia.org/wiki/Samuel_Loew\">Machtzis Hashekel</a> in Orach Chaim\n   * 235:3, the <a href=\"https://en.wikipedia.org/wiki/Joseph_ben_Meir_Teomim\">Pri Megadim</a> in Orach\n   * Chaim 261:2 (see the Biur Halacha) and others (see Hazmanim Bahalacha 17:3 and 17:5) the 72 minutes are standard\n   * clock minutes any time of the year in any location. Depending on the {@link #isUseElevation()} setting, a 72-minute\n   * offset from  either {@link #getSunset() sunset} or {@link #getSeaLevelSunset() sea level sunset} is used.\n   *\n   * @see ComplexZmanimCalendar#getTzais16Point1Degrees()\n   * @return the <code>Date</code> representing 72 minutes after sunset. If the calculation can't be\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\n   *         and one where it does not set, a <code>null</code> will be returned See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getTzais72(): DateTime | null {\n    return ZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 72 * ZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * A method to return candle lighting time, calculated as {@link #getCandleLightingOffset()} minutes before\n   * {@link #getSeaLevelSunset() sea level sunset}. This will return the time for any day of the week, since it can be\n   * used to calculate candle lighting time for <em>Yom Tov</em> (mid-week holidays) as well. Elevation adjustments\n   * are intentionally not performed by this method, but you can calculate it by passing the elevation adjusted sunset\n   * to {@link #getTimeOffset(Date, long)}.\n   *\n   * @return candle lighting time. If the calculation can't be computed such as in the Arctic Circle where there is at\n   *         least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will\n   *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getSeaLevelSunset()\n   * @see #getCandleLightingOffset()\n   * @see #setCandleLightingOffset(double)\n   */\n  public getCandleLighting(): DateTime | null {\n    return ZmanimCalendar.getTimeOffset(this.getSeaLevelSunset(), -this.getCandleLightingOffset() * ZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * A generic method for calculating the latest <em>zman tfilah</em> (time to recite the morning prayers)\n   * that is 4 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and\n   * end of the day passed to this method.\n   * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours),\n   * and <em>sof zman tfila</em> is calculated as 4 of those <em>shaos zmaniyos</em> after the beginning of the day.\n   * As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset() sunset} or {@link #getSeaLevelSunrise()\n   * sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()}\n   * elevation setting) to this method will return <em>zman tfilah</em> according to the opinion of the <a href=\n   * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. This method's synchronous parameter indicates if the start\n   * and end of day for the calculation are synchronous, having the same offset. This is typically the case, but some\n   * <em>zmanim</em> calculations are based on a start and end at different offsets from the real start and end of the day,\n   * such as starting the day at <em>alos</em> and an ending it at <em>tzais Geonim</em> or some other variant. If the day\n   * is not synchronous a {@link #getHalfDayBasedZman(Date, Date, double) half-day based calculations} will be bypassed.\n   * It would be illogical to use a half-day based calculation that start/end at <em>chatzos</em> when the two \"halves\" of\n   * the day are not equal, and the halfway point between them is not at <em>chatzos</em>.\n   *\n   * @param startOfDay\n   *            the start of day for calculating <em>zman tfilah</em>. This can be sunrise or any <em>alos</em> passed\n   *            to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>zman tfilah</em>. This can be sunset or any <em>tzais</em> passed\n   *            to this method.\n   * @param synchronous\n   *            If the <em>zman</em> has a synchronous start and end of the day. If this is <code>false</code>, using a {@link\n   *            #isUseAstronomicalChatzosForOtherZmanim()} makes no sense and will be ignored even if set to true, since by\n   *            definition <em>chatzos</em> will not be the middle of the day for the <em>zman</em>.\n   * @return the <code>Date</code> of the latest <em>zman tfilah</em> based on the start and end of day times passed\n   *         to this method. If the calculation can't be computed such as in the Arctic Circle where there is at least\n   *         one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanTfila(startOfDay: DateTime | null, endOfDay: DateTime | null, synchronous?: boolean): DateTime | null {\n    if (this.isUseAstronomicalChatzosForOtherZmanim() && synchronous) {\n      return this.getHalfDayBasedZman(startOfDay, this.getChatzos(), 4);\n    }\n\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 4);\n  }\n\n  /**\n   * A generic method for calculating the latest <em>zman tfila</em> that calls {@link #getSofZmanTfila(Date, Date, boolean)}\n   * passing <code>false</code> to the synchronous parameter since there is no way to know if the start and end of the day are\n   * synchronous. Passing true when they are not synchronous is too much of a risk. See information on that method for more details.\n   * @param startOfDay\n   *            the start of day for calculating <em>zman tfilah</em>. This can be sunrise or any <em>alos</em> passed\n   *            to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>zman tfilah</em>. This can be sunset or any <em>tzais</em> passed to\n   *            this method.\n   * @return the <code>Date</code> of the latest <em>zman tfilah</em> based on the start and end of day times passed to this\n   *         method. If the calculation can't be computed such as in the Arctic Circle where there is at least one day\n   *         a year where the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getSofZmanShma(Date, Date, boolean)\n   */\n  /*\n  public Date getSofZmanTfila(Date startOfDay, Date endOfDay) {\n    return getSofZmanTfila(startOfDay, endOfDay, false);\n  }\n  */\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite shema in the morning) that is 4 *\n   * {@link #getShaahZmanisGra() <em>shaos zmaniyos</em> }(solar hours) after {@link #getSunrise() sunrise} or\n   * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\n   * to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>.\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunset() sea level\n   * sunset} or from {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the\n   * {@link #isUseElevation()} setting).\n   *\n   * @see #getSofZmanTfila(Date, Date)\n   * @see #getShaahZmanisGra()\n   * @see ComplexZmanimCalendar#getSofZmanTfilaBaalHatanya()\n   * @return the <code>Date</code> of the latest <em>zman tfilah</em>. If the calculation can't be computed such as in\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanTfilaGRA(): DateTime | null {\n    return this.getSofZmanTfila(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite shema in the morning) that is 4 *\n   * {@link #getShaahZmanisMGA() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72()}, according to the\n   * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a></em>. The day is calculated\n   * from 72 minutes before {@link #getSeaLevelSunrise() sea level sunrise} to 72 minutes after {@link\n   * #getSeaLevelSunset() sea level sunset} or from 72 minutes before {@link #getSunrise() sunrise} to {@link #getSunset()\n   * sunset} (depending on the {@link #isUseElevation()} setting).\n   *\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getSofZmanTfila(Date, Date)\n   * @see #getShaahZmanisMGA()\n   * @see #getAlos72()\n   */\n  public getSofZmanTfilaMGA(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos72(), this.getTzais72(), true);\n  }\n\n  /**\n   * A generic method for calculating <em>mincha gedola</em> (the earliest time to recite the <em>mincha</em> prayers) that\n   * is 6.5 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and end of the\n   * day passed to this method. The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em>\n   * (temporal hours), and <em>mincha gedola</em> is calculated as 6.5 of those <em>shaos zmaniyos</em> after the beginning\n   * of the day. As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset() sunset} or {@link\n   * #getSeaLevelSunrise() sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link\n   * #isUseElevation()} elevation setting) to this method will return <em>mincha gedola</em> according to the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. Alternatively, this method uses {@link\n   * #isUseAstronomicalChatzosForOtherZmanim()} to control if the time is based on 6.5 <em>shaos zmaniyos</em> into the day\n   * mentioned above, or as half an hour <em>zmaniyos</em> based on the second half of the day after <em>chatzos</em> ({@link\n   * #getSunTransit() astronomical <em>chatzos</em>} if supported by the {@link AstronomicalCalculator calculator} and {@link\n   * #isUseAstronomicalChatzos() configured} or {@link #getChatzosAsHalfDay() <em>chatzos</em> as half a day} if not. This\n   * method's synchronous parameter indicates if the start and end of day for the calculation are synchronous, having the same\n   * offset. This is typically the case, but some <em>zmanim</em> calculations are based on a start and end at different offsets\n   * from the real start and end of the day, such as starting the day at <em>alos</em> and an ending it at <em>tzais Geonim</em>\n   * or some other variant. If the day is not synchronous a {@link #getHalfDayBasedZman(Date, Date, double) half-day based\n   * calculations} will be bypassed. It would be illogical to use a half-day based calculation that start/end at <em>chatzos</em>\n   * when the two \"halves\" of the day are not equal, and the halfway point between them is not at <em>chatzos</em>.\n   *\n   * @param startOfDay\n   *            the start of day for calculating <em>Mincha gedola</em>. This can be sunrise or any <em>alos</em> passed\n   *            to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>Mincha gedola</em>. This can be sunset or any <em>tzais</em> passed\n   *            to this method.\n   * @param synchronous\n   *            If the <em>zman</em> has a synchronous start and end of the day. If this is <code>false</code>, using a {@link\n   *            #isUseAstronomicalChatzosForOtherZmanim()} makes no sense and will be ignored even if set to true, since by\n   *            definition <em>chatzos</em> will not be the middle of the day for the <em>zman</em>.\n   * @return the <code>Date</code> of the time of <em>Mincha gedola</em> based on the start and end of day times\n   *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\n   *         at least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will\n   *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getSunTransit()\n   * @see #getChatzosAsHalfDay()\n   * @see #getChatzos()\n   * @see #isUseAstronomicalChatzos()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public getMinchaGedola(): DateTime | null;\n  public getMinchaGedola(startOfDay: DateTime | null, endOfDay: DateTime | null, synchronous?: boolean): DateTime | null;\n  public getMinchaGedola(startOfDay?: DateTime | null, endOfDay?: DateTime | null, synchronous?: boolean): DateTime | null {\n    if (startOfDay === undefined && endOfDay === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      startOfDay = this.getElevationAdjustedSunrise();\n      // eslint-disable-next-line no-param-reassign\n      endOfDay = this.getElevationAdjustedSunset();\n      // eslint-disable-next-line no-param-reassign\n      synchronous = true;\n    }\n\n    if (this.isUseAstronomicalChatzosForOtherZmanim() && synchronous) {\n      return this.getHalfDayBasedZman(this.getChatzos(), endOfDay as DateTime | null, 0.5);\n    }\n\n    return this.getShaahZmanisBasedZman(startOfDay as DateTime | null, endOfDay as DateTime | null, 6.5);\n  }\n\n  /**\n   * A generic method for calculating <em>mincha gedola</em> that calls {@link #getMinchaGedola(Date, Date, boolean)} passing\n   * <code>false</code> to the synchronous parameter since there is no way to know if the start and end of the day are\n   * synchronous. Passing true when they are not synchronous is too much of a risk. See information on that method for more\n   * details.\n   * @param startOfDay\n   *            the start of day for calculating <em>Mincha gedola</em>. This can be sunrise or any <em>alos</em> passed\n   *            to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>Mincha gedola</em>. This can be sunset or any <em>tzais</em> passed to\n   *            this method.\n   * @return the <code>Date</code> of the latest <em>Mincha gedola</em> based on the start and end of day times passed to this\n   *         method. If the calculation can't be computed such as in the Arctic Circle where there is at least one day\n   *         a year where the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getMinchaGedola(Date, Date, boolean)\n   */\n  /*\n  public Date getMinchaGedola(Date startOfDay, Date endOfDay) {\n    return getMinchaGedola(startOfDay, endOfDay, false);\n  }\n  */\n\n  /**\n   * This method returns the latest <em>mincha gedola</em>,the earliest time one can pray <em>mincha</em> that is 6.5 *\n   * {@link #getShaahZmanisGra() <em>shaos zmaniyos</em>} (solar hours) after {@link #getSunrise() sunrise} or\n   * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\n   * to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. <em>Mincha gedola</em> is the earliest\n   * time one can pray <em>mincha</em>. The Ramba\"m is of the opinion that it is better to delay <em>mincha</em> until\n   * {@link #getMinchaKetana() <em>mincha ketana</em>} while the Ra\"sh, Tur, GRA and others are of the\n   * opinion that <em>mincha</em> can be prayed <em>lechatchila</em> starting at <em>mincha gedola</em>.\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunset() sea level\n   * sunset} or from {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\n   * setting).\n   * @todo Consider adjusting this to calculate the time as half an hour <em>zmaniyos</em> after either {@link\n   *         #getSunTransit() astronomical <em>chatzos</em>} or {@link #getChatzosAsHalfDay() <em>chatzos</em> as half a day}\n   *         for {@link AstronomicalCalculator calculators} that support it, based on {@link #isUseAstronomicalChatzos()}.\n   *\n   * @see #getMinchaGedola(Date, Date)\n   * @see #getShaahZmanisGra()\n   * @see #getMinchaKetana()\n   * @see ComplexZmanimCalendar#getMinchaGedolaBaalHatanya()\n   * @return the <code>Date</code> of the time of mincha gedola. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n\n  /*\n      public getMinchaGedola(): Date {\n          return this.getMinchaGedola(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\n      }\n  */\n\n  /**\n   * A generic method for calculating <em>samuch lemincha ketana</em>, / near <em>mincha ketana</em> time that is half\n   * an hour before {@link #getMinchaKetana(Date, Date)}  or 9 * <em>shaos zmaniyos</em> (temporal hours) after the\n   * start of the day, calculated using the start and end of the day passed to this method.\n   * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\n   * <em>samuch lemincha ketana</em> is calculated as 9 of those <em>shaos zmaniyos</em> after the beginning of the day.\n   * For example, passing {@link #getSunrise() sunrise} and {@link #getSunset() sunset} or {@link #getSeaLevelSunrise() sea\n   * level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\n   * setting) to this method will return <em>samuch lemincha ketana</em> according to the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. See the <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=60387&st=&pgnum=294\">Mechaber and Mishna Berurah 232</a> and <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=60388&pgnum=34\">249:2</a>.\n   *\n   * @param startOfDay\n   *            the start of day for calculating <em>samuch lemincha ketana</em>. This can be sunrise or any <em>alos</em>\n   *            passed to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>samuch lemincha ketana</em>. This can be sunset or any <em>tzais</em>\n   *            passed to this method.\n   * @param synchronous\n   *            If the <em>zman</em> has a synchronous start and end of the day. If this is <code>false</code>, using a {@link\n   *            #isUseAstronomicalChatzosForOtherZmanim()} makes no sense and will be ignored even if set to true, since by\n   *            definition <em>chatzos</em> will not be the middle of the day for the <em>zman</em>.\n   * @return the <code>Date</code> of the time of <em>Mincha ketana</em> based on the start and end of day times\n   *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\n   *         at least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will\n   *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see ComplexZmanimCalendar#getSamuchLeMinchaKetanaGRA()\n   * @see ComplexZmanimCalendar#getSamuchLeMinchaKetana16Point1Degrees()\n   * @see ComplexZmanimCalendar#getSamuchLeMinchaKetana72Minutes()\n   */\n  public getSamuchLeMinchaKetana(startOfDay: DateTime | null, endOfDay: DateTime | null, synchronous?: boolean): DateTime | null {\n    if (this.isUseAstronomicalChatzosForOtherZmanim() && synchronous) {\n      return this.getHalfDayBasedZman(this.getChatzos(), endOfDay, 3);\n    }\n\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 9);\n  }\n\n  /**\n   * A generic method for calculating <em>samuch lemincha ketana</em> that calls {@link #getSamuchLeMinchaKetana(Date, Date, boolean)}\n   * passing <code>false</code> to the synchronous parameter since there is no way to know if the start and end of the day are\n   * synchronous. Passing true when they are not synchronous is too much of a risk. See information on that method for more details.\n   * @param startOfDay\n   *            the start of day for calculating <em>samuch lemincha ketana</em>. This can be sunrise or any <em>alos</em>\n   *            passed to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>samuch lemincha ketana</em>. This can be sunset or any <em>tzais</em>\n   *            passed to this method.\n   * @return the <code>Date</code> of the time of <em>samuch lemincha ketana</em> based on the start and end of day times\n   *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\n   *         at least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will\n   *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getSamuchLeMinchaKetana(Date, Date, boolean)\n   */\n  /*\n  public Date getSamuchLeMinchaKetana(Date startOfDay, Date endOfDay) {\n    return getSamuchLeMinchaKetana(startOfDay, endOfDay, false);\n  }\n  */\n\n  /**\n   * A generic method for calculating <em>mincha ketana</em>, (the preferred time to recite the mincha prayers in\n   * the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others) that is\n   * 9.5 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and end\n   * of the day passed to this method.\n   * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\n   * <em>mincha ketana</em> is calculated as 9.5 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\n   * example, passing {@link #getSunrise() sunrise} and {@link #getSunset() sunset} or {@link #getSeaLevelSunrise() sea\n   * level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()}\n   * elevation setting) to this method will return <em>mincha ketana</em> according to the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. This method's synchronous parameter indicates if the start\n   * and end of day for the calculation are synchronous, having the same offset. This is typically the case, but some\n   * <em>zmanim</em> calculations are based on a start and end at different offsets from the real start and end of the day,\n   * such as starting the day at <em>alos</em> and an ending it at <em>tzais Geonim</em> or some other variant. If the day\n   * is not synchronous a {@link #getHalfDayBasedZman(Date, Date, double) half-day based calculations} will be bypassed.\n   * It would be illogical to use a half-day based calculation that start/end at <em>chatzos</em> when the two \"halves\" of\n   * the day are not equal, and the halfway point between them is not at <em>chatzos</em>.\n   *\n   * @param startOfDay\n   *            the start of day for calculating <em>Mincha ketana</em>. This can be sunrise or any <em>alos</em> passed\n   *            to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>Mincha ketana</em>. This can be sunset or any <em>tzais</em> passed to\n   *            this method.\n   * @param synchronous\n   *            If the <em>zman</em> has a synchronous start and end of the day. If this is <code>false</code>, using a {@link\n   *            #isUseAstronomicalChatzosForOtherZmanim()} makes no sense and will be ignored even if set to true, since by\n   *            definition <em>chatzos</em> will not be the middle of the day for the <em>zman</em>.\n   * @return the <code>Date</code> of the time of <em>Mincha ketana</em> based on the start and end of day times\n   *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\n   *         at least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will\n   *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaKetana(startOfDay: DateTime | null, endOfDay: DateTime | null, synchronous?: boolean): DateTime | null {\n    if (startOfDay === undefined && endOfDay === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      startOfDay = this.getElevationAdjustedSunrise();\n      // eslint-disable-next-line no-param-reassign\n      endOfDay = this.getElevationAdjustedSunset();\n      // eslint-disable-next-line no-param-reassign\n      synchronous = true;\n    }\n\n    if (this.isUseAstronomicalChatzosForOtherZmanim() && synchronous) {\n      return this.getHalfDayBasedZman(this.getChatzos(), endOfDay, 3.5);\n    }\n\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 9.5);\n  }\n\n  /**\n   * A generic method for calculating <em>mincha ketana</em> that calls {@link #getMinchaKetana(Date, Date, boolean)} passing\n   * <code>false</code> to the synchronous parameter since there is no way to know if the start and end of the day are synchronous.\n   * Passing true when they are not synchronous is too much of a risk. See information on that method for more details.\n   * @param startOfDay\n   *            the start of day for calculating <em>Mincha ketana</em>. This can be sunrise or any <em>alos</em> passed\n   *            to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>Mincha ketana</em>. This can be sunset or any <em>tzais</em> passed to\n   *            this method.\n   * @return the <code>Date</code> of the time of <em>Mincha ketana</em> based on the start and end of day times\n   *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\n   *         at least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will\n   *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getMinchaKetana(Date, Date, boolean)\n   */\n  /*\n  public Date getMinchaKetana(Date startOfDay, Date endOfDay) {\n    return getMinchaKetana(startOfDay, endOfDay, false);\n  }\n  */\n\n  /**\n   * This method returns <em>mincha ketana</em>,the preferred earliest time to pray <em>mincha</em> in the\n   * opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others, that is 9.5\n   * {@link #getShaahZmanisGra() <em>shaos zmaniyos</em>} (solar hours) after {@link #getSunrise() sunrise} or\n   * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\n   * to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. For more information on this see the\n   * documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}.\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunset() sea level\n   * sunset} or from {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\n   * setting).\n   *\n   * @see #getMinchaKetana(Date, Date)\n   * @see #getShaahZmanisGra()\n   * @see #getMinchaGedola()\n   * @see ComplexZmanimCalendar#getMinchaKetanaBaalHatanya()\n   * @return the <code>Date</code> of the time of mincha ketana. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n\n  /*\n      public getMinchaKetana(): Date {\n          return this.getMinchaKetana(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\n      }\n  */\n\n  /**\n   * A generic method for calculating <em>plag hamincha</em> (the earliest time that Shabbos can be started) that is\n   * 10.75 hours after the start of the day, (or 1.25 hours before the end of the day) based on the start and end of\n   * the day passed to the method.\n   * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\n   * <em>plag hamincha</em> is calculated as 10.75 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\n   * example, passing {@link #getSunrise() sunrise} and {@link #getSunset() sunset} or {@link #getSeaLevelSunrise() sea level\n   * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\n   * setting) to this method will return <em>plag mincha</em> according to the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. This method's synchronous parameter indicates if the start\n   * and end of day for the calculation are synchronous, having the same offset. This is typically the case, but some\n   * <em>zmanim</em> calculations are based on a start and end at different offsets from the real start and end of the day,\n   * such as starting the day at <em>alos</em> and an ending it at <em>tzais Geonim</em> or some other variant. If the day\n   * is not synchronous a {@link #getHalfDayBasedZman(Date, Date, double) half-day based calculations} will be bypassed. It\n   * would be illogical to use a half-day based calculation that start/end at <em>chatzos</em> when the two \"halves\" of the\n   * day are not equal, and the halfway point between them is not at <em>chatzos</em>.\n   *\n   * @param startOfDay\n   *            the start of day for calculating <em>plag hamincha</em>. This can be sunrise or any <em>alos</em> passed to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>plag hamincha</em>. This can be sunset or any <em>tzais</em> passed to this method.\n   * @param synchronous\n   *            If the <em>zman</em> has a synchronous start and end of the day. If this is <code>false</code>, using a {@link\n   *            #isUseAstronomicalChatzosForOtherZmanim()} makes no sense and will be ignored even if set to true, since by\n   *            definition <em>chatzos</em> will not be the middle of the day for the <em>zman</em>.\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em> based on the start and end of day times\n   *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\n   *         at least one day a year where the sun does not rise, and one where it does not set, a <code>null</code>\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getPlagHamincha(startOfDay: DateTime | null, endOfDay: DateTime | null, synchronous?: boolean): DateTime | null {\n    if (startOfDay === undefined && endOfDay === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      startOfDay = this.getElevationAdjustedSunrise();\n      // eslint-disable-next-line no-param-reassign\n      endOfDay = this.getElevationAdjustedSunset();\n      // eslint-disable-next-line no-param-reassign\n      synchronous = true;\n    }\n\n    if (this.isUseAstronomicalChatzosForOtherZmanim() && synchronous) {\n      return this.getHalfDayBasedZman(this.getChatzos(), endOfDay, 4.75);\n    }\n\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 10.75);\n  }\n\n  /**\n   * A generic method for calculating <em>plag hamincha</em> that calls {@link #getPlagHamincha(Date, Date, boolean)} passing\n   * <code>false</code> to the synchronous parameter since there is no way to know if the start and end of the day are synchronous.\n   * Passing true when they are not synchronous is too much of a risk. See information on that method for more details.\n   * @param startOfDay\n   *            the start of day for calculating <em>plag hamincha</em>. This can be sunrise or any <em>alos</em> passed to this method.\n   * @param endOfDay\n   *            the end of day for calculating <em>plag hamincha</em>. This can be sunset or any <em>tzais</em> passed to this method.\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em> based on the start and end of day times\n   *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\n   *         at least one day a year where the sun does not rise, and one where it does not set, a <code>null</code>\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getPlagHamincha(Date, Date, boolean)\n   */\n /*\n  public Date getPlagHamincha(Date startOfDay, Date endOfDay) {\n    return getPlagHamincha(startOfDay, endOfDay, false);\n  }\n */\n\n  /**\n   * This method returns <em>plag hamincha</em>, that is 10.75 * {@link #getShaahZmanisGra() <em>shaos zmaniyos</em>}\n   * (solar hours) after {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on\n   * the {@link #isUseElevation()} setting), according to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\"\n   * >GRA</a>. <em>Plag hamincha</em> is the earliest time that <em>Shabbos</em> can be started.\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunset() sea level\n   * sunset} or from {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\n   * setting).\n   *\n   * @see #getPlagHamincha(Date, Date)\n   * @see ComplexZmanimCalendar#getPlagHaminchaBaalHatanya()\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a null will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n\n  /*\n      public getPlagHamincha(): Date {\n          return this.getPlagHamincha(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\n      }\n  */\n\n  /**\n   * A method that returns a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}) according to\n   * the opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. This calculation divides the day\n   * based on the opinion of the <em>GRA</em> that the day runs from from {@link #getSeaLevelSunrise() sea level\n   * sunrise} to {@link #getSeaLevelSunset() sea level sunset} or {@link #getSunrise() sunrise} to {@link #getSunset()\n   * sunset} (depending on the {@link #isUseElevation()} setting). The day is split into 12 equal parts with each one\n   * being a <em>shaah zmanis</em>. This method is similar to {@link #getTemporalHour()}, but can account for elevation.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em> calculated from sunrise to sunset.\n   *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\n   *         where the sun does not rise, and one where it does not set, {@link Long#MIN_VALUE} will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getTemporalHour(Date, Date)\n   * @see #getSeaLevelSunrise()\n   * @see #getSeaLevelSunset()\n   * @see ComplexZmanimCalendar#getShaahZmanisBaalHatanya()\n   */\n  public getShaahZmanisGra(): number {\n    return this.getTemporalHour(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\n  }\n\n  /**\n   * A method that returns a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a></em> based on a 72-minute <em>alos</em>\n   * and <em>tzais</em>. This calculation divides the day that runs from dawn to dusk (for <em>sof zman krias shema</em> and\n   * <em>tfila</em>). Dawn for this calculation is 72 minutes before {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise()\n   * sea level sunrise} (depending on the {@link #isUseElevation()} elevation setting) and dusk is 72 minutes after {@link\n   * #getSunset() sunset} or {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\n   * setting). This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. Alternate methods of calculating\n   * a <em>shaah zmanis</em> according to the Magen Avraham (MGA) are available in the subclass {@link ComplexZmanimCalendar}.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getShaahZmanisMGA(): number {\n    return this.getTemporalHour(this.getAlos72(), this.getTzais72());\n  }\n\n  /**\n   * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\n   * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\n   *\n   * @see AstronomicalCalendar#AstronomicalCalendar()\n   */\n\n  /*\n      public ZmanimCalendar() {\n          super();\n      }\n  */\n\n  /**\n   * A constructor that takes a {@link GeoLocation} as a parameter.\n   *\n   * @param location\n   *            the location\n   */\n\n  /*\n  constructor(location?: GeoLocation) {\n    super(location);\n  }\n  */\n\n  /**\n   * A method to get the offset in minutes before {@link AstronomicalCalendar#getSeaLevelSunset() sea level sunset} which\n   * is used in calculating candle lighting time. The default time used is 18 minutes before sea level sunset. Some\n   * calendars use 15 minutes, while the custom in Jerusalem is to use a 40-minute offset. Please check the local custom\n   * for candle lighting time.\n   *\n   * @return Returns the currently set candle lighting offset in minutes.\n   * @see #getCandleLighting()\n   * @see #setCandleLightingOffset(double)\n   */\n  public getCandleLightingOffset(): number {\n    return this.candleLightingOffset;\n  }\n\n  /**\n   * A method to set the offset in minutes before {@link AstronomicalCalendar#getSeaLevelSunset() sea level sunset} that is\n   * used in calculating candle lighting time. The default time used is 18 minutes before sunset. Some calendars use 15\n   * minutes, while the custom in Jerusalem is to use a 40-minute offset.\n   *\n   * @param candleLightingOffset\n   *            The candle lighting offset to set in minutes.\n   * @see #getCandleLighting()\n   * @see #getCandleLightingOffset()\n   */\n  public setCandleLightingOffset(candleLightingOffset: number): void {\n    this.candleLightingOffset = candleLightingOffset;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getClassName() {\n    return 'com.kosherjava.zmanim.ZmanimCalendar';\n  }\n\n  /**\n   * This is a utility method to determine if the current Date (date-time) passed in has a <em>melacha</em> (work) prohibition.\n   * Since there are many opinions on the time of <em>tzais</em>, the <em>tzais</em> for the current day has to be passed to this\n   * class. Sunset is the classes current day's {@link #getElevationAdjustedSunset() elevation adjusted sunset} that observes the\n   * {@link #isUseElevation()} settings. The {@link JewishCalendar#getInIsrael()} will be set by the inIsrael parameter.\n   *\n   * @param currentTime the current time\n   * @param tzais the time of tzais\n   * @param inIsrael whether to use Israel holiday scheme or not\n   *\n   * @return true if <em>melacha</em> is prohibited or false if it is not.\n   *\n   * @see JewishCalendar#isAssurBemelacha()\n   * @see JewishCalendar#hasCandleLighting()\n   * @see JewishCalendar#setInIsrael(boolean)\n   */\n  public isAssurBemlacha(currentTime: DateTime, tzais: DateTime, inIsrael: boolean): boolean {\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    const date = this.getDate();\n    jewishCalendar.setGregorianDate(date.year, date.month - 1, date.day);\n    jewishCalendar.setInIsrael(inIsrael);\n\n    // erev shabbos, YT or YT sheni and after shkiah\n    const sunset = this.getElevationAdjustedSunset();\n    if (!sunset) throw new NullPointerException();\n    if (jewishCalendar.hasCandleLighting() && currentTime >= sunset) {\n      return true;\n    }\n\n    // is shabbos or YT and it is before tzais\n    return jewishCalendar.isAssurBemelacha() && currentTime <= tzais;\n  }\n\n  /**\n   * A generic utility method for calculating any <em>shaah zmanis</em> (temporal hour) based <em>zman</em> with the\n   * day defined as the start and end of day (or night) and the number of <em>shaahos zmaniyos</em> passed to the\n   * method. This simplifies the code in other methods such as {@link #getPlagHamincha(Date, Date)} and cuts down on\n   * code replication. As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset() sunset} or {@link\n   * #getSeaLevelSunrise() sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the\n   * {@link #isUseElevation()} elevation setting) and 10.75 hours to this method will return <em>plag mincha</em>\n   * according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>.\n   *\n   * @param startOfDay\n   *            the start of day for calculating the <em>zman</em>. This can be sunrise or any <em>alos</em> passed\n   *            to this method.\n   * @param endOfDay\n   *            the end of day for calculating the <em>zman</em>. This can be sunset or any <em>tzais</em> passed to\n   *            this method.\n   * @param hours\n   *            the number of <em>shaahos zmaniyos</em> (temporal hours) to offset from the start of day\n   * @return the <code>Date</code> of the time of <em>zman</em> with the <em>shaahos zmaniyos</em> (temporal hours)\n   *         in the day offset from the start of day passed to this method. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a <code>null</code> will be  returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getShaahZmanisBasedZman(startOfDay: DateTime | null, endOfDay: DateTime | null,\n                                 hours: number): DateTime | null {\n    const shaahZmanis: number = this.getTemporalHour(startOfDay, endOfDay);\n    return ZmanimCalendar.getTimeOffset(startOfDay, shaahZmanis * hours);\n  }\n\n  /**\n   * A utility method that returns the percentage of a <em>shaah zmanis</em> after sunset (or before sunrise) for a given degree\n   * offset. For the <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">equilux</a> where there\n   * is a 720-minute day, passing 16.1&deg; for the location of Jerusalem will return about 1.2. This will work for any location\n   * or date, but will typically only be of interest at the equinox/equilux to calculate the percentage of a <em>shaah zmanis</em>\n   * for those who want to use the <a href=\"https://en.wikipedia.org/wiki/Abraham_Cohen_Pimentel\">Minchas Cohen</a> in Ma'amar 2:4\n   * and the <a href=\"https://en.wikipedia.org/wiki/Hezekiah_da_Silva\">Pri Chadash</a> who calculate <em>tzais</em> as a percentage\n   * of the day after sunset. While the Minchas Cohen only applies this to 72 minutes or a 1/10 of the day around the world (based\n   * on the equinox / equilux in Israel, this method allows calculations for any degree level for any location.\n   *\n   * @param degrees\n   *            the number of degrees below the horizon after sunset.\n   * @param sunset\n   *            if <code>true</code> the calculation should be degrees after sunset, or if <code>false</code>, degrees before sunrise.\n   * @return the <code>double</code> percentage of a <em>sha'ah zmanis</em> for a given set of degrees below the astronomical horizon\n   *         for the current calendar.  If the calculation can't be computed a {@link Double#MIN_VALUE} will be returned. See detailed\n   *         explanation on top of the page.\n   */\n  public getPercentOfShaahZmanisFromDegrees(degrees: number, sunset: boolean): number {\n    const seaLevelSunrise: DateTime | null = this.getSeaLevelSunrise();\n    const seaLevelSunset: DateTime | null = this.getSeaLevelSunset();\n\n    let twilight: DateTime | null = null;\n    if (sunset) {\n      twilight = this.getSunsetOffsetByDegrees(ZmanimCalendar.GEOMETRIC_ZENITH + degrees);\n    } else {\n      twilight = this.getSunriseOffsetByDegrees(ZmanimCalendar.GEOMETRIC_ZENITH + degrees);\n    }\n\n    if (seaLevelSunrise === null || seaLevelSunset === null || twilight === null) {\n      return Double_MIN_VALUE;\n    }\n\n    const shaahZmanis: number = (seaLevelSunset!.valueOf() - seaLevelSunrise!.valueOf()) / 12.0;\n\n    let riseSetToTwilight: number;\n    if (sunset) {\n      riseSetToTwilight = twilight!.valueOf() - seaLevelSunset!.valueOf();\n    } else {\n      riseSetToTwilight = seaLevelSunrise!.valueOf() - twilight!.valueOf();\n    }\n\n    return riseSetToTwilight / shaahZmanis;\n  }\n\n  /**\n   * A utility method to calculate <em>zmanim</em> based on <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe\n   * Feinstein</a> and others as calculated in <a href=\"https://en.wikipedia.org/wiki/Mesivtha_Tifereth_Jerusalem\">MTJ</a>, <a href=\n   * \"https://en.wikipedia.org/wiki/Mesivtha_Tifereth_Jerusalem\">Yeshiva of Staten Island</a>, and Camp Yeshiva\n   * of Staten Island and other calendars. The day is split in two, from <em>alos</em> / sunrise to <em>chatzos</em>, and the\n   * second half of the day, from <em>chatzos</em> to sunset / <em>tzais</em>. Morning based times are calculated. based on the first\n   * 6 hours of the day, and afternoon times based on the second half of the day. As an example, passing 0.5, a start of\n   * <em>chatzos</em> and an end of day as sunset will return the time of <em>mincha gedola</em> GRA as half an hour <em>zmanis</em>\n   * based on the second half of the day. Some <em>zmanim</em> calculations can be based on subtracting <em>shaos zmaniyos</em>\n   * from the end of the day, and that is supported by passing a negative hour to this method.\n   *\n   * @param startOfHalfDay\n   *            The start of the half day. This would be <em>alos</em> or sunrise for morning based times such as <em>sof zman krias\n   *            shema</em> and <em>chatzos</em> for afternoon based times such as <em>mincha gedola</em>.\n   * @param endOfHalfDay\n   *            The end of the half day. This would be <em>chatzos</em> for morning based times  such as <em>sof zman krias shema</em>\n   *            and sunset or <em>tzais</em> for afternoon based times such as <em>mincha gedola</em>.\n   * @param hours\n   *            The number of <em>shaos zmaniyos</em> (hours) to offset the beginning of the first or second half of the day. For example,\n   *            3 for <em>sof zman Shma</em>, 0.5 for <em>mincha gedola</em> (half an hour after <em>chatzos</em>) and 4.75 for <em>plag\n   *            hamincha</em>. If the number of hours is negative, it will subtract the number of <em>shaos zmaniyos</em> from the end\n   *            of the day.\n   *\n   * @return the <code>Date</code> of <em>zman</em> based on calculation of the first or second half of the day. If the\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where the\n   *         sun does not rise, and one where it does not set, a <code>null</code> will be returned. See detailed explanation\n   *         on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see ComplexZmanimCalendar#getFixedLocalChatzos()\n   */\n  public getHalfDayBasedZman(startOfHalfDay: DateTime | null, endOfHalfDay: DateTime | null, hours: number): DateTime | null {\n    if (startOfHalfDay === null || endOfHalfDay === null) return null;\n\n    const shaahZmanis: number = this.getHalfDayBasedShaahZmanis(startOfHalfDay, endOfHalfDay);\n    if (shaahZmanis === Long_MIN_VALUE) return null; // defensive, should not be needed\n\n    // forward from start a day\n    if (hours >= 0) return ZmanimCalendar.getTimeOffset(startOfHalfDay, shaahZmanis * hours);\n\n    // subtract from end of day\n    return ZmanimCalendar.getTimeOffset(endOfHalfDay, shaahZmanis * hours);\n  }\n\n  /**\n   * A utility method to calculate the length of a <em>sha'ah zmanis</em> based on 1/6 of a 6-hour day.\n   * @param startOfHalfDay The start of the half-day. This would be <em>alos</em> or sunrise for the first half of the day,\n   *            or <em>chatzos</em> for the second half of the day.\n   * @param endOfHalfDay The end of the half-day. This would be <em>chatzos</em> for the first half of the day, or sunset or\n   *            <em>tzais</em> for the second half of the day.\n   * @return The <code>long</code> millisecond length of a <em>shaah zmanis</em> based on 1/6 of a half-day. If the calculation\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\n   *         and one where it does not set, {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getHalfDayBasedZman(Date, Date, double)\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   * @todo Consider adjusting various shaah zmanis times to use this.\n   */\n  public getHalfDayBasedShaahZmanis(startOfHalfDay: DateTime | null, endOfHalfDay: DateTime | null): number {\n    if (startOfHalfDay === null || endOfHalfDay === null) return Long_MIN_VALUE;\n    return (endOfHalfDay.valueOf() - startOfHalfDay.valueOf()) / 6;\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { Calendar, Long_MIN_VALUE } from './polyfills/Utils';\nimport { ZmanimCalendar } from './ZmanimCalendar';\nimport { JewishCalendar } from './hebrewcalendar/JewishCalendar';\n\n/**\n * <p>This class extends ZmanimCalendar and provides many more <em>zmanim</em> than available in the ZmanimCalendar. The basis\n * for most <em>zmanim</em> in this class are from the <em>sefer</em> <b><a href=\"https://hebrewbooks.org/9765\">Yisroel\n * Vehazmanim</a></b> by <b><a href=\"https://en.wikipedia.org/wiki/Yisroel_Dovid_Harfenes\">Rabbi Yisrael Dovid Harfenes</a></b>.\n * As an example of the number of different <em>zmanim</em> made available by this class, there are methods to return 18\n * different calculations for <em>alos</em> (dawn), 18 for <em>plag hamincha</em> and 29 for <em>tzais</em> available in this\n * API. The real power of this API is the ease in calculating <em>zmanim</em> that are not part of the library. The methods for\n * <em>zmanim</em> calculations not present in this class or its superclass {@link ZmanimCalendar} are contained in the\n * {@link AstronomicalCalendar}, the base class of the calendars in our API since they are generic methods for calculating\n * time based on degrees or time before or after {@link #getSunrise() sunrise} and {@link #getSunset() sunset} and are of interest\n * for calculation beyond <em>zmanim</em> calculations. Here are some examples.\n * <p>First create the Calendar for the location you would like to calculate:\n *\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\n * String locationName = &quot;Lakewood, NJ&quot;;\n * double latitude = 40.0828; // Lakewood, NJ\n * double longitude = -74.222; // Lakewood, NJ\n * double elevation = 20; // optional elevation correction in Meters\n * // the String parameter in getTimeZone() has to be a valid time zone listed in\n * // {@link java.util.TimeZone#getAvailableIDs()}\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\n * ComplexZmanimCalendar czc = new ComplexZmanimCalendar(location);\n * // Optionally set the date or it will default to today's date\n * czc.getCalendar().set(Calendar.MONTH, Calendar.FEBRUARY);\n * czc.getCalendar().set(Calendar.DAY_OF_MONTH, 8);</pre>\n *\n * <b>Note:</b> For locations such as Israel where the beginning and end of daylight savings time can fluctuate from\n * year to year, if your version of Java does not have an <a href=\n * \"https://www.oracle.com/java/technologies/tzdata-versions-138805.html\">up to date time zone database</a>, create a\n * {@link java.util.SimpleTimeZone} with the known start and end of DST.\n * To get <em>alos</em> calculated as 14&deg; below the horizon (as calculated in the calendars published in Montreal),\n * add {@link AstronomicalCalendar#GEOMETRIC_ZENITH} (90) to the 14&deg; offset to get the desired time:\n *\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\n *  Date alos14 = czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 14);</pre>\n *\n * To get <em>mincha gedola</em> calculated based on the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\"\n * >Magen Avraham (MGA)</a> using a <em>shaah zmanis</em> based on the day starting\n * 16.1&deg; below the horizon (and ending 16.1&deg; after sunset) the following calculation can be used:\n\n *\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\n * Date minchaGedola = czc.getTimeOffset(czc.getAlos16point1Degrees(), czc.getShaahZmanis16Point1Degrees() * 6.5);</pre>\n * <p>\n * or even simpler using the included convenience methods\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\n * Date minchaGedola = czc.getMinchaGedola(czc.getAlos16point1Degrees(), czc.getShaahZmanis16Point1Degrees());</pre>\n *\n * A little more complex example would be calculating <em>zmanim</em> that rely on a <em>shaah zmanis</em> that is\n * not present in this library. While a drop more complex, it is still rather easy. An example would be to calculate\n * the <a href=\"https://en.wikipedia.org/wiki/Israel_Isserlein\">Trumas Hadeshen</a>'s <em>alos</em> to\n * <em>tzais</em> based <em>plag hamincha</em> as calculated in the Machzikei Hadass calendar in Manchester, England.\n * A number of this calendar's <em>zmanim</em> are calculated based on a day starting at <em>alos</em> of 12&deg; before\n * sunrise and ending at <em>tzais</em> of 7.083&deg; after sunset. Be aware that since the <em>alos</em> and <em>tzais</em>\n * do not use identical degree-based offsets, this leads to <em>chatzos</em> being at a time other than the\n * {@link #getSunTransit() solar transit} (solar midday). To calculate this <em>zman</em>, use the following steps. Note\n * that <em>plag hamincha</em> is 10.75 hours after the start of the day, and the following steps are all that it takes.\n * <br>\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\n * Date plag = czc.getPlagHamincha(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\n *              czc.getSunsetOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + ZENITH_7_POINT_083));</pre>\n * <p>\n * Something a drop more challenging, but still simple, would be calculating a <em>zman</em> using the same \"complex\"\n * offset day used in the above-mentioned Manchester calendar, but for a <em>shaos zmaniyos</em> based <em>zman</em> not\n * supported by this library, such as calculating the point that one should be <em>makpid</em>\n * not to eat on <em>erev Shabbos</em> or <em>erev Yom Tov</em>. This is 9 <em>shaos zmaniyos</em> into the day.\n * <ol>\n *  <li>Calculate the <em>shaah zmanis</em> in milliseconds for this day</li>\n *  <li>Add 9 of these <em>shaos zmaniyos</em> to <em>alos</em> starting at 12&deg;</li>\n * </ol>\n *\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\n * long shaahZmanis = czc.getTemporalHour(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\n *            czc.getSunsetOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + ZENITH_7_POINT_083));\n * Date sofZmanAchila = getTimeOffset(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\n *          shaahZmanis * 9);</pre>\n *\n * Calculating this <em>sof zman achila</em> according to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>\n * is simplicity itself.\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\n * Date sofZmanAchila = czc.getTimeOffset(czc.getSunrise(), czc.getShaahZmanisGra() * 9);</pre>\n *\n * <h2>See documentation from the {@link ZmanimCalendar} parent class</h2>\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2016\n */\nexport class ComplexZmanimCalendar extends ZmanimCalendar {\n  /**\n   * The zenith of 3.7&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> that <em>tzais</em> is the\n   * time it takes to walk 3/4 of a <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\"\n   * >mil</a> at 18 minutes a mil, or 13.5 minutes after sunset. The sun is 3.7&deg; below\n   * {@link #GEOMETRIC_ZENITH geometric zenith} at this time in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>.\n   *\n   * @see #getTzaisGeonim3Point7Degrees()\n   */\n  protected static readonly ZENITH_3_POINT_7: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.7;\n\n  /**\n   * The zenith of 3.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> that <em>tzais</em> is the\n   * time it takes to walk 3/4 of a <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\"\n   * >mil</a> at 18 minutes a mil, or 13.5 minutes after sunset. The sun is 3.8&deg; below\n   * {@link #GEOMETRIC_ZENITH geometric zenith} at this time in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>.\n   *\n   * @see #getTzaisGeonim3Point8Degrees()\n   */\n  protected static readonly ZENITH_3_POINT_8: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.8;\n\n  /**\n   * The zenith of 5.95&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\n   * the sun 24 minutes after sunset in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\n   * which calculates to 5.95&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @see #getTzaisGeonim5Point95Degrees()\n   */\n  protected static readonly ZENITH_5_POINT_95: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 5.95;\n\n  /**\n   * The zenith of 7.083&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This is often referred to as\n   * 7&deg;5' or 7&deg; and 5 minutes. This calculation is used for calculating <em>alos</em> (dawn) and\n   * <em>tzais</em> (nightfall) according to some opinions. This calculation is based on observation of 3 medium-sized\n   * stars by Dr. Baruch Cohen in his calendar published in 1899 in Strasbourg, France. This calculates to\n   * 7.0833333&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. The <a href=\"https://hebrewbooks.org/1053\">Sh\"Ut\n   * Melamed Leho'il</a> in Orach Chaim 30 agreed to this <em>zman</em>, as did the Sh\"Ut Bnei Tziyon and the Tenuvas Sadeh.\n   * It is very close to the time of the <a href=\"https://hebrewbooks.org/22044\">Mekor Chesed</a> of the Sefer chasidim.\n   * It is close to the position of the sun 30 minutes after sunset in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, but not\n   * Exactly. The actual position of the sun 30 minutes after sunset in Jerusalem at the equilux is 7.205&deg; and\n   * 7.199&deg; at the equinox. See Hazmanim Bahalacha vol 2, pages 520-521 for details.\n   * @todo Hyperlink the proper sources.\n   *\n   * @see #getTzaisGeonim7Point083Degrees()\n   * @see #getBainHashmashosRT13Point5MinutesBefore7Point083Degrees()\n   */\n  protected static readonly ZENITH_7_POINT_083: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7 + (5 / 60);\n\n  /**\n   * The zenith of 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\n   * 45 minutes before {@link #getSunrise() sunrise} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> which\n   * calculates to 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @see #getMisheyakir10Point2Degrees()\n   */\n  protected static readonly ZENITH_10_POINT_2: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 10.2;\n\n  /**\n   * The zenith of 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\n   * 48 minutes before {@link #getSunrise() sunrise} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\n   * calculates to 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @see #getMisheyakir11Degrees()\n   */\n  protected static readonly ZENITH_11_DEGREES: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 11;\n\n  /**\n   * The zenith of 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\n   * 52 minutes before {@link #getSunrise() sunrise} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\n   * calculates to 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @see #getMisheyakir11Point5Degrees()\n   */\n  protected static readonly ZENITH_11_POINT_5: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 11.5;\n\n  /**\n   * The zenith of 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating Rabbeinu Tam's <em>bain hashmashos</em> according to some opinions.\n   * NOTE: See comments on {@link #getBainHashmashosRT13Point24Degrees} for additional details about the degrees.\n   *\n   * @see #getBainHashmashosRT13Point24Degrees\n   *\n   */\n  protected static readonly ZENITH_13_POINT_24: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 13.24;\n\n  /**\n   * The zenith of 19&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>alos</em> according to some opinions.\n   *\n   * @see #getAlos19Degrees()\n   * @see #ZENITH_19_POINT_8\n   */\n  protected static readonly ZENITH_19_DEGREES: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 19;\n\n  /**\n   * The zenith of 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions. This calculation is\n   * based on the position of the sun 90 minutes after sunset in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> which\n   * calculates to 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @see #getTzais19Point8Degrees()\n   * @see #getAlos19Point8Degrees()\n   * @see #getAlos90()\n   * @see #getTzais90()\n   * @see #ZENITH_19_DEGREES\n   */\n  protected static readonly ZENITH_19_POINT_8: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 19.8;\n\n  /**\n   * The zenith of 26&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions. This calculation is\n   * based on the position of the sun {@link #getAlos120() 120 minutes} after sunset in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> which\n   * calculates to 26&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. Since the level of darkness when the sun is\n   * 26&deg; and at a point when the level of darkness is long past the 18&deg; point where the darkest point is reached,\n   * it should only be used <em>lechumra</em> such as delaying the start of nighttime <em>mitzvos</em> or avoiding eating\n   * this early on a fast day.\n   *\n   * @see #getAlos26Degrees()\n   * @see #getTzais26Degrees()\n   * @see #getAlos120()\n   * @see #getTzais120()\n   */\n  protected static readonly ZENITH_26_DEGREES: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 26;\n\n  /**\n   * The zenith of 4.37&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\n   * the sun {@link #getTzaisGeonim4Point37Degrees() 16 7/8 minutes} after sunset (3/4 of a 22.5-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a>) in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\n   * which calculates to 4.37&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @see #getTzaisGeonim4Point37Degrees()\n   */\n  protected static readonly ZENITH_4_POINT_37: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.37;\n\n  /**\n   * The zenith of 4.61&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\n   * the sun {@link #getTzaisGeonim4Point37Degrees() 18 minutes} after sunset (3/4 of a 24-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a>) in\n   * Jerusalem <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox\n   * / equilux</a>, which calculates to 4.61&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   * @todo add documentation links\n   *\n   * @see #getTzaisGeonim4Point61Degrees()\n   */\n  protected static readonly ZENITH_4_POINT_61: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.61;\n\n  /**\n   * The zenith of 4.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;).\n   * @todo Add more documentation.\n   * @see #getTzaisGeonim4Point8Degrees()\n   */\n  protected static readonly ZENITH_4_POINT_8: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.8;\n\n  /**\n   * The zenith of 3.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\n   * the sun {@link #getTzaisGeonim3Point65Degrees() 13.5 minutes} after sunset (3/4 of an 18-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a>) in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> which\n   * calculates to 3.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   * @deprecated This will be removed in v3.0.0 since calculations show that this time is earlier than 13.5 minutes at\n   *              the <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the\n   *              equinox / equilux</a> in Jerusalem.\n   *\n   * @see #getTzaisGeonim3Point65Degrees()\n   */\n  protected static readonly ZENITH_3_POINT_65: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.65;\n\n  /**\n   * The zenith of 3.676&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;).\n   * @todo Add more documentation.\n   * @deprecated This will be removed since calculations show that this time is earlier than 13.5 minutes at\n   *              the <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the\n   *              equinox / equilux</a> in Jerusalem.\n   */\n  protected static readonly ZENITH_3_POINT_676: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.676;\n\n  /**\n   * The zenith of 5.88&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). TODO add more documentation\n   */\n  protected static readonly ZENITH_5_POINT_88: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 5.88;\n\n  /**\n   * The zenith of 1.583&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>netz amiti</em> (sunrise) and <em>shkiah amiti</em> (sunset) based on the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>.\n   *\n   * @see #getSunriseBaalHatanya()\n   * @see #getSunsetBaalHatanya()\n   */\n  protected static readonly ZENITH_1_POINT_583: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 1.583;\n\n  /**\n   * The zenith of 16.9&deg; below geometric zenith (90&deg;). This calculation is used for determining <em>alos</em>\n   * (dawn) based on the opinion of the Baal Hatanya. It is based on the calculation that the time between dawn\n   * and <em>netz amiti</em> (sunrise) is 72 minutes, the time that is takes to walk 4 mil at 18 minutes\n   * a mil (<a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others). The sun's position at 72\n   * minutes before {@link #getSunriseBaalHatanya <em>netz amiti</em> (sunrise)} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> is\n   * 16.9&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @see #getAlosBaalHatanya()\n   */\n  protected static readonly ZENITH_16_POINT_9: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 16.9;\n\n  /**\n   * The zenith of 6&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> / nightfall based on the opinion of the Baal Hatanya. This calculation is based on the\n   * position of the sun 24 minutes after {@link #getSunset() sunset} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\n   * is 6&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @see #getTzaisBaalHatanya()\n   */\n  protected static readonly ZENITH_6_DEGREES: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 6;\n\n  /**\n   * The zenith of 6.45&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This is based on the calculations of <a href=\n   * \"https://en.wikipedia.org/wiki/Yechiel_Michel_Tucazinsky\">Rabbi Yechiel Michel Tucazinsky</a> of the position of\n   * the sun no later than {@link #getTzaisGeonim6Point45Degrees() 31 minutes} after sunset in Jerusalem, and at the\n   * height of the summer solstice, this <em>zman</em> is 28 minutes after <em>shkiah</em>. This computes to 6.45&deg;\n   * below {@link #GEOMETRIC_ZENITH geometric zenith}. This calculation is found in the <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=50536&st=&pgnum=51\">Birur Halacha Yoreh Deah 262</a> it the commonly\n   * used <em>zman</em> in Israel. It should be noted that this differs from the 6.1&deg;/6.2&deg; calculation for\n   * Rabbi Tucazinsky's time as calculated by the Hazmanim Bahalacha Vol II chapter 50:7 (page 515).\n   *\n   * @see #getTzaisGeonim6Point45Degrees()\n   */\n  protected static readonly ZENITH_6_POINT_45: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 6.45;\n\n  /**\n   * The zenith of 7.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>misheyakir</em> according to some opinions.\n   *\n   * @see #getMisheyakir7Point65Degrees()\n   */\n  protected static readonly ZENITH_7_POINT_65: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7.65;\n\n  /**\n   * The zenith of 7.67&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> according to some opinions.\n   *\n   * @see #getTzaisGeonim7Point67Degrees()\n   */\n  protected static readonly ZENITH_7_POINT_67: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7.67;\n\n  /**\n   * The zenith of 9.3&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>tzais</em> (nightfall) according to some opinions.\n   *\n   * @see #getTzaisGeonim9Point3Degrees()\n   */\n  protected static readonly ZENITH_9_POINT_3: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.3;\n\n  /**\n   * The zenith of 9.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>misheyakir</em> according to some opinions.\n   *\n   * @see #getMisheyakir9Point5Degrees()\n   */\n  protected static readonly ZENITH_9_POINT_5: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.5;\n\n  /**\n   * The zenith of 9.75&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions.\n   *\n   * @see #getTzaisGeonim9Point75Degrees()\n   */\n  protected static readonly ZENITH_9_POINT_75: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.75;\n\n  /**\n   * The zenith of 2.03&deg; above {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating the start of <em>bain hashmashos</em> (twilight) of 13.5 minutes before sunset converted to degrees\n   * according to the Yereim. As is traditional with degrees below the horizon, this is calculated without refraction\n   * and from the center of the sun. It would be 0.833&deg; less without this.\n   *\n   * @see #getBainHashmashosYereim2Point1Degrees()\n   */\n  protected static readonly ZENITH_MINUS_2_POINT_1: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH - 2.1;\n\n  /**\n   * The zenith of 2.75&deg; above {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating the start of <em>bain hashmashos</em> (twilight) of 16.875 minutes before sunset converted to degrees\n   * according to the Yereim. As is traditional with degrees below the horizon, this is calculated without refraction\n   * and from the center of the sun. It would be 0.833&deg; less without this.\n   *\n   * @see #getBainHashmashosYereim2Point8Degrees()\n   */\n  protected static readonly ZENITH_MINUS_2_POINT_8: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH - 2.8;\n\n  /**\n   * The zenith of 2.99&deg; above {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\n   * calculating the start of <em>bain hashmashos</em> (twilight) of 18 minutes before sunset converted to degrees\n   * according to the Yereim. As is traditional with degrees below the horizon, this is calculated without refraction\n   * and from the center of the sun. It would be 0.833&deg; less without this.\n   *\n   * @see #getBainHashmashosYereim3Point05Degrees()\n   */\n  protected static readonly ZENITH_MINUS_3_POINT_05: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH - 3.05;\n\n  /**\n   * The offset in minutes (defaults to 40) after sunset used for <em>tzeit</em> based on calculations of\n   * <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah.\n   * @see #getTzaisAteretTorah()\n   * @see #getAteretTorahSunsetOffset()\n   * @see #setAteretTorahSunsetOffset(double)\n   */\n  private ateretTorahSunsetOffset: number = 40;\n\n  /*\n  constructor(location?: GeoLocation) {\n    super(location);\n  }\n  */\n\n  /**\n   * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\n   * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\n   *\n   * @see AstronomicalCalendar#AstronomicalCalendar()\n   */\n\n  /*\n    public ComplexZmanimCalendar() {\n        super();\n    }\n*/\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a 19.8&deg; dip. This calculation\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is when the sun is 19.8&deg;\n   * below the eastern geometric horizon before sunrise. Dusk for this is when the sun is 19.8&deg; below the western\n   * geometric horizon after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getShaahZmanis19Point8Degrees(): number {\n    return this.getTemporalHour(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a 18&deg; dip. This calculation divides\n   * the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham\n   * (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is when the sun is 18&deg; below the\n   * eastern geometric horizon before sunrise. Dusk for this is when the sun is 18&deg; below the western geometric\n   * horizon after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getShaahZmanis18Degrees(): number {\n    return this.getTemporalHour(this.getAlos18Degrees(), this.getTzais18Degrees());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 26&deg;. This calculation\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is when the sun is\n   * {@link #getAlos26Degrees() 26&deg;} below the eastern geometric horizon before sunrise. Dusk for this is when\n   * the sun is {@link #getTzais26Degrees() 26&deg;} below the western geometric horizon after sunset. This day is\n   * split into 12 equal parts with each part being a <em>shaah zmanis</em>. Since <em>zmanim</em> that use this\n   * method are extremely late or early and at a point when the sky is a long time past the 18&deg; point where the\n   * darkest point is reached, <em>zmanim</em> that use this should only be used <em>lechumra</em>, such as\n   * delaying the start of nighttime <em>mitzvos</em>.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis120Minutes()\n   */\n  public getShaahZmanis26Degrees(): number {\n    return this.getTemporalHour(this.getAlos26Degrees(), this.getTzais26Degrees());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 16.1&deg;. This calculation\n   * divides the day based on the opinion that the day runs from dawn to dusk. Dawn for this calculation is when the\n   * sun is 16.1&deg; below the eastern geometric horizon before sunrise and dusk is when the sun is 16.1&deg; below\n   * the western geometric horizon after sunset. This day is split into 12 equal parts with each part being a\n   * <em>shaah zmanis</em>.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getAlos16Point1Degrees()\n   * @see #getTzais16Point1Degrees()\n   * @see #getSofZmanShmaMGA16Point1Degrees()\n   * @see #getSofZmanTfilaMGA16Point1Degrees()\n   * @see #getMinchaGedola16Point1Degrees()\n   * @see #getMinchaKetana16Point1Degrees()\n   * @see #getPlagHamincha16Point1Degrees()\n   */\n\n  public getShaahZmanis16Point1Degrees(): number {\n    return this.getTemporalHour(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (solar hour) according to the opinion of the <a href=\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a>. This calculation\n   * divides the day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is\n   * 60 minutes before sunrise and dusk is 60 minutes after sunset. This day is split into 12 equal parts with each\n   * part being a <em>shaah zmanis</em>. Alternate methods of calculating a <em>shaah zmanis</em> are available in the\n   * subclass {@link ComplexZmanimCalendar}.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getAlos60()\n   * @see #getTzais60()\n   * @see #getPlagHamincha60Minutes()\n   */\n  public getShaahZmanis60Minutes(): number {\n    return this.getTemporalHour(this.getAlos60(), this.getTzais60());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (solar hour) according to the opinion of the <a href=\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a>. This calculation divides the day\n   * based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is 72 minutes\n   * before sunrise and dusk is 72 minutes after sunset. This day is split into 12 equal parts with each part\n   * being a <em>shaah zmanis</em>. Alternate methods of calculating a <em>shaah zmanis</em> are available in the\n   * subclass {@link ComplexZmanimCalendar}.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getShaahZmanis72Minutes(): number {\n    return this.getShaahZmanisMGA();\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <a href=\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em> being\n   * {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This calculation\n   * divides the day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation\n   * is 72 minutes <em>zmaniyos</em> before sunrise and dusk is 72 minutes <em>zmaniyos</em> after sunset. This day\n   * is split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is identical to 1/10th of the day\n   * from {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getAlos72Zmanis()\n   * @see #getTzais72Zmanis()\n   */\n  public getShaahZmanis72MinutesZmanis(): number {\n    return this.getTemporalHour(this.getAlos72Zmanis(), this.getTzais72Zmanis());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 90 minutes. This calculation\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is 90 minutes before sunrise\n   * and dusk is 90 minutes after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getShaahZmanis90Minutes(): number {\n    return this.getTemporalHour(this.getAlos90(), this.getTzais90());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <a href=\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em> being\n   * {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This calculation divides\n   * the day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is 90 minutes\n   * <em>zmaniyos</em> before sunrise and dusk is 90 minutes <em>zmaniyos</em> after sunset. This day is split into 12 equal\n   * parts with each part being a <em>shaah zmanis</em>. This is 1/8th of the day from {@link #getSunrise() sunrise} to\n   * {@link #getSunset() sunset}.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getAlos90Zmanis()\n   * @see #getTzais90Zmanis()\n   */\n  public getShaahZmanis90MinutesZmanis(): number {\n    return this.getTemporalHour(this.getAlos90Zmanis(), this.getTzais90Zmanis());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <a href=\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em> being {@link\n   * #getAlos96Zmanis() 96} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This calculation divides the\n   * day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is 96 minutes\n   * <em>zmaniyos</em> before sunrise and dusk is 96 minutes <em>zmaniyos</em> after sunset. This day is split into 12\n   * equal parts with each part being a <em>shaah zmanis</em>. This is identical to 1/7.5th of the day from\n   * {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getAlos96Zmanis()\n   * @see #getTzais96Zmanis()\n   */\n  public getShaahZmanis96MinutesZmanis(): number {\n    return this.getTemporalHour(this.getAlos96Zmanis(), this.getTzais96Zmanis());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the\n   * <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah calculated with <em>alos</em> being 1/10th\n   * of sunrise to sunset day, or {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> of such a day before\n   * {@link #getSunrise() sunrise}, and <em>tzais</em> is usually calculated as {@link #getTzaisAteretTorah() 40\n   * minutes} (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}) after {@link #getSunset()\n   * sunset}. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. Note that with this\n   * system, <em>chatzos</em> (midday) will not be the point that the sun is {@link #getSunTransit() halfway across\n   * the sky}.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getAlos72Zmanis()\n   * @see #getTzaisAteretTorah()\n   * @see #getAteretTorahSunsetOffset()\n   * @see #setAteretTorahSunsetOffset(double)\n   */\n  public getShaahZmanisAteretTorah(): number {\n    return this.getTemporalHour(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) used by some <em>zmanim</em> according to the opinion of\n   * <a href=\"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in the\n   * <em>luach</em> of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that is based on a day starting 72 minutes before\n   * sunrise in degrees {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ending 14 minutes after sunset in\n   * degrees {@link #getTzaisGeonim3Point8Degrees() <em>tzais</em> 3.8&deg;}. This day is split into 12 equal parts with\n   * each part being a <em>shaah zmanis</em>. Note that with this system, <em>chatzos</em> (midday) will not be the point\n   * that the sun is {@link #getSunTransit() halfway across the sky}. These <em>shaos zmaniyos</em> are used for <em>Mincha\n   * Ketana</em> and <em>Plag Hamincha</em>. The 14 minutes are based on 3/4 of an 18 minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a>, with half a minute added for\n   * Rav Yosi.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getMinchaKetanaAhavatShalom()\n   * @see #getPlagAhavatShalom()\n   */\n  public getShaahZmanisAlos16Point1ToTzais3Point8(): number {\n    return this.getTemporalHour(this.getAlos16Point1Degrees(), this.getTzaisGeonim3Point8Degrees());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) used by some <em>zmanim</em> according to the opinion of\n   * <a href=\"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in the\n   * <em>luach</em> of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that is based on a day starting 72 minutes before\n   * sunrise in degrees {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ending 13.5 minutes after sunset in\n   * degrees {@link #getTzaisGeonim3Point7Degrees() <em>tzais</em> 3.7&deg;}. This day is split into 12 equal parts with\n   * each part being a <em>shaah zmanis</em>. Note that with this system, <em>chatzos</em> (midday) will not be the point\n   * that the sun is {@link #getSunTransit() halfway across the sky}. These <em>shaos zmaniyos</em> are used for <em>Mincha\n   * Gedola</em> calculation.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getMinchaGedolaAhavatShalom()\n   */\n  public getShaahZmanisAlos16Point1ToTzais3Point7(): number {\n    return this.getTemporalHour(this.getAlos16Point1Degrees(), this.getTzaisGeonim3Point7Degrees());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 96 minutes. This calculation\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is 96 minutes before sunrise\n   * and dusk is 96 minutes after sunset. This day is split into 12 equal parts with each part being a <em>shaah\n   * zmanis</em>.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getShaahZmanis96Minutes(): number {\n    return this.getTemporalHour(this.getAlos96(), this.getTzais96());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 120 minutes. This calculation\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is 120 minutes before sunrise and\n   * dusk is 120 minutes after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\n   * Since <em>zmanim</em> that use this method are extremely late or early and at a point when the sky is a long time\n   * past the 18&deg; point where the darkest point is reached, <em>zmanim</em> that use this should only be used\n   * <em>lechumra</em> only, such as delaying the start of nighttime <em>mitzvos</em>.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis26Degrees()\n   */\n  public getShaahZmanis120Minutes(): number {\n    return this.getTemporalHour(this.getAlos120(), this.getTzais120());\n  }\n\n  /**\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <a href=\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em> being {@link\n   * #getAlos120Zmanis() 120} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This calculation divides\n   * the day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is\n   * 120 minutes <em>zmaniyos</em> before sunrise and dusk is 120 minutes <em>zmaniyos</em> after sunset. This day is\n   * split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is identical to 1/6th of the day from\n   * {@link #getSunrise() sunrise} to {@link #getSunset() sunset}. Since <em>zmanim</em> that use this method are\n   * extremely late or early and at a point when the sky is a long time past the 18&deg; point where the darkest point\n   * is reached, <em>zmanim</em> that use this should only be used <em>lechumra</em> such as delaying the start of\n   * nighttime <em>mitzvos</em>.\n   *\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getAlos120Zmanis()\n   * @see #getTzais120Zmanis()\n   */\n  public getShaahZmanis120MinutesZmanis(): number {\n    return this.getTemporalHour(this.getAlos120Zmanis(), this.getTzais120Zmanis());\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on sunrise\n   * being 120 minutes <em>zmaniyos</em> or 1/6th of the day before sunrise. This is calculated as 10.75 hours after\n   * {@link #getAlos120Zmanis() dawn}. The formula used is 10.75 * {@link #getShaahZmanis120MinutesZmanis()} after\n   * {@link #getAlos120Zmanis() dawn}. Since the <em>zman</em> based on an extremely early <em>alos</em> and a very\n   * late <em>tzais</em>, it should only be used <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis120MinutesZmanis()\n   * @see #getAlos120()\n   * @see #getTzais120()\n   * @see #getPlagHamincha26Degrees()\n   * @see #getPlagHamincha120Minutes()\n   */\n  public getPlagHamincha120MinutesZmanis(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos120Zmanis(), this.getTzais120Zmanis(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> according to the\n   * Magen Avraham with the day starting 120 minutes before sunrise and ending 120 minutes after sunset. This is\n   * calculated as 10.75 hours after {@link #getAlos120() dawn 120 minutes}. The formula used is 10.75 {@link\n   * #getShaahZmanis120Minutes()} after {@link #getAlos120()}. Since the <em>zman</em> based on an extremely early\n   * <em>alos</em> and a very late <em>tzais</em>, it should only be used <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis120Minutes()\n   * @see #getPlagHamincha26Degrees()\n   */\n  public getPlagHamincha120Minutes(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos120(), this.getTzais120(), true);\n  }\n\n  /**\n   * Method to return <em>alos</em> (dawn) calculated as 60 minutes before {@link #getSunrise() sunrise} or\n   * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting). This is the\n   * time to walk the distance of 4 <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\"\n   * >mil</a> at 15 minutes a mil. This seems to be the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Yair_Bacharach\">Chavas Yair</a> in the Mekor Chaim, Orach Chaim Ch. 90,\n   * though  the Mekor Chaim in Ch. 58 and in the <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=45193&pgnum=214\"\n   * >Chut Hashani Ch. 97</a> states that a person walks 3 and a 1/3 mil in an hour, or an 18-minute mil.\n   * Also see the <a href=\n   * \"https://he.wikipedia.org/wiki/%D7%9E%D7%9C%D7%9B%D7%99%D7%90%D7%9C_%D7%A6%D7%91%D7%99_%D7%98%D7%A0%D7%A0%D7%91%D7%95%D7%99%D7%9D\"\n   * >Divrei Malkiel</a> <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=803&pgnum=33\">Vol. 4, Ch. 20, page 34</a>) who\n   * mentions the 15 minute mil <em>lechumra</em> by baking matzos. Also see the <a href=\n   * \"https://en.wikipedia.org/wiki/Joseph_Colon_Trabotto\">Maharik</a> <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=1142&pgnum=216\">Ch. 173</a> where the questioner quoting the\n   * <a href=\"https://en.wikipedia.org/wiki/Eliezer_ben_Nathan\">Ra'avan</a> is of the opinion that the time to walk a\n   * mil is 15 minutes (5 mil in a little over an hour). There are many who believe that there is a\n   * <em>ta'us sofer</em> (scribe's error) in the Ra'avan, and it should 4 mil in a little over an hour, or an\n   * 18-minute mil. Time based offset calculations are based on the opinion of the\n   * <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time of the <em>neshef</em>\n   * (time between dawn and sunrise) does not vary by the time of year or location but purely depends on the time it takes to\n   * walk the distance of 4* mil. {@link #getTzaisGeonim9Point75Degrees()} is a related <em>zman</em> that is a\n   * degree-based calculation based on 60 minutes.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}.\n   *         documentation.\n   *\n   * @see #getTzais60()\n   * @see #getPlagHamincha60Minutes()\n   * @see #getShaahZmanis60Minutes()\n   */\n  public getAlos60(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -60 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * Method to return <em>alos</em> (dawn) calculated using 72 minutes <em>zmaniyos</em> or 1/10th of the day before\n   * sunrise. This is based on an 18-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> so the time for 4 mil is\n   * 72 minutes which is 1/10th of a day (12 * 60 = 720) based on the day being from {@link #getSeaLevelSunrise() sea\n   * level sunrise} to {@link #getSeaLevelSunset() sea level sunset} or {@link #getSunrise() sunrise} to {@link #getSunset()\n   * sunset} (depending on the {@link #isUseElevation()} setting). The actual calculation is {@link #getSeaLevelSunrise()} -\n   * ({@link #getShaahZmanisGra()} * 1.2). This calculation is used in the calendars published by the <a href=\n   * \"https://en.wikipedia.org/wiki/Central_Rabbinical_Congress\">Hisachdus Harabanim D'Artzos Habris Ve'Canada</a>.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getShaahZmanisGra()\n   */\n  public getAlos72Zmanis(): DateTime | null {\n    return this.getZmanisBasedOffset(-1.2);\n  }\n\n  /**\n   * Method to return <em>alos</em> (dawn) calculated using 96 minutes before {@link #getSunrise() sunrise} or\n   * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting) that is based\n   * on the time to walk the distance of 4 <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> at 24 minutes a mil.\n   * Time based offset calculations for <em>alos</em> are based on the opinion of the <em><a href=\n   * \"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time of the <em>Neshef</em> (time between\n   * dawn and sunrise) does not vary by the time of year or location but purely depends on the time it takes to walk the\n   * distance of 4 mil.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   */\n  public getAlos96(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -96 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * Method to return <em>alos</em> (dawn) calculated using 90 minutes <em>zmaniyos</em> or 1/8th of the day before\n   * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\n   * #isUseElevation()} setting). This is based on a 22.5-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> so the time for 4\n   * mil is 90 minutes which is 1/8th of a day (12 * 60) / 8 = 90. The day is calculated from {@link\n   * #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunset() sea level sunset} or {@link #getSunrise()\n   * sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}. The actual calculation used\n   * is {@link #getSunrise()} - ({@link #getShaahZmanisGra()} * 1.5).\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getShaahZmanisGra()\n   */\n  public getAlos90Zmanis(): DateTime | null {\n    return this.getZmanisBasedOffset(-1.5);\n  }\n\n  /**\n   * This method returns <em>alos</em> (dawn) calculated using 96 minutes <em>zmaniyos</em> or 1/7.5th of the day before\n   * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\n   * #isUseElevation()} setting). This is based on a 24-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> so the time for 4 mil is 96\n   * minutes which is 1/7.5th of a day (12 * 60 / 7.5 = 96). The day is calculated from {@link #getSeaLevelSunrise() sea\n   * level sunrise} to {@link #getSeaLevelSunset() sea level sunset} or {@link #getSunrise() sunrise} to {@link #getSunset()\n   * sunset} (depending on the {@link #isUseElevation()}. The actual calculation used is {@link #getSunrise()} -\n   * ({@link #getShaahZmanisGra()} * 1.6).\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getShaahZmanisGra()\n   */\n  public getAlos96Zmanis(): DateTime | null {\n    return this.getZmanisBasedOffset(-1.6);\n  }\n\n  /**\n   * Method to return <em>alos</em> (dawn) calculated using 90 minutes before {@link #getSeaLevelSunrise() sea level\n   * sunrise} based on the time to walk the distance of 4 <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> at 22.5 minutes a\n   * mil. Time-based offset calculations for <em>alos</em> are based on the opinion of the <em><a href=\n   * \"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time of the <em>Neshef</em>\n   * (time between dawn and sunrise) does not vary by the time of year or location but purely depends on the time it\n   * takes to walk the distance of 4 mil.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   */\n  public getAlos90(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -90 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns <em>alos</em> (dawn) calculated using 120 minutes\n   * before {@link #getSeaLevelSunrise() sea level sunrise} (no adjustment for elevation is made) based on the time\n   * to walk the distance of 5 <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\"\n   * >mil</a> (<em>Ula</em>) at 24 minutes a mil. Time based offset calculations for <em>alos</em> are\n   * based on the* opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a>\n   * </em> who stated that the time of the <em>neshef</em> (time between dawn and sunrise) does not vary by the time of\n   * year or location but purely depends on the time it takes to walk the distance of 5 mil (<em>Ula</em>). Since\n   * this time is extremely early, it should only be used <em>lechumra</em>, such as not eating after this time on a fast\n   * day, and not as the start time for <em>mitzvos</em> that can only be performed during the day.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only (such as stopping to eat at this time on a fast day),\n   *         since it returns a very early time, and if used <em>lekula</em> can result in doing <em>mitzvos hayom</em>\n   *         too early according to most opinions. There is no current plan to remove this method from the API, and this\n   *         deprecation is intended to alert developers of the danger of using it.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   *\n   * @see #getTzais120()\n   * @see #getAlos26Degrees()\n   */\n  public getAlos120(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), -120 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and  method returns <em>alos</em> (dawn) calculated using\n   * 120 minutes <em>zmaniyos</em> or 1/6th of the day before {@link #getSunrise() sunrise} or {@link\n   * #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting). This is based\n   * on a 24-minute <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> so\n   * the time for 5 mil is 120 minutes which is 1/6th of a day (12 * 60 / 6 = 120). The day is calculated\n   * from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunset() sea level sunset} or\n   * {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}. The\n   * actual calculation used is {@link #getSunrise()} - ({@link #getShaahZmanisGra()} * 2). Since this time is\n   * extremely early, it should only be used <em>lechumra</em>, such\n   * as not eating after this time on a fast day, and not as the start time for <em>mitzvos</em> that can only be\n   * performed during the day.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only (such as stopping to eat at this time on a fast day),\n   *         since it returns a very early time, and if used <em>lekula</em> can result in doing <em>mitzvos hayom</em>\n   *         too early according to most opinions. There is no current plan to remove this method from the API, and this\n   *         deprecation is intended to alert developers of the danger of using it.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getAlos120()\n   * @see #getAlos26Degrees()\n   */\n  public getAlos120Zmanis(): DateTime | null {\n    return this.getZmanisBasedOffset(-2);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns <em>alos</em> (dawn) calculated when the sun is {@link\n   * #ZENITH_26_DEGREES 26&deg;} below the eastern geometric horizon before sunrise. This calculation is based on the same\n   * calculation of {@link #getAlos120() 120 minutes} but uses a degree-based calculation instead of 120 exact minutes. This\n   * calculation is based on the position of the sun 120 minutes before sunrise in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\n   * calculates to 26&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. Since this time is extremely early, it should\n   * only be used <em>lechumra</em> only, such as not eating after this time on a fast day, and not as the start time for\n   * <em>mitzvos</em> that can only be performed during the day.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only (such as stopping to eat at this time on a fast day),\n   *         since it returns a very early time, and if used <em>lekula</em> can result in doing <em>mitzvos hayom</em>\n   *         too early according to most opinions. There is no current plan to remove this  method from the API, and this\n   *         deprecation is intended to alert developers of the danger of using it.\n   *\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\n   *         may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_26_DEGREES\n   * @see #getAlos120()\n   * @see #getTzais120()\n   * @see #getTzais26Degrees()\n   */\n  public getAlos26Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_26_DEGREES);\n  }\n\n  /**\n   * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ASTRONOMICAL_ZENITH 18&deg;} below the\n   * eastern geometric horizon before sunrise.\n   *\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\n   *         may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #ASTRONOMICAL_ZENITH\n   */\n  public getAlos18Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ASTRONOMICAL_ZENITH);\n  }\n\n  /**\n   * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_19_DEGREES 19&deg;} below the\n   * eastern geometric horizon before sunrise. This is the <a href=\"https://en.wikipedia.org/wiki/Maimonides\"\n   * >Rambam</a>'s <em>alos</em> according to Rabbi Moshe Kosower's <a href=\n   * \"https://www.worldcat.org/oclc/145454098\">Maaglei Tzedek</a>, page 88, <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=33464&pgnum=13\">Ayeles Hashachar Vol. I, page 12</a>, <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=55960&pgnum=258\">Yom Valayla Shel Torah, Ch. 34, p. 222</a> and\n   * Rabbi Yaakov Shakow's <a href=\"https://www.worldcat.org/oclc/1043573513\">Luach Ikvei Hayom</a>.\n   *\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\n   *         may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #ASTRONOMICAL_ZENITH\n   */\n  public getAlos19Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_DEGREES);\n  }\n\n  /**\n   * Method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_19_POINT_8 19.8&deg;} below the\n   * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\n   * {@link #getAlos90() 90 minutes} but uses a degree-based calculation instead of 90 exact minutes. This calculation\n   * is based on the position of the sun 90 minutes before sunrise in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\n   * calculates to 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\n   *         may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_19_POINT_8\n   * @see #getAlos90()\n   */\n  public getAlos19Point8Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_POINT_8);\n  }\n\n  /**\n   * Method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_16_POINT_1 16.1&deg;} below the\n   * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\n   * {@link #getAlos72() 72 minutes} but uses a degree-based calculation instead of 72 exact minutes. This calculation\n   * is based on the position of the sun 72 minutes before sunrise in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\n   * calculates to 16.1&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\n   *         may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_16_POINT_1\n   * @see #getAlos72()\n   */\n  public getAlos16Point1Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_1);\n  }\n\n  /**\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_11_DEGREES\n   * 11.5&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\n   * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 52 minutes\n   * before {@link #getSunrise() sunrise} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\n   * which calculates to 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   * @todo recalculate.\n   *\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as northern and\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\n   *         not reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_11_POINT_5\n   */\n  public getMisheyakir11Point5Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_11_POINT_5);\n  }\n\n  /**\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_11_DEGREES\n   * 11&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\n   * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 48 minutes\n   * before {@link #getSunrise() sunrise} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\n   * which calculates to 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @return If the calculation can't be computed such as northern and southern locations even south of the Arctic\n   *         Circle and north of the Antarctic Circle where the sun may not reach low enough below the horizon for\n   *         this calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_11_DEGREES\n   */\n  public getMisheyakir11Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_11_DEGREES);\n  }\n\n  /**\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_10_POINT_2\n   * 10.2&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\n   * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 45 minutes\n   * before {@link #getSunrise() sunrise} in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox</a> which calculates\n   * to 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   *\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\n   *         the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_10_POINT_2\n   */\n  public getMisheyakir10Point2Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_10_POINT_2);\n  }\n\n  /**\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_7_POINT_65\n   * 7.65&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). The degrees are based on a 35/36-minute\n   * <em>zman</em> <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the\n   * equinox / equilux</a>, when the <em>neshef</em> (twilight) is the shortest. This time is based on <a href=\n   * \"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rabbi Moshe Feinstein</a> who writes in <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=14677&pgnum=7\">Ohr Hachaim Vol. 4, Ch. 6</a>)\n   * that <em>misheyakir</em> in New York is 35-40 minutes before sunrise, something that is a drop less than 8&deg;.\n   * <a href=\"https://en.wikipedia.org/wiki/Yisroel_Taplin\">Rabbi Yisroel Taplin</a> in <a href=\n   * \"https://www.worldcat.org/oclc/889556744\">Zmanei Yisrael</a> (page 117) notes that <a href=\n   * \"https://en.wikipedia.org/wiki/Yaakov_Kamenetsky\">Rabbi Yaakov Kamenetsky</a> stated that it is not less than 36\n   * minutes before sunrise (maybe it is 40 minutes). Sefer Yisrael Vehazmanim (p. 7) quotes the Tamar Yifrach\n   * in the name of the <a href=\"https://en.wikipedia.org/wiki/Joel_Teitelbaum\">Satmar Rov</a> that one should be stringent\n   * not consider <em>misheyakir</em> before 36 minutes. This is also the accepted <a href=\n   * \"https://en.wikipedia.org/wiki/Minhag\">minhag</a> in <a href=\n   * \"https://en.wikipedia.org/wiki/Lakewood_Township,_New_Jersey\">Lakewood</a> that is used in the <a href=\n   * \"https://en.wikipedia.org/wiki/Beth_Medrash_Govoha\">Yeshiva</a>. This follows the opinion of <a href=\n   * \"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who provided the time of 35/36 minutes,\n   * but did not provide a degree-based time. Since this <em>zman</em> depends on the level of light, Rabbi Yaakov Shakow\n   * presented this degree-based calculations to Rabbi Shmuel Kamenetsky who agreed to them.\n   *\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\n   *         the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #ZENITH_7_POINT_65\n   * @see #getMisheyakir9Point5Degrees()\n   */\n  public getMisheyakir7Point65Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_65);\n  }\n\n  /**\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_9_POINT_5\n   * 9.5&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is based on <a href=\n   * \"https://en.wikipedia.org/wiki/Dovid_Kronglas\">Rabbi Dovid Kronglass's</a> Calculation of 45 minutes in Baltimore\n   * as mentioned in <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=20287&pgnum=29\">Divrei Chachamim No. 24</a>\n   * brought down by the <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=50535&pgnum=87\">Birur Halacha, Tinyana, Ch.\n   * 18</a>. This calculates to 9.5&deg;. Also see <a href=\"https://en.wikipedia.org/wiki/Jacob_Isaac_Neiman\">Rabbi Yaakov\n   * Yitzchok Neiman</a> in Kovetz Eitz Chaim Vol. 9, p. 202 that the Vya'an Yosef did not want to rely on times earlier\n   * than 45 minutes in New York. This <em>zman</em> is also used in the calendars published by Rabbi Hershel Edelstein.\n   * As mentioned in Yisroel Vehazmanim, Rabbi Edelstein who was given the 45 minute <em>zman</em> by Rabbi Bick. The\n   * calendars published by the <em><a href=\"https://en.wikipedia.org/wiki/Mizrahi_Jews\">Edot Hamizrach</a></em> communities\n   * also use this <em>zman</em>. This also follows the opinion of <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\"\n   * >Rabbi Shmuel Kamenetsky</a> who provided the time of 36 and 45 minutes, but did not provide a degree-based time. Since\n   * this <em>zman</em> depends on the level of light, Rabbi Yaakov Shakow presented these degree-based times to Rabbi Shmuel\n   * Kamenetsky who agreed to them.\n   *\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\n   *         the sun may not reach low enough below the horizon for this calculation, a <code><code>null</code></code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #ZENITH_9_POINT_5\n   * @see #getMisheyakir7Point65Degrees()\n   */\n  public getMisheyakir9Point5Degrees(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_5);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos19Point8Degrees() 19.8&deg;} before {@link #getSunrise() sunrise}. This\n   * time is 3 {@link #getShaahZmanis19Point8Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link\n   * #getAlos19Point8Degrees() dawn} based on the opinion of the MGA that the day is calculated from dawn to nightfall\n   * with both being 19.8&deg; below sunrise or sunset. This returns the time of 3 *\n   * {@link #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis19Point8Degrees()\n   * @see #getAlos19Point8Degrees()\n   */\n  public getSofZmanShmaMGA19Point8Degrees(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based\n   * on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time\n   * is 3 {@link #getShaahZmanis16Point1Degrees() <em>shaos zmaniyos</em>} (solar hours) after\n   * {@link #getAlos16Point1Degrees() dawn} based on the opinion of the MGA that the day is calculated from\n   * dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\n   * 3 * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis16Point1Degrees()\n   * @see #getAlos16Point1Degrees()\n   */\n  public getSofZmanShmaMGA16Point1Degrees(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based\n   * on <em>alos</em> being {@link #getAlos18Degrees() 18&deg;} before {@link #getSunrise() sunrise}. This time is 3\n   * {@link #getShaahZmanis18Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos18Degrees() dawn}\n   * based on the opinion of the MGA that the day is calculated from dawn to nightfall with both being 18&deg;\n   * below sunrise or sunset. This returns the time of 3 * {@link #getShaahZmanis18Degrees()} after\n   * {@link #getAlos18Degrees() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis18Degrees()\n   * @see #getAlos18Degrees()\n   */\n  public getSofZmanShmaMGA18Degrees(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos18Degrees(), this.getTzais18Degrees(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}. This time is 3 {@link\n   * #getShaahZmanis72Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72() dawn} based on the opinion\n   * of the MGA that the day is calculated from a {@link #getAlos72() dawn} of 72 minutes before sunrise to\n   * {@link #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 3 * {@link\n   * #getShaahZmanis72Minutes()} after {@link #getAlos72() dawn}. This class returns an identical time to {@link\n   * #getSofZmanShmaMGA()} and is repeated here for clarity.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   * @see #getShaahZmanis72Minutes()\n   * @see #getAlos72()\n   * @see #getSofZmanShmaMGA()\n   */\n  public getSofZmanShmaMGA72Minutes(): DateTime | null {\n    return this.getSofZmanShmaMGA();\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite <em>Shema</em> in the morning) according\n   * to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based\n   * on <em>alos</em> being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em>, or 1/10th of the day before\n   * {@link #getSunrise() sunrise}. This time is 3 {@link #getShaahZmanis90MinutesZmanis() <em>shaos zmaniyos</em>}\n   * (solar hours) after {@link #getAlos72Zmanis() dawn} based on the opinion of the MGA that the day is calculated\n   * from a {@link #getAlos72Zmanis() dawn} of 72 minutes <em>zmaniyos</em>, or 1/10th of the day before\n   * {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getTzais72Zmanis() nightfall} of 72 minutes\n   * <em>zmaniyos</em> after {@link #getSeaLevelSunset() sea level sunset}. This returns the time of 3 *\n   * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis72MinutesZmanis()\n   * @see #getAlos72Zmanis()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public getSofZmanShmaMGA72MinutesZmanis(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos72Zmanis(), this.getTzais72Zmanis(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite <em>Shema</em> in the morning) according\n   * to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos90() 90} minutes before {@link #getSunrise() sunrise}. This time is 3\n   * {@link #getShaahZmanis90Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos90() dawn} based on\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos90() dawn} of 90 minutes before sunrise to\n   * {@link #getTzais90() nightfall} of 90 minutes after sunset. This returns the time of 3 *\n   * {@link #getShaahZmanis90Minutes()} after {@link #getAlos90() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis90Minutes()\n   * @see #getAlos90()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public getSofZmanShmaMGA90Minutes(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos90(), this.getTzais90(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based\n   * on <em>alos</em> being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before {@link #getSunrise()\n   * sunrise}. This time is 3 {@link #getShaahZmanis90MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after\n   * {@link #getAlos90Zmanis() dawn} based on the opinion of the MGA that the day is calculated from a {@link\n   * #getAlos90Zmanis() dawn} of 90 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall}\n   * of 90 minutes <em>zmaniyos</em> after sunset. This returns the time of 3 * {@link #getShaahZmanis90MinutesZmanis()}\n   * after {@link #getAlos90Zmanis() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis90MinutesZmanis()\n   * @see #getAlos90Zmanis()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public getSofZmanShmaMGA90MinutesZmanis(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos90Zmanis(), this.getTzais90Zmanis(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based\n   * on <em>alos</em> being {@link #getAlos96() 96} minutes before {@link #getSunrise() sunrise}. This time is 3\n   * {@link #getShaahZmanis96Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos96() dawn} based on\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos96() dawn} of 96 minutes before\n   * sunrise to {@link #getTzais96() nightfall} of 96 minutes after sunset. This returns the time of 3 * {@link\n   * #getShaahZmanis96Minutes()} after {@link #getAlos96() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis96Minutes()\n   * @see #getAlos96()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public getSofZmanShmaMGA96Minutes(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos96(), this.getTzais96(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based\n   * on <em>alos</em> being {@link #getAlos90Zmanis() 96} minutes <em>zmaniyos</em> before {@link #getSunrise()\n   * sunrise}. This time is 3 {@link #getShaahZmanis96MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after\n   * {@link #getAlos96Zmanis() dawn} based on the opinion of the MGA that the day is calculated from a {@link\n   * #getAlos96Zmanis() dawn} of 96 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall}\n   * of 96 minutes <em>zmaniyos</em> after sunset. This returns the time of 3 * {@link #getShaahZmanis96MinutesZmanis()}\n   * after {@link #getAlos96Zmanis() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis96MinutesZmanis()\n   * @see #getAlos96Zmanis()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public getSofZmanShmaMGA96MinutesZmanis(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos96Zmanis(), this.getTzais96Zmanis(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite <em>Shema</em> in the morning) calculated\n   * as 3 hours (regular clock hours and not <em>shaos zmaniyos</em>) before {@link ZmanimCalendar#getChatzos()}.\n   * Generally known as part of the \"Komarno\" <em>zmanim</em> after <a href=\n   * \"https://en.wikipedia.org/wiki/Komarno_(Hasidic_dynasty)#Rabbi_Yitzchak_Eisik_Safrin\">Rav Yitzchak Eizik of\n   * Komarno</a>, a proponent of this calculation, it actually predates him a lot. It is the opinion of the\n   * <em>Shach</em> in the Nekudas Hakesef (Yoreh Deah 184), <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=21638&st=&pgnum=30\">Rav Moshe Lifshitz</a> in his commentary\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=21638&st=&pgnum=50\">Lechem Mishneh on Brachos 1:2</a>. It is\n   * next brought down about 100 years later by the <a href=\"https://en.wikipedia.org/wiki/Jacob_Emden\">Yaavetz</a>\n   * (in his <em>siddur</em>, <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=7920&st=&pgnum=6\">Mor Uktziah Orach\n   * Chaim 1</a>, <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=22309&st=&pgnum=30\">Lechem Shamayim, Brachos 1:2</a>\n   * and <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=1408&st=&pgnum=69\">She'elos Yaavetz vol. 1 no. 40</a>),\n   * Rav Yitzchak Eizik of Komarno in the Ma'aseh Oreg on Mishnayos Brachos 11:2, Shevus Yaakov, Chasan Sofer and others.\n   * See Yisrael Vehazmanim <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=9765&st=&pgnum=83\">vol. 1 7:3, page 55 -\n   * 62</a>. A variant of this calculation {@link #getSofZmanShmaFixedLocal()} uses {@link #getFixedLocalChatzos() fixed\n   * local <em>chatzos</em>} for calculating this type of <em>zman</em>.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see ZmanimCalendar#getChatzos()\n   * @see #getSofZmanShmaFixedLocal()\n   * @see #getSofZmanTfila2HoursBeforeChatzos()\n   * @see #isUseAstronomicalChatzos()\n   */\n  public getSofZmanShma3HoursBeforeChatzos(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), -180 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based\n   * on <em>alos</em> being {@link #getAlos120() 120} minutes or 1/6th of the day before {@link #getSunrise() sunrise}.\n   * This time is 3 {@link #getShaahZmanis120Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos120()\n   * dawn} based on the opinion of the MGA that the day is calculated from a {@link #getAlos120() dawn} of 120 minutes\n   * before sunrise to {@link #getTzais120() nightfall} of 120 minutes after sunset. This returns the time of 3\n   * {@link #getShaahZmanis120Minutes()} after {@link #getAlos120() dawn}. This is an extremely early <em>zman</em> that\n   * is very much a <em>chumra</em>.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis120Minutes()\n   * @see #getAlos120()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public getSofZmanShmaMGA120Minutes(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos120(), this.getTzais120(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite <em>Shema</em> in the morning) based\n   * on the opinion that the day starts at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at\n   * {@link #getSeaLevelSunset() sea level sunset}. This is the opinion of the <a href=\n   * \"https://hebrewbooks.org/40357\">\\u05D7\\u05D9\\u05D3\\u05D5\\u05E9\\u05D9\n   * \\u05D5\\u05DB\\u05DC\\u05DC\\u05D5\\u05EA \\u05D4\\u05E8\\u05D6\\u05F4\\u05D4</a> and the <a href=\n   * \"https://hebrewbooks.org/14799\">\\u05DE\\u05E0\\u05D5\\u05E8\\u05D4 \\u05D4\\u05D8\\u05D4\\u05D5\\u05E8\\u05D4</a> as\n   * mentioned by Yisrael Vehazmanim <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=9765&pgnum=81\">vol 1, sec. 7,\n   * ch. 3 no. 16</a>. Three <em>shaos zmaniyos</em> are calculated based on this day and added to {@link\n   * #getAlos16Point1Degrees() <em>alos</em>} to reach this time. This time is 3 <em>shaos zmaniyos</em> (solar hours)\n   * after {@link #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a {@link\n   * #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} to {@link #getSeaLevelSunset() sea level sunset}.\n   * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday and {@link\n   * #isUseAstronomicalChatzosForOtherZmanim()} will be ignored.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this day. If the calculation can't\n   *         be computed such as northern and southern locations even south of the Arctic Circle and north of the\n   *         Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a <code>null</code>\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAlos16Point1Degrees()\n   * @see #getSeaLevelSunset()\n   */\n  public getSofZmanShmaAlos16Point1ToSunset(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getElevationAdjustedSunset());\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\n   * opinion that the day starts at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at\n   * {@link #getTzaisGeonim7Point083Degrees() <em>tzais</em> 7.083&deg;}. 3 <em>shaos zmaniyos</em> are calculated\n   * based on this day and added to {@link #getAlos16Point1Degrees() <em>alos</em>} to reach this time. This time is 3\n   * <em>shaos zmaniyos</em> (temporal hours) after {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} based on\n   * the opinion that the day is calculated from a {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} to\n   * {@link #getTzaisGeonim7Point083Degrees() <em>tzais</em> 7.083&deg;}.\n   * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday and {@link\n   * #isUseAstronomicalChatzosForOtherZmanim()} will be ignored.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\n   *         calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getAlos16Point1Degrees()\n   * @see #getTzaisGeonim7Point083Degrees()\n   */\n  public getSofZmanShmaAlos16Point1ToTzaisGeonim7Point083Degrees(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getTzaisGeonim7Point083Degrees());\n  }\n\n  /**\n   * From the GRA in Kol Eliyahu on Berachos #173 that states that <em>zman krias shema</em> is calculated as half the\n   * time from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getFixedLocalChatzos() fixed local chatzos}.\n   * The GRA himself seems to contradict this when he stated that <em>zman krias shema</em> is 1/4 of the day from\n   * sunrise to sunset. See <em>Sarah Lamoed</em> #25 in Yisroel Vehazmanim Vol. III page 1016.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\n   *         the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getFixedLocalChatzos()\n   *\n   * @deprecated As per a conversation Rabbi Yisroel Twerski had with Rabbi Harfenes, this <em>zman</em> published in\n   *         the Yisrael Vehazmanim was based on a misunderstanding and should not be used. This deprecated method\n   *         will be removed pending confirmation from Rabbi Harfenes.\n   */\n  public getSofZmanShmaKolEliyahu(): DateTime | null {\n    const chatzos: DateTime | null = this.getFixedLocalChatzos();\n    if (chatzos === null || this.getSunrise() === null) {\n      return null;\n    }\n    const diff: number = (chatzos.valueOf() - this.getElevationAdjustedSunrise()!.valueOf()) / 2;\n    return ComplexZmanimCalendar.getTimeOffset(chatzos, -diff);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos19Point8Degrees() 19.8&deg;} before {@link #getSunrise() sunrise}. This time\n   * is 4 {@link #getShaahZmanis19Point8Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link\n   * #getAlos19Point8Degrees() dawn} based on the opinion of the MGA that the day is calculated from dawn to\n   * nightfall with both being 19.8&deg; below sunrise or sunset. This returns the time of 4 * {@link\n   * #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis19Point8Degrees()\n   * @see #getAlos19Point8Degrees()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public getSofZmanTfilaMGA19Point8Degrees(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time\n   * is 4 {@link #getShaahZmanis16Point1Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link\n   * #getAlos16Point1Degrees() dawn} based on the opinion of the MGA that the day is calculated from dawn to\n   * nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of 4 * {@link\n   * #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis16Point1Degrees()\n   * @see #getAlos16Point1Degrees()\n   */\n  public getSofZmanTfilaMGA16Point1Degrees(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos18Degrees() 18&deg;} before {@link #getSunrise() sunrise}. This time is 4\n   * {@link #getShaahZmanis18Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos18Degrees() dawn}\n   * based on the opinion of the MGA that the day is calculated from dawn to nightfall with both being 18&deg;\n   * below sunrise or sunset. This returns the time of 4 * {@link #getShaahZmanis18Degrees()} after\n   * {@link #getAlos18Degrees() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis18Degrees()\n   * @see #getAlos18Degrees()\n   */\n  public getSofZmanTfilaMGA18Degrees(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos18Degrees(), this.getTzais18Degrees(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}. This time is 4\n   * {@link #getShaahZmanis72Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72() dawn} based on\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos72() dawn} of 72 minutes before\n   * sunrise to {@link #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 4 *\n   * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() dawn}. This class returns an identical time to\n   * {@link #getSofZmanTfilaMGA()} and is repeated here for clarity.\n   *\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis72Minutes()\n   * @see #getAlos72()\n   * @see #getSofZmanShmaMGA()\n   */\n  public getSofZmanTfilaMGA72Minutes(): DateTime | null {\n    return this.getSofZmanTfilaMGA();\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em>\n   * being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This time is 4\n   * {@link #getShaahZmanis72MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72Zmanis() dawn}\n   * based on the opinion of the MGA that the day is calculated from a {@link #getAlos72Zmanis() dawn} of 72\n   * minutes <em>zmaniyos</em> before sunrise to {@link #getTzais72Zmanis() nightfall} of 72 minutes <em>zmaniyos</em>\n   * after sunset. This returns the time of 4 * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis72MinutesZmanis()\n   * @see #getAlos72Zmanis()\n   */\n  public getSofZmanTfilaMGA72MinutesZmanis(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos72Zmanis(), this.getTzais72Zmanis(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos90() 90} minutes before {@link #getSunrise() sunrise}. This time is 4\n   * {@link #getShaahZmanis90Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos90() dawn} based on\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos90() dawn} of 90 minutes before sunrise to\n   * {@link #getTzais90() nightfall} of 90 minutes after sunset. This returns the time of 4 *\n   * {@link #getShaahZmanis90Minutes()} after {@link #getAlos90() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis90Minutes()\n   * @see #getAlos90()\n   */\n  public getSofZmanTfilaMGA90Minutes(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos90(), this.getTzais90(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em>\n   * being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This time is\n   * 4 {@link #getShaahZmanis90MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos90Zmanis()\n   * dawn} based on the opinion of the MGA that the day is calculated from a {@link #getAlos90Zmanis() dawn}\n   * of 90 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall} of 90 minutes\n   * <em>zmaniyos</em> after sunset. This returns the time of 4 * {@link #getShaahZmanis90MinutesZmanis()} after\n   * {@link #getAlos90Zmanis() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis90MinutesZmanis()\n   * @see #getAlos90Zmanis()\n   */\n  public getSofZmanTfilaMGA90MinutesZmanis(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos90Zmanis(), this.getTzais90Zmanis(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos96() 96} minutes before {@link #getSunrise() sunrise}. This time is 4\n   * {@link #getShaahZmanis96Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos96() dawn} based on\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos96() dawn} of 96 minutes before\n   * sunrise to {@link #getTzais96() nightfall} of 96 minutes after sunset. This returns the time of 4 *\n   * {@link #getShaahZmanis96Minutes()} after {@link #getAlos96() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis96Minutes()\n   * @see #getAlos96()\n   */\n  public getSofZmanTfilaMGA96Minutes(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos96(), this.getTzais96(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em>\n   * being {@link #getAlos96Zmanis() 96} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This time is\n   * 4 {@link #getShaahZmanis96MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos96Zmanis()\n   * dawn} based on the opinion of the MGA that the day is calculated from a {@link #getAlos96Zmanis() dawn}\n   * of 96 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais96Zmanis() nightfall} of 96 minutes\n   * <em>zmaniyos</em> after sunset. This returns the time of 4 * {@link #getShaahZmanis96MinutesZmanis()} after\n   * {@link #getAlos96Zmanis() dawn}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis90MinutesZmanis()\n   * @see #getAlos90Zmanis()\n   */\n  public getSofZmanTfilaMGA96MinutesZmanis(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos96Zmanis(), this.getTzais96Zmanis(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on\n   * <em>alos</em> being {@link #getAlos120() 120} minutes before {@link #getSunrise() sunrise} . This time is 4\n   * {@link #getShaahZmanis120Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos120() dawn}\n   * based on the opinion of the MGA that the day is calculated from a {@link #getAlos120() dawn} of 120\n   * minutes before sunrise to {@link #getTzais120() nightfall} of 120 minutes after sunset. This returns the time of\n   * 4 * {@link #getShaahZmanis120Minutes()} after {@link #getAlos120() dawn}. This is an extremely early <em>zman</em>\n   * that is very much a <em>chumra</em>.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis120Minutes()\n   * @see #getAlos120()\n   */\n  public getSofZmanTfilaMGA120Minutes(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos120(), this.getTzais120(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) calculated as 2 hours\n   * before {@link ZmanimCalendar#getChatzos()}. This is based on the opinions that calculate\n   * <em>sof zman krias shema</em> as {@link #getSofZmanShma3HoursBeforeChatzos()}. This returns the time of 2 hours\n   * before {@link ZmanimCalendar#getChatzos()}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\n   *         it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see ZmanimCalendar#getChatzos()\n   * @see #getSofZmanShma3HoursBeforeChatzos()\n   */\n  public getSofZmanTfila2HoursBeforeChatzos(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), -120 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * This method returns <em>mincha gedola</em> calculated as 30 minutes after {@link #getChatzos() <em>chatzos</em>}\n   * and not 1/2 of a {@link #getShaahZmanisGra() <em>shaah zmanis</em>} after {@link #getChatzos() <em>chatzos</em>} as\n   * calculated by {@link #getMinchaGedola}. Some use this time to delay the start of <em>mincha</em> in the winter when\n   * 1/2 of a {@link #getShaahZmanisGra() <em>shaah zmanis</em>} is less than 30 minutes. See\n   * {@link #getMinchaGedolaGreaterThan30()} for a convenience method that returns the later of the 2 calculations. One\n   * should not use this time to start <em>mincha</em> before the standard {@link #getMinchaGedola() <em>mincha gedola</em>}.\n   * See Shulchan Aruch <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=49624&st=&pgnum=291\">Orach Chayim 234:1</a> and\n   * the Shaar Hatziyon <em>seif katan ches</em>. Since this calculation is a fixed 30 minutes of regular clock time after\n   * <em>chatzos</em>, even if {@link #isUseAstronomicalChatzosForOtherZmanim()} is <code>false</code>, this <em>mincha\n   * gedola</em> time will be affected by {@link #isUseAstronomicalChatzos()} and not by\n   * {@link #isUseAstronomicalChatzosForOtherZmanim()}.\n   *\n   * @return the <code>Date</code> of 30 minutes after <em>chatzos</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getMinchaGedola()\n   * @see #getMinchaGedolaGreaterThan30()\n   * @see #getChatzos()\n   * @see #isUseAstronomicalChatzos()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   */\n  public getMinchaGedola30Minutes(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), ComplexZmanimCalendar.MINUTE_MILLIS * 30);\n  }\n\n  /**\n   * This method returns the time of <em>mincha gedola</em> according to the Magen Avraham with the day starting 72\n   * minutes before sunrise and ending 72 minutes after sunset. This is the earliest time to pray <em>mincha</em>. For\n   * more information on this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}. This is\n   * calculated as 6.5 {@link #getTemporalHour() solar hours} after <em>alos</em>. The calculation used is 6.5 *\n   * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() <em>alos</em>}. If {@link\n   * #isUseAstronomicalChatzosForOtherZmanim()} is set to <code>true</code>, the calculation will be based on 0.5\n   * {@link #getHalfDayBasedShaahZmanis(Date, Date) half-day based <em>sha'ah zmanis</em>} between {@link #getChatzos()}\n   * and {@link #getTzais72()} after {@link #getChatzos()}.\n   *\n   * @see #getAlos72()\n   * @see #getMinchaGedola()\n   * @see #getMinchaKetana()\n   * @see ZmanimCalendar#getMinchaGedola()\n   * @see #getChatzos()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaGedola72Minutes(): DateTime | null {\n    if (this.isUseAstronomicalChatzosForOtherZmanim()) {\n      return this.getHalfDayBasedZman(this.getChatzos(), this.getTzais72(), 0.5);\n    }\n    return this.getMinchaGedola(this.getAlos72(), this.getTzais72(), true);\n  }\n\n  /**\n   * This method returns the time of <em>mincha gedola</em> according to the Magen Avraham with the day starting and\n   * ending 16.1&deg; below the horizon. This is the earliest time to pray <em>mincha</em>. For more information on\n   * this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}. This is calculated as 6.5\n   * {@link #getTemporalHour() solar hours} after <em>alos</em>. The calculation used is 6.5 *\n   * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() <em>alos</em>}. If {@link\n   * #isUseAstronomicalChatzosForOtherZmanim()} is set to <code>true</code>, the calculation will be based on 0.5\n   * {@link #getHalfDayBasedShaahZmanis(Date, Date) half-day based <em>sha'ah zmanis</em>} between {@link #getChatzos()}\n   * and {@link #getAlos16Point1Degrees()} after {@link #getChatzos()}.\n   * @see #getShaahZmanis16Point1Degrees()\n   * @see #getMinchaGedola()\n   * @see #getMinchaKetana()\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\n   *         the sun  may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaGedola16Point1Degrees(): DateTime | null {\n    if (this.isUseAstronomicalChatzosForOtherZmanim()) {\n      return this.getHalfDayBasedZman(this.getChatzos(), this.getTzais16Point1Degrees(), 0.5);\n    }\n    return this.getMinchaGedola(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees(), true);\n  }\n\n  /**\n   * This method returns the time of <em>mincha gedola</em> based on the opinion of <a href=\n   * \"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in the <em>luach</em>\n   * of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that <em>mincha gedola</em> is calculated as half a <em>shaah\n   * zmanis</em> after <em>chatzos</em> with <em>shaos zmaniyos</em> calculated based on a day starting 72 minutes before sunrise\n   * {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ending 13.5 minutes after sunset {@link\n   * #getTzaisGeonim3Point7Degrees() <em>tzais</em> 3.7&deg;}. <em>Mincha gedola</em> is the earliest time to pray <em>mincha</em>.\n   * The later of this time or 30 clock minutes after <em>chatzos</em> is returned. See {@link #getMinchaGedolaGreaterThan30()}\n   * (though that calculation is based on <em>mincha gedola</em> GRA).\n   * For more information about <em>mincha gedola</em> see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}.\n   * Since calculation of this <em>zman</em> involves <em>chatzos</em> that is offset from the center of the astronomical day,\n   * {@link #isUseAstronomicalChatzosForOtherZmanim()} is N/A here.\n   * @return the <code>Date</code> of the <em>mincha gedola</em>. If the calculation can't be computed such as northern and\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not\n   *         reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getAlos16Point1Degrees()\n   * @see #getTzaisGeonim3Point7Degrees()\n   * @see #getShaahZmanisAlos16Point1ToTzais3Point7()\n   * @see #getMinchaGedolaGreaterThan30()\n   */\n  public getMinchaGedolaAhavatShalom(): DateTime | null {\n    if (this.getChatzos() === null || this.getMinchaGedola30Minutes() === null\n        || this.getShaahZmanisAlos16Point1ToTzais3Point7() === Long_MIN_VALUE) {\n      return null;\n    }\n\n    return this.getMinchaGedola30Minutes()! > ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), this.getShaahZmanisAlos16Point1ToTzais3Point7() / 2)!\n        ? this.getMinchaGedola30Minutes()\n        : ComplexZmanimCalendar.getTimeOffset(this.getChatzos(), this.getShaahZmanisAlos16Point1ToTzais3Point7() / 2);\n  }\n\n  /**\n   * This is a convenience method that returns the later of {@link #getMinchaGedola()} and\n   * {@link #getMinchaGedola30Minutes()}. In the winter when 1/2 of a {@link #getShaahZmanisGra() <em>shaah zmanis</em>} is\n   * less than 30 minutes {@link #getMinchaGedola30Minutes()} will be returned, otherwise {@link #getMinchaGedola()}\n   * will be returned. Since this calculation can be an offset of <em>chatzos</em> (if 30 clock minutes > 1/2 of a <em>shaah\n   * zmanis</em>), even if {@link #isUseAstronomicalChatzosForOtherZmanim()} is <code>false</code>, this <em>mincha</em> time\n   * may be affected by {@link #isUseAstronomicalChatzos()}.\n   *\n   * @return the <code>Date</code> of the later of {@link #getMinchaGedola()} and {@link #getMinchaGedola30Minutes()}.\n   *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\n   *         where the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getMinchaGedola()\n   * @see #getMinchaGedola30Minutes()\n   * @see #isUseAstronomicalChatzos()\n   */\n  public getMinchaGedolaGreaterThan30(): DateTime | null {\n    if (this.getMinchaGedola30Minutes() === null || this.getMinchaGedola() === null) {\n      return null;\n    }\n\n    return DateTime.max(this.getMinchaGedola30Minutes()!, this.getMinchaGedola()!);\n  }\n\n  /**\n   * FIXME check for synchronous\n   * This method returns the time of <em>mincha ketana</em> according to the Magen Avraham with the day starting and\n   * ending 16.1&deg; below the horizon. This is the preferred earliest time to pray <em>mincha</em> according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others. For more information on\n   * this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}. This is calculated as 9.5\n   * {@link #getTemporalHour() solar hours} after <em>alos</em>. The calculation used is 9.5 *\n   * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() <em>alos</em>}.\n   *\n   * @see #getShaahZmanis16Point1Degrees()\n   * @see #getMinchaGedola()\n   * @see #getMinchaKetana()\n   * @return the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaKetana16Point1Degrees(): DateTime | null {\n    return this.getMinchaKetana(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees(), true);\n  }\n\n  /**\n   * This method returns the time of <em>mincha ketana</em> based on the opinion of <a href=\n   * \"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in the <em>luach</em>\n   * of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that <em>mincha ketana</em> is calculated as 2.5 <em>shaos\n   * zmaniyos</em> before {@link #getTzaisGeonim3Point8Degrees() <em>tzais</em> 3.8&deg;} with <em>shaos zmaniyos</em>\n   * calculated based on a day starting at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ending at\n   * <em>tzais</em> 3.8&deg;. <em>Mincha ketana</em> is the preferred earliest time to pray <em>mincha</em> according to\n   * the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others. For more information\n   * on this see the documentation on {@link #getMinchaKetana() <em>mincha ketana</em>}.\n   *\n   * @return the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such as\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the\n   *         sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanisAlos16Point1ToTzais3Point8()\n   * @see #getMinchaGedolaAhavatShalom()\n   * @see #getPlagAhavatShalom()\n   */\n  public getMinchaKetanaAhavatShalom(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getTzaisGeonim3Point8Degrees(), -this.getShaahZmanisAlos16Point1ToTzais3Point8() * 2.5);\n  }\n\n  /**\n   * This method returns the time of <em>mincha ketana</em> according to the Magen Avraham with the day\n   * starting 72 minutes before sunrise and ending 72 minutes after sunset. This is the preferred earliest time to pray\n   * <em>mincha</em> according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a>\n   * and others. For more information on this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}.\n   * This is calculated as 9.5 {@link #getShaahZmanis72Minutes()} after <em>alos</em>. The calculation used is 9.5 *\n   * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() <em>alos</em>}.\n   *\n   * @see #getShaahZmanis16Point1Degrees()\n   * @see #getMinchaGedola()\n   * @see #getMinchaKetana()\n   * @return the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaKetana72Minutes(): DateTime | null {\n    return this.getMinchaKetana(this.getAlos72(), this.getTzais72(), true);\n  }\n\n  /**\n   * This method returns the time of <em>plag hamincha</em> according to the Magen Avraham with the day starting 60\n   * minutes before sunrise and ending 60 minutes after sunset. This is calculated as 10.75 hours after\n   * {@link #getAlos60() dawn}. The formula used is 10.75 {@link #getShaahZmanis60Minutes()} after {@link #getAlos60()}.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis60Minutes()\n   * @see #getAlos60()\n   * @see #getTzais60()\n   */\n  public getPlagHamincha60Minutes(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos60(), this.getTzais60(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> according to the\n   * Magen Avraham with the day starting 72 minutes before sunrise and ending 72 minutes after sunset. This is calculated\n   * as 10.75 hours after {@link #getAlos72() dawn}. The formula used is 10.75 {@link #getShaahZmanis72Minutes()} after\n   * {@link #getAlos72()}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\n   * <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis72Minutes()\n   */\n  public getPlagHamincha72Minutes(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos72(), this.getTzais72(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> according to the\n   * Magen Avraham with the day starting 90 minutes before sunrise and ending 90 minutes after sunset. This is calculated\n   * as 10.75 hours after {@link #getAlos90() dawn}. The formula used is 10.75 {@link #getShaahZmanis90Minutes()} after\n   * {@link #getAlos90()}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\n   * <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis90Minutes()\n   */\n  public getPlagHamincha90Minutes(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos90(), this.getTzais90(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> according to the Magen\n   * Avraham with the day starting 96 minutes before sunrise and ending 96 minutes after sunset. This is calculated as 10.75\n   * hours after {@link #getAlos96() dawn}. The formula used is 10.75 {@link #getShaahZmanis96Minutes()} after\n   * {@link #getAlos96()}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\n   * <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis96Minutes()\n   */\n  public getPlagHamincha96Minutes(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos96(), this.getTzais96(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em>. This is calculated\n   * as 10.75 hours after {@link #getAlos96Zmanis() dawn}. The formula used is 10.75 * {@link\n   * #getShaahZmanis96MinutesZmanis()} after {@link #getAlos96Zmanis() dawn}. Since <em>plag</em> by this calculation can\n   * occur after sunset, it should only be used <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getPlagHamincha96MinutesZmanis(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos96Zmanis(), this.getTzais96Zmanis(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em>. This is calculated\n   * as 10.75 hours after {@link #getAlos90Zmanis() dawn}. The formula used is 10.75 * {@link\n   * #getShaahZmanis90MinutesZmanis()} after {@link #getAlos90Zmanis() dawn}. Since <em>plag</em> by this calculation can\n   * occur after sunset, it should only be used <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getPlagHamincha90MinutesZmanis(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos90Zmanis(), this.getTzais90Zmanis(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em>. This is calculated as\n   * 10.75 hours after {@link #getAlos72Zmanis()}. The formula used is 10.75 * {@link #getShaahZmanis72MinutesZmanis()} after\n   * {@link #getAlos72Zmanis() dawn}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\n   * <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getPlagHamincha72MinutesZmanis(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos72Zmanis(), this.getTzais72Zmanis(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the\n   * opinion that the day starts at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at {@link\n   * #getTzais16Point1Degrees() <em>tzais</em> 16.1&deg;}. This is calculated as 10.75 hours <em>zmaniyos</em>\n   * after {@link #getAlos16Point1Degrees() dawn}. The formula used is 10.75 * {@link #getShaahZmanis16Point1Degrees()}\n   * after {@link #getAlos16Point1Degrees()}. Since <em>plag</em> by this calculation can occur after sunset, it\n   * should only be used <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\n   *         the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis16Point1Degrees()\n   */\n  public getPlagHamincha16Point1Degrees(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the\n   * opinion that the day starts at {@link #getAlos19Point8Degrees() <em>alos</em> 19.8&deg;} and ends at {@link\n   * #getTzais19Point8Degrees() <em>tzais</em> 19.8&deg;}. This is calculated as 10.75 hours <em>zmaniyos</em>\n   * after {@link #getAlos19Point8Degrees() dawn}. The formula used is 10.75 * {@link\n   * #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees()}. Since <em>plag</em> by this\n   * calculation can occur after sunset, it should only be used <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\n   *         the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis19Point8Degrees()\n   */\n  public getPlagHamincha19Point8Degrees(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the\n   * opinion that the day starts at {@link #getAlos26Degrees() <em>alos</em> 26&deg;} and ends at {@link\n   * #getTzais26Degrees() <em>tzais</em> 26&deg;}. This is calculated as 10.75 hours <em>zmaniyos</em> after {@link\n   * #getAlos26Degrees() dawn}. The formula used is 10.75 * {@link #getShaahZmanis26Degrees()} after {@link\n   * #getAlos26Degrees()}. Since the <em>zman</em> based on an extremely early <em>alos</em> and a very late\n   * <em>tzais</em>, it should only be used <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\n   *         the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis26Degrees()\n   * @see #getPlagHamincha120Minutes()\n   */\n  public getPlagHamincha26Degrees(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos26Degrees(), this.getTzais26Degrees(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the\n   * opinion that the day starts at {@link #getAlos18Degrees() <em>alos</em> 18&deg;} and ends at {@link\n   * #getTzais18Degrees() <em>tzais</em> 18&deg;}. This is calculated as 10.75 hours <em>zmaniyos</em> after {@link\n   * #getAlos18Degrees() dawn}. The formula used is 10.75 * {@link #getShaahZmanis18Degrees()} after {@link\n   * #getAlos18Degrees()}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\n   * <em>lechumra</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time (often after\n   *         <em>shkiah</em>), and if used <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no\n   *         current plan to remove this method from the API, and this deprecation is intended to alert developers\n   *         of the danger of using it.\n   *\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\n   *         the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis18Degrees()\n   */\n  public getPlagHamincha18Degrees(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos18Degrees(), this.getTzais18Degrees(), true);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the opinion\n   * that the day starts at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at {@link #getSunset() sunset}.\n   * 10.75 <em>shaos zmaniyos</em> are calculated based on this day and added to {@link #getAlos16Point1Degrees()\n   * <em>alos</em>} to reach this time. This time is 10.75 <em>shaos zmaniyos</em> (temporal hours) after {@link\n   * #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a {@link #getAlos16Point1Degrees()\n   * dawn} of 16.1 degrees before sunrise to {@link #getSeaLevelSunset() sea level sunset}. This returns the time of 10.75 *\n   * the calculated <em>shaah zmanis</em> after {@link #getAlos16Point1Degrees() dawn}. Since <em>plag</em> by this\n   * calculation can occur after sunset, it should only be used <em>lechumra</em>.\n   *\n   *\n   * @return the <code>Date</code> of the <em>plag</em>. If the calculation can't be computed such as northern and southern\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\n   *         low enough below the horizon for this calculation, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getAlos16Point1Degrees()\n   * @see #getSeaLevelSunset()\n   */\n  public getPlagAlosToSunset(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getElevationAdjustedSunset());\n  }\n\n  /**\n   * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\n   * {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at {@link #getTzaisGeonim7Point083Degrees()\n   * <em>tzais</em>}. 10.75 <em>shaos zmaniyos</em> are calculated based on this day and added to {@link\n   * #getAlos16Point1Degrees() <em>alos</em>} to reach this time. This time is 10.75 <em>shaos zmaniyos</em> (temporal\n   * hours) after {@link #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a\n   * {@link #getAlos16Point1Degrees() dawn} of 16.1 degrees before sunrise to\n   * {@link #getTzaisGeonim7Point083Degrees() <em>tzais</em>} . This returns the time of 10.75 * the calculated\n   * <em>shaah zmanis</em> after {@link #getAlos16Point1Degrees() dawn}.\n   *\n   * @return the <code>Date</code> of the <em>plag</em>. If the calculation can't be computed such as northern and\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not\n   *         reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getAlos16Point1Degrees()\n   * @see #getTzaisGeonim7Point083Degrees()\n   */\n  public getPlagAlos16Point1ToTzaisGeonim7Point083Degrees(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getTzaisGeonim7Point083Degrees());\n  }\n\n  /**\n   * This method returns the time of <em>plag hamincha</em> (the earliest time that Shabbos can be started) based on the\n   * opinion of <a href=\"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in\n   * the <em>luach</em> of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that that <em>plag hamincha</em> is calculated\n   * as 1.25 <em>shaos zmaniyos</em> before {@link #getTzaisGeonim3Point8Degrees() <em>tzais</em> 3.8&deg;} with <em>shaos\n   * zmaniyos</em> calculated based on a day starting at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and\n   * ending at <em>tzais</em> 3.8&deg;.\n   *\n   * @return the <code>Date</code> of the <em>plag</em>. If the calculation can't be computed such as northern and\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not\n   *         reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanisAlos16Point1ToTzais3Point8()\n   * @see #getMinchaGedolaAhavatShalom()\n   * @see #getMinchaKetanaAhavatShalom()\n   */\n  public getPlagAhavatShalom(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getTzaisGeonim3Point8Degrees(), -this.getShaahZmanisAlos16Point1ToTzais3Point8() * 1.25);\n  }\n\n  /**\n   * Method to return the beginning of <em>bain hashmashos</em> of Rabbeinu Tam calculated when the sun is\n   * {@link #ZENITH_13_POINT_24 13.24&deg;} below the western {@link #GEOMETRIC_ZENITH geometric horizon} (90&deg;)\n   * after sunset. This calculation is based on the same calculation of {@link #getBainHashmashosRT58Point5Minutes()\n   * <em>bain hashmashos</em> Rabbeinu Tam 58.5 minutes} but uses a degree-based calculation instead of 58.5 exact\n   * minutes. This calculation is based on the position of the sun 58.5 minutes after sunset in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\n   * which calculates to 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\n   * NOTE: As per Yisrael Vehazmanim Vol. III page 1028, No. 50, a dip of slightly less than 13&deg; should be used.\n   * Calculations show that the proper dip to be 13.2456&deg; (truncated to 13.24 that provides about 1.5 second\n   * earlier (<em>lechumra</em>) time) below the horizon at that time. This makes a difference of 1 minute and 10\n   * seconds in Jerusalem during the Equinox, and 1 minute 29 seconds during the solstice as compared to the proper\n   * 13.24&deg; versus 13&deg;. For NY during the solstice, the difference is 1-minute 56 seconds.\n   * @todo recalculate the above based on equilux/equinox calculations.\n   *\n   * @return the <code>Date</code> of the sun being 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\n   *         (90&deg;). If the calculation can't be computed such as northern and southern locations even south of the\n   *         Arctic Circle and north of the Antarctic Circle where the sun may not reach low enough below the horizon\n   *         for this calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #ZENITH_13_POINT_24\n   * @see #getBainHashmashosRT58Point5Minutes()\n   */\n  public getBainHashmashosRT13Point24Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_13_POINT_24);\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosRT13Point24Degrees()}.\n   * @return the properly spelled version.\n   */\n  public getBainHasmashosRT13Point24Degrees(): DateTime | null {\n    return this.getBainHashmashosRT13Point24Degrees();\n  }\n\n  /**\n   * This method returns the beginning of <em>Bain hashmashos</em> of Rabbeinu Tam calculated as a 58.5-minute offset\n   * after sunset. <em>bain hashmashos</em> is 3/4 of a <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> before <em>tzais</em> or 3 1/4\n   * mil after sunset. With a mil calculated as 18 minutes, 3.25 * 18 = 58.5 minutes.\n   *\n   * @return the <code>Date</code> of 58.5 minutes after sunset. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   */\n  public getBainHashmashosRT58Point5Minutes(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 58.5 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosRT58Point5Minutes()}.\n   * @return the properly spelled version.\n   * @deprecated\n   */\n  public getBainHasmashosRT58Point5Minutes(): DateTime | null {\n    return this.getBainHashmashosRT58Point5Minutes();\n  }\n\n  /**\n   * This method returns the beginning of <em>bain hashmashos</em> based on the calculation of 13.5 minutes (3/4 of an\n   * 18-minute <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a>) before\n   * <em>shkiah</em> calculated as {@link #getTzaisGeonim7Point083Degrees() 7.083&deg;}.\n   *\n   * @return the <code>Date</code> of the <em>bain hashmashos</em> of Rabbeinu Tam in this calculation. If the\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\n   *         calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getTzaisGeonim7Point083Degrees()\n   */\n  public getBainHashmashosRT13Point5MinutesBefore7Point083Degrees(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_083), -13.5 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosRT13Point5MinutesBefore7Point083Degrees()}.\n   * @return the properly spelled version.\n   * @deprecated\n   */\n  public getBainHasmashosRT13Point5MinutesBefore7Point083Degrees(): DateTime | null {\n    return this.getBainHashmashosRT13Point5MinutesBefore7Point083Degrees();\n  }\n\n  /**\n   * This method returns the beginning of <em>bain hashmashos</em> of Rabbeinu Tam calculated according to the\n   * opinion of the <em>Divrei Yosef</em> (see Yisrael Vehazmanim) calculated 5/18th (27.77%) of the time between\n   * <em>alos</em> (calculated as 19.8&deg; before sunrise) and sunrise. This is added to sunset to arrive at the time\n   * for <em>bain hashmashos</em> of Rabbeinu Tam.\n   *\n   * @return the <code>Date</code> of <em>bain hashmashos</em> of Rabbeinu Tam for this calculation. If the\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\n   *         calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getBainHashmashosRT2Stars(): DateTime | null {\n    const alos19Point8: DateTime | null = this.getAlos19Point8Degrees();\n    const sunrise: DateTime | null = this.getElevationAdjustedSunrise();\n    if (alos19Point8 === null || sunrise === null) {\n      return null;\n    }\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), (sunrise.valueOf() - alos19Point8.valueOf()) * (5 / 18));\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosRT2Stars()}.\n   * @return the properly spelled version.\n   * @deprecated\n   */\n  public getBainHasmashosRT2Stars(): DateTime | null {\n    return this.getBainHashmashosRT2Stars();\n  }\n\n  /**\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as 18 minutes\n   * or 3/4 of a 24-minute <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\"\n   * >mil</a> before sunset. According to the Yereim, <em>bain hashmashos</em> starts 3/4 of a mil before sunset and\n   * <em>tzais</em> or nightfall starts at sunset.\n   *\n   * @return the <code>Date</code> of 18 minutes before sunset. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #getBainHashmashosYereim3Point05Degrees()\n   */\n  public getBainHashmashosYereim18Minutes(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), -18 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosYereim18Minutes()}.\n   * @return the properly spelled version.\n   * @deprecated\n   */\n  public getBainHasmashosYereim18Minutes(): DateTime | null {\n    return this.getBainHashmashosYereim18Minutes();\n  }\n\n  /**\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as the sun's\n   * position 3.05&deg; above the horizon <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\n   * its position 18 minutes or 3/4 of an 24-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> before sunset. According to\n   * the Yereim, <em>bain hashmashos</em> starts 3/4 of a mil before sunset and <em>tzais</em> or nightfall starts at\n   * sunset. Note that <em>lechumra</em> (of about 14 seconds) a refraction value of 0.5166&deg; as opposed to the\n   * traditional 0.566&deg; is used. This is more inline with the actual refraction in <em>Eretz Yisrael</em> and is\n   * brought down by <a href=\n   * \"http://beinenu.com/rabbis/%D7%94%D7%A8%D7%91-%D7%99%D7%93%D7%99%D7%93%D7%99%D7%94-%D7%9E%D7%A0%D7%AA\">Rabbi\n   * Yedidya Manet</a> in his <a href=\"https://www.nli.org.il/en/books/NNL_ALEPH002542826/NLI\">Zmanei Halacha\n   * Lema'aseh</a> (p. 11). That is the first source that I am aware of that calculates degree-based Yereim\n   * <em>zmanim</em>. The 0.5166&deg; refraction is also used by the <a href=\"https://zmanim.online/\">Luach Itim\n   * Lebinah</a>. Calculating the Yereim's <em>bain hashmashos</em> using 18-minute based degrees is also suggested\n   * in the upcoming 8th edition of the zmanim Kehilchasam. For more details, see the article <a href=\n   * \"https://kosherjava.com/2020/12/07/the-yereims-bein-hashmashos/\">The Yereim's <em>Bein Hashmashos</em></a>.\n   *\n   * @todo recalculate based on equinox/equilux\n   * @return the <code>Date</code> of the sun's position 3.05&deg; minutes before sunset. If the calculation can't\n   *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\n   *         rise, and one where it does not set, a <code>null</code> will be returned. See detailed explanation on\n   *         top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #ZENITH_MINUS_3_POINT_05\n   * @see #getBainHashmashosYereim18Minutes()\n   * @see #getBainHashmashosYereim2Point8Degrees()\n   * @see #getBainHashmashosYereim2Point1Degrees()\n   */\n  public getBainHashmashosYereim3Point05Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_MINUS_3_POINT_05);\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosYereim3Point05Degrees()}.\n   * @return the properly spelled version.\n   * @deprecated\n   */\n  public getBainHasmashosYereim3Point05Degrees(): DateTime | null {\n    return this.getBainHashmashosYereim3Point05Degrees();\n  }\n\n  /**\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as 16.875\n   * minutes or 3/4 of a 22.5-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> before sunset. According\n   * to the Yereim, <em>bain hashmashos</em> starts 3/4 of a mil before sunset and <em>tzais</em> or nightfall starts\n   * at sunset.\n   *\n   * @return the <code>Date</code> of 16.875 minutes before sunset. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getBainHashmashosYereim2Point8Degrees()\n   */\n  public getBainHashmashosYereim16Point875Minutes(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), -16.875 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosYereim16Point875Minutes()}.\n   * @return the properly spelled version.\n   * @deprecated\n   */\n  public getBainHasmashosYereim16Point875Minutes(): DateTime | null {\n    return this.getBainHashmashosYereim16Point875Minutes();\n  }\n\n  /**\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as the sun's\n   * position 2.8&deg; above the horizon <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\n   * its position 16.875 minutes or 3/4 of an 18-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> before sunset. According to\n   * the Yereim, <em>bain hashmashos</em> starts 3/4 of a mil before sunset and <em>tzais</em> or nightfall\n   * starts at sunset. Details, including how the degrees were calculated can be seen in the documentation of\n   * {@link #getBainHashmashosYereim3Point05Degrees()}.\n   *\n   * @return the <code>Date</code> of the sun's position 2.8&deg; minutes before sunset. If the calculation can't\n   *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\n   *         rise, and one where it does not set, a <code>null</code> will be returned. See detailed explanation on\n   *         top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #ZENITH_MINUS_2_POINT_8\n   * @see #getBainHashmashosYereim16Point875Minutes()\n   * @see #getBainHashmashosYereim3Point05Degrees()\n   * @see #getBainHashmashosYereim2Point1Degrees()\n   */\n  public getBainHashmashosYereim2Point8Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_MINUS_2_POINT_8);\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosYereim2Point8Degrees()}.\n   * @return the properly spelled version.\n   * @deprecated\n   */\n  public getBainHasmashosYereim2Point8Degrees(): DateTime | null {\n    return this.getBainHashmashosYereim2Point8Degrees();\n  }\n\n  /**\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as 13.5 minutes\n   * or 3/4 of an 18-minute <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a>\n   * before sunset. According to the Yereim, <em>bain hashmashos</em> starts 3/4 of a mil before sunset and\n   * <em>tzais</em> or nightfall starts at sunset.\n   *\n   * @return the <code>Date</code> of 13.5 minutes before sunset. If the calculation can't be computed such as in the\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getBainHashmashosYereim2Point1Degrees()\n   */\n  public getBainHashmashosYereim13Point5Minutes(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), -13.5 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosYereim13Point5Minutes()}.\n   * @return the properly spelled version.\n   * @deprecated\n   */\n  public getBainHasmashosYereim13Point5Minutes(): DateTime | null {\n    return this.getBainHashmashosYereim13Point5Minutes();\n  }\n\n  /**\n   * This method returns the beginning of <em>bain hashmashos</em> according to the <a href=\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as the sun's\n   * position 2.1&deg; above the horizon <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> in\n   * Yerushalayim, its position 13.5 minutes or 3/4 of an 18-minute <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> before sunset. According to the\n   * Yereim, <em>bain hashmashos</em> starts 3/4 of a mil before sunset and <em>tzais</em> or nightfall starts\n   * at sunset. Details, including how the degrees were calculated can be seen in the documentation of\n   * {@link #getBainHashmashosYereim3Point05Degrees()}.\n   *\n   * @return the <code>Date</code> of the sun's position 2.1&deg; minutes before sunset. If the calculation can't be\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and\n   *         one where it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #ZENITH_MINUS_2_POINT_1\n   * @see #getBainHashmashosYereim13Point5Minutes()\n   * @see #getBainHashmashosYereim2Point8Degrees()\n   * @see #getBainHashmashosYereim3Point05Degrees()\n   */\n  public getBainHashmashosYereim2Point1Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_MINUS_2_POINT_1);\n  }\n\n  /**\n   * Misspelled method name that should be {@link #getBainHashmashosYereim2Point1Degrees()}.\n   * @return the properly spelled version.\n   * @deprecated\n   */\n  public getBainHasmashosYereim2Point1Degrees(): DateTime | null {\n    return this.getBainHashmashosYereim2Point1Degrees();\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\n   * sun's position at {@link #ZENITH_3_POINT_7 3.7&deg;} below the western horizon.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 3.7&deg; below sea level.\n   * @see #ZENITH_3_POINT_7\n   */\n  public getTzaisGeonim3Point7Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_7);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\n   * sun's position at {@link #ZENITH_3_POINT_8 3.8&deg;} below the western horizon.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 3.8&deg; below sea level.\n   * @see #ZENITH_3_POINT_8\n   */\n  public getTzaisGeonim3Point8Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_8);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\n   * sun's position at {@link #ZENITH_5_POINT_95 5.95&deg;} below the western horizon.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 5.95&deg; below sea level. If the calculation\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #ZENITH_5_POINT_95\n   */\n  public getTzaisGeonim5Point95Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_5_POINT_95);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\n   * of a <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> based on an\n   * 18-minute mil, or 13.5 minutes. It is the sun's position at {@link #ZENITH_3_POINT_65 3.65&deg;} below the western\n   * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 3.65&deg; below sea level. If the calculation\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @deprecated This will be removed since calculations show that this time is earlier than 13.5 minutes at\n   *              the <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the\n   *              equinox / equilux</a> in Jerusalem.\n   * @see #ZENITH_3_POINT_65\n   */\n  public getTzaisGeonim3Point65Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_65);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\n   * of a <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> based on an\n   * 18-minute mil, or 13.5 minutes. It is the sun's position at {@link #ZENITH_3_POINT_676 3.676&deg;} below the western\n   * horizon based on the calculations of Stanley Fishkind. This is a very early <em>zman</em> and should not be\n   * relied on without Rabbinical guidance.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 3.676&deg; below sea level. If the\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\n   *         calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @deprecated This will be removed since calculations show that this time is earlier than 13.5 minutes at\n   *              the <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the\n   *              equinox / equilux</a> in Jerusalem.\n   * @see #ZENITH_3_POINT_676\n   */\n  public getTzaisGeonim3Point676Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_676);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\n   * of a <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> based on a\n   * 24-minute mil, or 18 minutes. It is the sun's position at {@link #ZENITH_4_POINT_61 4.61&deg;} below the\n   * western horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 4.61&deg; below sea level. If the calculation\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #ZENITH_4_POINT_61\n   */\n  public getTzaisGeonim4Point61Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_61);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\n   * of a <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a>, based on a\n   * 22.5-minute mil, or 16 7/8 minutes. It is the sun's position at {@link #ZENITH_4_POINT_37 4.37&deg;} below the western\n   * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 4.37&deg; below sea level. If the calculation\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #ZENITH_4_POINT_37\n   */\n  public getTzaisGeonim4Point37Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_37);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\n   * of a 24-minute <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a>,\n   * based on a <em>mil</em> being 24 minutes, and is calculated as 18 + 2 + 4 for a total of 24 minutes. It is the\n   * sun's position at {@link #ZENITH_5_POINT_88 5.88&deg;} below the western horizon. This is a very early\n   * <em>zman</em> and should not be relied on without Rabbinical guidance.\n   *\n   * @todo Additional detailed documentation needed.\n   * @return the <code>Date</code> representing the time when the sun is 5.88&deg; below sea level. If the calculation\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #ZENITH_5_POINT_88\n   */\n  public getTzaisGeonim5Point88Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_5_POINT_88);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\n   * of a <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> based on the\n   * sun's position at {@link #ZENITH_4_POINT_8 4.8&deg;} below the western horizon. This is based on Rabbi Leo Levi's\n   * calculations. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\n   * @todo Additional documentation needed.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 4.8&deg; below sea level. If the calculation\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #ZENITH_4_POINT_8\n   */\n  public getTzaisGeonim4Point8Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_8);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> as calculated by\n   * <a href=\"https://en.wikipedia.org/wiki/Yechiel_Michel_Tucazinsky\">Rabbi Yechiel Michel Tucazinsky</a>. It is\n   * based on of the position of the sun no later than {@link #getTzaisGeonim6Point45Degrees() 31 minutes} after sunset\n   * in Jerusalem the height of the summer solstice and is 28 minutes after <em>shkiah</em> <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>. This\n   * computes to 6.45&deg; below the western horizon.\n   * @todo Additional documentation details needed.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 6.45&deg; below sea level. If the\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\n   *         calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_6_POINT_45\n   */\n  public getTzaisGeonim6Point45Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_6_POINT_45);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated when the\n   * sun's position {@link #ZENITH_7_POINT_083 7.083&deg; (or 7&deg; 5\\u2032}) below the western horizon. This is often\n   * referred to as 7&deg;5' or 7&deg; and 5 minutes. This calculation is based on the observation of 3 medium-sized\n   * stars by Dr. Baruch (Berthold) Cohn in his <em>luach</em> <a href=\n   * \"https://sammlungen.ub.uni-frankfurt.de/freimann/content/titleinfo/983088\">Tabellen enthaltend die Zeitangaben für\n   * den Beginn der Nacht und des Tages für die Breitengrade + 66 bis -38</a> published in Strasbourg, France in 1899.\n   * This calendar was very popular in Europe, and many other calendars based their time on it. <a href=\n   * \"https://en.wikipedia.org/wiki/David_Zvi_Hoffmann\">Rav Dovid Tzvi Hoffman</a> in his\n   * <a href=\"https://hebrewbooks.org/1053\">Sh\"Ut Melamed Leho'il</a> in an exchange of letters with Baruch Cohn in <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=1053&st=&pgnum=37\">Orach Chaim 30</a> agreed to this <em>zman</em> (page 36),\n   * as did the Sh\"Ut Bnei Tziyon and the Tenuvas Sadeh. It is very close to the time of the <a href=\n   * \"https://hebrewbooks.org/22044\">Mekor Chesed</a> of the Sefer chasidim. It is close to the position of the sun 30 minutes\n   * after sunset in Jerusalem <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, but not\n   * Exactly. The actual position of the sun 30 minutes after sunset in Jerusalem at the equilux is 7.205&deg; and 7.199&deg;\n   * at the equinox. See Hazmanim Bahalacha vol 2, pages 520-521 for more details.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 7.083&deg; below sea level. If the\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\n   *         calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_7_POINT_083\n   */\n  public getTzaisGeonim7Point083Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_083);\n  }\n\n  /**\n   * This method returns <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 45 minutes\n   * after sunset during the summer solstice in New York, when the <em>neshef</em> (twilight) is the longest. The sun's\n   * position at this time computes to {@link #ZENITH_7_POINT_67 7.75&deg;} below the western horizon. See <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=921&pgnum=149\">Igros Moshe Even Haezer 4, Ch. 4</a> (regarding\n   * <em>tzais</em> for <em>krias Shema</em>). It is also mentioned in Rabbi Heber's <a href=\n   * \"https://hebrewbooks.org/53000\">Shaarei Zmanim</a> on in\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=53055&pgnum=101\">chapter 10 (page 87)</a> and\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=53055&pgnum=122\">chapter 12 (page 108)</a>. Also see the\n   * time of 45 minutes in <a href=\"https://en.wikipedia.org/wiki/Simcha_Bunim_Cohen\">Rabbi Simcha Bunim Cohen's</a> <a\n   * href=\"https://www.worldcat.org/oclc/179728985\">The radiance of Shabbos</a> as the earliest <em>zman</em> for New York.\n   * This <em>zman</em> is also listed in the <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=1927&pgnum=90\">Divrei\n   * Shalom Vol. III, chapter 75</a>, and <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=892&pgnum=431\">Bais Av\"i\n   * Vol. III, chapter 117</a>. This <em>zman</em> is also listed in the Divrei Shalom etc. chapter 177 (FIXME - could not\n   * be located). Since this <em>zman</em> depends on the level of light, Rabbi Yaakov Shakow presented this degree-based\n   * calculation to Rabbi <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who agreed\n   * to it.\n   * @todo add hyperlinks to source of Divrei Shalom once it is located.\n   * @return the <code>Date</code> representing the time when the sun is 7.67&deg; below sea level. If the\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\n   *         calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_7_POINT_67\n   */\n  public getTzaisGeonim7Point67Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_67);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\n   * sun's position at {@link #ZENITH_8_POINT_5 8.5&deg;} below the western horizon.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 8.5&deg; below sea level. If the calculation\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #ZENITH_8_POINT_5\n   */\n  public getTzaisGeonim8Point5Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_8_POINT_5);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the calculations used in the <a href=\n   * \"https://www.worldcat.org/oclc/243303103\">Luach Itim Lebinah</a> as the stringent time for <em>tzais</em>.  It is\n   * calculated at the sun's position at {@link #ZENITH_9_POINT_3 9.3&deg;} below the western horizon.\n   *\n   * @return the <code>Date</code> representing the time when the sun is 9.3&deg; below sea level. If the calculation\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   */\n  public getTzaisGeonim9Point3Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_3);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 60\n   * minutes after sunset <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, the\n   * day that a solar hour is 60 minutes in New York. The sun's position at this time computes to\n   * {@link #ZENITH_9_POINT_75 9.75&deg;} below the western horizon. This is the opinion of <a href=\n   * \"https://en.wikipedia.org/wiki/Yosef_Eliyahu_Henkin\">Rabbi Eliyahu Henkin</a>.  This also follows the opinion of\n   * <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a>. Rabbi Yaakov Shakow presented\n   * these degree-based times to Rabbi Shmuel Kamenetsky who agreed to them.\n   *\n   * @todo recalculate based on equinox / equilux.\n   * @return the <code>Date</code> representing the time when the sun is 9.75&deg; below sea level. If the calculation\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   *\n   * @see #getTzais60()\n   */\n  public getTzaisGeonim9Point75Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_75);\n  }\n\n  /**\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <a href=\n   * \"https://en.wikipedia.org/wiki/Yair_Bacharach\">Chavas Yair</a> and <a href=\n   * \"https://he.wikipedia.org/wiki/%D7%9E%D7%9C%D7%9B%D7%99%D7%90%D7%9C_%D7%A6%D7%91%D7%99_%D7%98%D7%A0%D7%A0%D7%91%D7%95%D7%99%D7%9D\"\n   * >Divrei Malkiel</a> that the time to walk the distance of a <a href=\n   * \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> is 15 minutes, for a total of 60 minutes\n   * for 4 mil after {@link #getSeaLevelSunset() sea level sunset}. See detailed documentation explaining the 60 minute concept at\n   * {@link #getAlos60()}.\n   *\n   * @return the <code>Date</code> representing 60 minutes after sea level sunset. If the calculation can't be\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\n   *         and one where it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getAlos60()\n   * @see #getPlagHamincha60Minutes()\n   * @see #getShaahZmanis60Minutes()\n   */\n  public getTzais60(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 60 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * This method returns <em>tzais</em> usually calculated as 40 minutes (configurable to any offset via\n   * {@link #setAteretTorahSunsetOffset(double)}) after sunset. Please note that <em>Chacham</em> Yosef Harari-Raful\n   * of Yeshivat Ateret Torah who uses this time, does so only for calculating various other <em>zmanei hayom</em>\n   * such as <em>Sof Zman Krias Shema</em> and <em>Plag Hamincha</em>. His calendars do not publish a <em>zman</em>\n   * for <em>Tzais</em>. It should also be noted that <em>Chacham</em> Harari-Raful provided a 25-minute <em>zman</em>\n   * for Israel. This API uses 40 minutes year round in any place on the globe by default. This offset can be changed\n   * by calling {@link #setAteretTorahSunsetOffset(double)}.\n   *\n   * @return the <code>Date</code> representing 40 minutes (configurable via {@link #setAteretTorahSunsetOffset})\n   *         after sea level sunset. If the calculation can't be computed such as in the Arctic Circle where there is\n   *         at least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will\n   *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAteretTorahSunsetOffset()\n   * @see #setAteretTorahSunsetOffset(double)\n   */\n  public getTzaisAteretTorah(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), this.getAteretTorahSunsetOffset() * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * Returns the offset in minutes after sunset used to calculate <em>tzais</em> based on the calculations of\n   * <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah calculations. The default value is 40 minutes.\n   * This affects most <em>zmanim</em>, since almost all zmanim use subset as part of their calculation.\n   *\n   * @return the number of minutes after sunset for <em>Tzait</em>.\n   * @see #setAteretTorahSunsetOffset(double)\n   */\n  public getAteretTorahSunsetOffset(): number {\n    return this.ateretTorahSunsetOffset;\n  }\n\n  /**\n   * Allows setting the offset in minutes after sunset for the Ateret Torah <em>zmanim</em>. The default if unset is\n   * 40 minutes. <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah uses 40 minutes globally with the exception\n   * of Israel where a 25-minute offset is used. This 40-minute (or any other) offset can be overridden by this method.\n   * This offset impacts all Ateret Torah <em>zmanim</em>.\n   *\n   * @param ateretTorahSunsetOffset\n   *            the number of minutes after sunset to use as an offset for the Ateret Torah <em>tzais</em>\n   * @see #getAteretTorahSunsetOffset()\n   */\n  public setAteretTorahSunsetOffset(ateretTorahSunsetOffset: number): void {\n    this.ateretTorahSunsetOffset = ateretTorahSunsetOffset;\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\n   * calculation of <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts\n   * {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is usually calculated as ending\n   * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\n   * {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are calculated based on this day and added\n   * to {@link #getAlos72Zmanis() <em>alos</em>} to reach this time. This time is 3\n   * {@link #getShaahZmanisAteretTorah() <em>shaos zmaniyos</em>} (temporal hours) after\n   * {@link #getAlos72Zmanis() <em>alos</em> 72 <em>zmaniyos</em>}. <b>Note: </b> Based on this calculation <em>chatzos</em>\n   * will not be at midday.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\n   *         the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAlos72Zmanis()\n   * @see #getTzaisAteretTorah()\n   * @see #getAteretTorahSunsetOffset()\n   * @see #setAteretTorahSunsetOffset(double)\n   * @see #getShaahZmanisAteretTorah()\n   */\n  public getSofZmanShmaAteretTorah(): DateTime | null {\n    return this.getSofZmanShma(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) based on the calculation\n   * of <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis()\n   * 1/10th of the day} before sunrise and is usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes\n   * after sunset} (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em>\n   * are calculated based on this day and added to {@link #getAlos72Zmanis() <em>alos</em>} to reach this time. This time\n   * is 4 * {@link #getShaahZmanisAteretTorah() <em>shaos zmaniyos</em>} (temporal hours) after\n   * {@link #getAlos72Zmanis() <em>alos</em> 72 zmaniyos}.\n   * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\n   *         the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAlos72Zmanis()\n   * @see #getTzaisAteretTorah()\n   * @see #getShaahZmanisAteretTorah()\n   * @see #setAteretTorahSunsetOffset(double)\n   */\n  public getSofZmanTfilaAteretTorah(): DateTime | null {\n    return this.getSofZmanTfila(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n\n  /**\n   * @see #getSofZmanTfilaAteretTorah()\n   * @deprecated misspelled method name (all other methods spell tfila without an H), to be removed.\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\n   *         the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanTfilahAteretTorah(): DateTime | null {\n    return this.getSofZmanTfilaAteretTorah();\n  }\n\n  /**\n   * This method returns the time of <em>mincha gedola</em> based on the calculation of <em>Chacham</em> Yosef\n   * Harari-Raful of Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis() 1/10th of the day}\n   * before sunrise and is usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes after sunset}\n   * (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}). This is the preferred earliest\n   * time to pray <em>mincha</em> according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\"\n   * >Rambam</a> and others. For more information on this see the documentation on {@link #getMinchaGedola() <em>mincha\n   * gedola</em>}. This is calculated as 6.5 {@link #getShaahZmanisAteretTorah()  solar hours} after <em>alos</em>. The\n   * calculation used is 6.5 * {@link #getShaahZmanisAteretTorah()} after {@link #getAlos72Zmanis() <em>alos</em>}.\n   *\n   * @see #getAlos72Zmanis()\n   * @see #getTzaisAteretTorah()\n   * @see #getShaahZmanisAteretTorah()\n   * @see #getMinchaGedola()\n   * @see #getMinchaKetanaAteretTorah()\n   * @see ZmanimCalendar#getMinchaGedola()\n   * @see #getAteretTorahSunsetOffset()\n   * @see #setAteretTorahSunsetOffset(double)\n   *\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaGedolaAteretTorah(): DateTime | null {\n    return this.getMinchaGedola(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n\n  /**\n   * This method returns the time of <em>mincha ketana</em> based on the calculation of\n   * <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts\n   * {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is usually calculated as ending\n   * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\n   * {@link #setAteretTorahSunsetOffset(double)}). This is the preferred earliest time to pray <em>mincha</em>\n   * according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others.\n   * For more information on this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}. This is\n   * calculated as 9.5 {@link #getShaahZmanisAteretTorah() solar hours} after {@link #getAlos72Zmanis() <em>alos</em>}.\n   * The calculation used is 9.5 * {@link #getShaahZmanisAteretTorah()} after {@link #getAlos72Zmanis() <em>alos</em>}.\n   *\n   * @see #getAlos72Zmanis()\n   * @see #getTzaisAteretTorah()\n   * @see #getShaahZmanisAteretTorah()\n   * @see #getAteretTorahSunsetOffset()\n   * @see #setAteretTorahSunsetOffset(double)\n   * @see #getMinchaGedola()\n   * @see #getMinchaKetana()\n   * @return the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaKetanaAteretTorah(): DateTime | null {\n    return this.getMinchaKetana(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n\n  /**\n   * This method returns the time of <em>plag hamincha</em> based on the calculation of <em>Chacham</em> Yosef Harari-Raful\n   * of Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is\n   * usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset\n   * via {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are calculated based on this day and\n   * added to {@link #getAlos72Zmanis() <em>alos</em>} to reach this time. This time is 10.75\n   * {@link #getShaahZmanisAteretTorah() <em>shaos zmaniyos</em>} (temporal hours) after {@link #getAlos72Zmanis()\n   * dawn}.\n   *\n   * @return the <code>Date</code> of the <em>plag</em>. If the calculation can't be computed such as in the Arctic Circle\n   *         where there is at least one day a year where the sun does not rise, and one where it does not set, a null\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAlos72Zmanis()\n   * @see #getTzaisAteretTorah()\n   * @see #getShaahZmanisAteretTorah()\n   * @see #setAteretTorahSunsetOffset(double)\n   * @see #getAteretTorahSunsetOffset()\n   */\n  public getPlagHaminchaAteretTorah(): DateTime | null {\n    return this.getPlagHamincha(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\n  }\n\n  /**\n   * Method to return <em>tzais</em> (dusk) calculated as 72 minutes zmaniyos, or 1/10th of the day after\n   * {@link #getSeaLevelSunset() sea level sunset}. This is the way that the <a href=\n   * \"https://en.wikipedia.org/wiki/Abraham_Cohen_Pimentel\">Minchas Cohen</a> in Ma'amar 2:4 calculates Rebbeinu Tam's\n   * time of <em>tzeis</em>. It should be noted that this calculation results in the shortest time from sunset to\n   * <em>tzais</em> being during the winter solstice, the longest at the summer solstice and 72 clock minutes at the\n   * equinox. This does not match reality, since there is no direct relationship between the length of the day and\n   * twilight. The shortest twilight is during the equinox, the longest is during the summer solstice, and in the\n   * winter with the shortest daylight, the twilight period is longer than during the equinoxes.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getAlos72Zmanis()\n   */\n  public getTzais72Zmanis(): DateTime | null {\n    return this.getZmanisBasedOffset(1.2);\n  }\n\n  /**\n   * A utility method to return <em>alos</em> (dawn) or <em>tzais</em> (dusk) based on a fractional day offset.\n   * @param hours the number of <em>shaos zmaniyos</em> (temporal hours) before sunrise or after sunset that defines dawn\n   *        or dusk. If a negative number is passed in, it will return the time of <em>alos</em> (dawn) (subtracting the\n   *        time from sunrise) and if a positive number is passed in, it will return the time of <em>tzais</em> (dusk)\n   *        (adding the time to sunset). If 0 is passed in, a <code>null</code> will be returned (since we can't tell if it\n   *        is sunrise or sunset based).\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. A <code>null</code> will also be returned if 0 is passed in, since we can't\n   *         tell if it is sunrise or sunset based. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   */\n  private getZmanisBasedOffset(hours: number): DateTime | null {\n    const shaahZmanis: number = this.getShaahZmanisGra();\n    if (shaahZmanis === Long_MIN_VALUE || hours === 0) {\n      return null;\n    }\n\n    return hours > 0\n        ? ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), shaahZmanis * hours)\n        : ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), shaahZmanis * hours);\n  }\n\n  /**\n   * Method to return <em>tzais</em> (dusk) calculated using 90 minutes zmaniyos or 1/8th of the day after {@link\n   * #getSeaLevelSunset() sea level sunset}. This time is known in Yiddish as the <em>achtel</em> (an eighth)\n   * <em>zman</em>.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getAlos90Zmanis()\n   */\n  public getTzais90Zmanis(): DateTime | null {\n    return this.getZmanisBasedOffset(1.5);\n  }\n\n  /**\n   * Method to return <em>tzais</em> (dusk) calculated using 96 minutes <em>zmaniyos</em> or 1/7.5 of the day after\n   * {@link #getSeaLevelSunset() sea level sunset}.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getAlos96Zmanis()\n   */\n  public getTzais96Zmanis(): DateTime | null {\n    return this.getZmanisBasedOffset(1.6);\n  }\n\n  /**\n   * Method to return <em>tzais</em> (dusk) calculated as 90 minutes after sea level sunset. This method returns\n   * <em>tzais</em> (nightfall) based on the opinion of the Magen Avraham that the time to walk the distance of a\n   * <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a> according to the\n   * <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a>'s opinion is 18 minutes, for a total of 90\n   * minutes based on the opinion of Ula who calculated <em>tzais</em> as 5 mil after sea level\n   * <em>shkiah</em> (sunset). A similar calculation {@link #getTzais19Point8Degrees()} uses solar position\n   * calculations based on this time.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getTzais19Point8Degrees()\n   * @see #getAlos90()\n   */\n  public getTzais90(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 90 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns <em>tzais</em> (nightfall) based on the calculations\n   * of <a href=\"https://en.wikipedia.org/wiki/Avraham_Chaim_Naeh\">Rav Chaim Naeh</a> that the time to walk the\n   * distance of a <a href=\"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\">mil</a>\n   * according to the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a>'s opinion is 2/5 of an hour (24 minutes)\n   * for a total of 120 minutes based on the opinion of <em>Ula</em> who calculated <em>tzais</em> as 5 mil after\n   * sea level <em>shkiah</em> (sunset). A similar calculation {@link #getTzais26Degrees()} uses degree-based calculations\n   * based on this 120 minute calculation. Since the <em>zman</em> is extremely late and at a point that is long past the\n   * 18&deg; point where the darkest point is reached, it should only be used <em>lechumra</em>, such as delaying the start\n   * of nighttime <em>mitzvos</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}.\n   *         documentation.\n   * @see #getTzais26Degrees()\n   * @see #getAlos120()\n   */\n  public getTzais120(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 120 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns <em>tzais</em> (dusk) calculated using 120 minutes\n   * <em>zmaniyos</em> after {@link #getSeaLevelSunset() sea level sunset}. Since the <em>zman</em>\n   * is extremely late and at a time when the sun is well below the 18&deg; point (scientifically the darkest point) in\n   * most places on the globe, it should only be used <em>lechumra</em>, such as delaying the start of nighttime\n   * <em>mitzvos</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getAlos120Zmanis()\n   * @see #getTzais120()\n   * @see #getTzais26Degrees()\n   */\n  public getTzais120Zmanis(): DateTime | null {\n    return this.getZmanisBasedOffset(2);\n  }\n\n  /**\n   * This calculates the time of <em>tzais</em> at the point when the sun is 16.1&deg; below the horizon. This is\n   * the sun's dip below the horizon 72 minutes after sunset according Rabbeinu Tam's calculation of <em>tzais</em>\n   * <a href=\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> in\n   * Jerusalem. The question of equinox VS equilux is complex, with Rabbi Meir Posen in the <a href=\n   * \"https://www.worldcat.org/oclc/956316270\">Ohr Meir</a> of the opinion that the equilux should be used. See\n   * Yisrael Vehazmanim vol I, 34:1:4. Rabbi Yedidya Manet in his <a href=\n   * \"https://www.nli.org.il/en/books/NNL_ALEPH002542826/NLI\">Zmanei Halacha Lema'aseh</a> (4th edition part 2, pages\n   * and 22 and 24) and Rabbi Yonah Mertzbuch (in a letter published by Rabbi Manet) are of the opinion that the\n   * astronomical equinox should be used. The difference adds up to about 9 seconds, too trivial to make much of a\n   * difference. For information on how this is calculated see the comments on {@link #getAlos16Point1Degrees()}.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\n   *         not reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getTzais72()\n   * @see #getAlos16Point1Degrees() for more information on this calculation.\n   */\n  public getTzais16Point1Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_1);\n  }\n\n  /**\n   * This method should be used <em>lechumra</em> only and returns <em>tzais</em> based on when the sun is 26&deg;\n   * below the horizon. For information on how this is calculated see the comments on {@link #getAlos26Degrees()}.\n   * Since the <em>zman</em> is extremely late and at a point when it is long past the 18&deg; point where the\n   * darkest point is reached, it should only be used <em>lechumra</em> such as delaying the start of nighttime\n   * <em>mitzvos</em>.\n   *\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\n   *         not reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getTzais120()\n   * @see #getAlos26Degrees()\n   */\n  public getTzais26Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_26_DEGREES);\n  }\n\n  /**\n   * For information on how this is calculated see the comments on {@link #getAlos18Degrees()}\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\n   *         not reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAlos18Degrees()\n   */\n  public getTzais18Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ASTRONOMICAL_ZENITH);\n  }\n\n  /**\n   * For information on how this is calculated see the comments on {@link #getAlos19Point8Degrees()}\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\n   *         not reach low enough below the horizon for this calculation, a <code>null</code> will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getTzais90()\n   * @see #getAlos19Point8Degrees()\n   */\n  public getTzais19Point8Degrees(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_POINT_8);\n  }\n\n  /**\n   * A method to return <em>tzais</em> (dusk) calculated as 96 minutes after sea level sunset. For information on how\n   * this is calculated see the comments on {@link #getAlos96()}.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   * @see #getAlos96()\n   */\n  public getTzais96(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 96 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * A method that returns the local time for fixed <em>chatzos</em>. This time is noon and midnight adjusted from\n   * standard time to account for the local latitude. The 360&deg; of the globe divided by 24 calculates to 15&deg;\n   * per hour with 4 minutes per degree, so at a longitude of 0 , 15, 30 etc... <em>Chatzos</em> is at exactly 12:00\n   * noon. This is the time of <em>chatzos</em> according to the <a href=\n   * \"https://en.wikipedia.org/wiki/Aruch_HaShulchan\">Aruch Hashulchan</a> in <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=7705&pgnum=426\">Orach Chaim 233:14</a> and <a href=\n   * \"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rabbi Moshe Feinstein</a> in Igros Moshe <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=916&st=&pgnum=67\">Orach Chaim 1:24</a> and <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=14675&pgnum=191\">2:20</a>.\n   * Lakewood, N.J., with a longitude of -74.222, is 0.778 away from the closest multiple of 15 at -75&deg;. This\n   * is multiplied by 4 to yield 3 minutes and 7 seconds for a <em>chatzos</em> of 11:56:53. This method is not tied\n   * to the theoretical 15&deg; time zones, but will adjust to the actual time zone and <a\n   * href=\"https://en.wikipedia.org/wiki/Daylight_saving_time\">Daylight saving time</a>.\n   *\n   * @return the Date representing the local <em>chatzos</em>\n   * @see GeoLocation#getLocalMeanTimeOffset()\n   */\n  public getFixedLocalChatzos(): DateTime | null {\n    return this.getLocalMeanTime(12);\n  }\n\n  /**\n   * A method that returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) calculated as 3\n   * clock hours before {@link #getFixedLocalChatzos()}. Note that there are opinions brought down in Yisrael Vehazmanim\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=9765&st=&pgnum=85\">page 57</a> and Rav Yitzchak Silber's <a href=\n   * \"https://www.worldcat.org/oclc/811253716\">Shaos Shavos Bahalacha</a> that this calculation is a mistake and regular\n   * <em>chatzos</em> should be used for clock-hour calculations as opposed to fixed local <em>chatzos</em>. According to\n   * these opinions it should be 3 clock hours before regular <em>chatzos</em> as calculated in {@link\n   * #getSofZmanShma3HoursBeforeChatzos()}.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> calculated as 3 clock hours before\n   *         {@link #getFixedLocalChatzos()}.\n   * @see #getFixedLocalChatzos()\n   * @see #getSofZmanShma3HoursBeforeChatzos()\n   * @see #getSofZmanTfilaFixedLocal()\n   *\n   * @deprecated This method of calculating <em>sof zman Shma</em> is considered a mistaken understanding of the proper\n   *         calculation of this <em>zman</em> in the opinion of Rav Yitzchak Silber's <a href=\n   *         \"https://www.worldcat.org/oclc/811253716\">Shaos Shavos Bahalacha</a>. On pages 316-318 he discusses Rav Yisrael\n   *         Harfenes's calculations and points to his seeming agreement that using fixed local <em>chatzos</em> as the focal\n   *         point is problematic. See Yisrael Vehazmanim <a href=\n   *         \"https://hebrewbooks.org/pdfpager.aspx?req=9765&st=&pgnum=85\">page 57</a>. While the Yisrael Vehazmanim mentions\n   *         this issue in vol. 1, it was not corrected in the calculations in vol. 3 and other parts of the <em>sefer</em>.\n   *         A competent rabbinical authority should be consulted before using this <em>zman</em>. Instead, the use of {@link\n   *         #getSofZmanShma3HoursBeforeChatzos()} should be used to calculate <em>sof zman Tfila</em> using 3 fixed\n   *         clock hours. This will likely be removed in a future version.\n   */\n  public getSofZmanShmaFixedLocal(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getFixedLocalChatzos(), -180 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) calculated as 2 hours\n   * before {@link #getFixedLocalChatzos()}. See the documentation on {@link #getSofZmanShmaFixedLocal()} showing\n   * differing opinions on how the <em>zman</em> is calculated. According to many opinions {@link\n   * #getSofZmanTfila2HoursBeforeChatzos()} should be used as opposed to this <em>zman</em>.\n   *\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>.\n   * @see #getFixedLocalChatzos()\n   * @see #getSofZmanShmaFixedLocal()\n   * @see #getSofZmanTfila2HoursBeforeChatzos()\n   *\n   * @deprecated This method of calculating <em>sof zman Tfila</em> is considered a mistaken understanding of the proper\n   *         calculation of this <em>zman</em> in the opinion of Rav Yitzchak Silber's <a href=\n   *         \"https://www.worldcat.org/oclc/811253716\">Shaos Shavos Bahalacha</a>. On pages 316-318 he discusses Rav Yisrael\n   *         Harfenes's calculations and points to his seeming agreement that using fixed local <em>chatzos</em> as the focal\n   *         point is problematic. See Yisrael Vehazmanim <a href=\n   *         \"https://hebrewbooks.org/pdfpager.aspx?req=9765&st=&pgnum=85\">page 57</a>. While the Yisrael Vehazmanim mentions\n   *         this issue in vol. 1, it was not corrected in the calculations in vol. 3 and other parts of the <em>sefer</em>.\n   *         A competent rabbinical authority should be consulted before using this <em>zman</em>. Instead, the use of {@link\n   *         #getSofZmanTfila2HoursBeforeChatzos()} should be used to calculate <em>sof zman Tfila</em> using using 2 fixed\n   *         clock hours. This will likely be removed in a future version.\n   */\n  public getSofZmanTfilaFixedLocal(): DateTime | null {\n    return ComplexZmanimCalendar.getTimeOffset(this.getFixedLocalChatzos(), -120 * ComplexZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * Returns the Date of the <em>molad</em> based time if it occurs on the current date. Since <em>Kiddush Levana</em>\n   * can only be said during the day, there are parameters to limit it to between <em>alos</em> and <em>tzais</em>. If\n   * the time occurs between <em>alos</em> and <em>tzais</em>, <em>tzais</em> will be returned.\n   *\n   * @param moladBasedTime\n   *            the <em>molad</em> based time such as <em>molad</em>, <em>tchilas</em> and <em>sof zman Kiddush Levana</em>\n   * @param alos\n   *            optional start of day to limit <em>molad</em> times to the end of the night before or beginning of the next night.\n   *            Ignored if either <em>alos</em> or <em>tzais</em> are null.\n   * @param tzais\n   *            optional end of day to limit <em>molad</em> times to the end of the night before or beginning of the next night.\n   *            Ignored if either <em>tzais</em> or <em>alos</em> are null\n   * @param techila\n   *            is it the start of <em>Kiddush Levana</em> time or the end? If it is start roll it to the next <em>tzais</em>,\n   *            and if it is the end, return the end of the previous night (<em>alos</em> passed in). Ignored if either\n   *            <em>alos</em> or <em>tzais</em> are null.\n   * @return the <em>molad</em> based time. If the <em>zman</em> does not occur during the current date, <code>null</code> will be\n   *         returned.\n   */\n  private getMoladBasedTime(moladBasedTime: DateTime, alos: DateTime | null, tzais: DateTime | null, techila: boolean): DateTime | null {\n    const lastMidnight: DateTime = this.getMidnightLastNight();\n    const midnightTonight: DateTime = this.getMidnightTonight();\n\n    if (!((moladBasedTime < lastMidnight) || (moladBasedTime > midnightTonight))) {\n      if (alos !== null || tzais !== null) {\n        return techila && !(moladBasedTime < tzais! || moladBasedTime > alos!)\n            ? tzais\n            : alos;\n      }\n      return moladBasedTime;\n    }\n    return null;\n  }\n\n  /**\n   * Returns the latest time of Kiddush Levana according to the <a\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> opinion that it is calculated as\n   * halfway between <em>molad</em> and <em>molad</em>. This adds half the 29 days, 12 hours and 793 chalakim time between\n   * <em>molad</em> and <em>molad</em> (14 days, 18 hours, 22 minutes and 666 milliseconds) to the month's <em>molad</em>.\n   * The <em>sof zman Kiddush Levana</em> will be returned even if it occurs during the day. To limit the time to between\n   * <em>tzais</em> and <em>alos</em>, see {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date)}.\n   *\n   * @param alos\n   *            the beginning of the Jewish day. If <em>Kidush Levana</em> occurs during the day (starting at <em>alos</em> and\n   *            ending at <em>tzais</em>), the time returned will be alos. If either the <em>alos</em> or <em>tzais</em> parameters\n   *            are null, no daytime adjustment will be made.\n   * @param tzais\n   *            the end of the Jewish day. If Kidush Levana occurs during the day (starting at alos and ending at\n   *            tzais), the time returned will be alos. If either the alos or tzais parameters are null, no daytime\n   *            adjustment will be made.\n   * @return the Date representing the moment halfway between molad and molad. If the time occurs between\n   *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned. If the <em>zman</em> will not occur on this\n   *         day, a <code>null</code> will be returned.\n   * @see #getSofZmanKidushLevanaBetweenMoldos(Date, Date)\n   * @see #getSofZmanKidushLevana15Days()\n   * @see JewishCalendar#getSofZmanKidushLevanaBetweenMoldos()\n   */\n  public getSofZmanKidushLevanaBetweenMoldos(alos: DateTime | null = null, tzais: DateTime | null = null): DateTime | null {\n    const jewishCalendar: JewishCalendar = new JewishCalendar(this.getDate());\n\n    // Do not calculate for impossible dates, but account for extreme cases. In the extreme case of Rapa Iti in French\n    // Polynesia on Dec 2027 when kiddush Levana 3 days can be said on <em>Rosh Chodesh</em>, the sof zman Kiddush Levana\n    // will be on the 12th of the Teves. In the case of Anadyr, Russia on Jan, 2071, sof zman Kiddush Levana between the\n    // moldos will occur is on the night of 17th of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n    if (jewishCalendar.getJewishDayOfMonth() < 11 || jewishCalendar.getJewishDayOfMonth() > 16) {\n      return null;\n    }\n    return this.getMoladBasedTime(jewishCalendar.getSofZmanKidushLevanaBetweenMoldos(), alos, tzais, false);\n  }\n\n  /**\n   * Returns the latest time of Kiddush Levana according to the <a\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> opinion that it is calculated as\n   * halfway between molad and molad. This adds half the 29 days, 12 hours and 793 chalakim time between\n   * <em>molad</em> and <em>molad</em> (14 days, 18 hours, 22 minutes and 666 milliseconds) to the month's molad. If\n   * the time of <em>sof zman Kiddush Levana</em> occurs during the day (between\n   * <em>{@link ZmanimCalendar#getAlos72() Alos}</em> and <em>{@link ZmanimCalendar#getTzais72() tzais}</em>) it\n   * return the <em>alos</em> prior to the calculated <em>sof zman Kiddush Levana</em>. This method is available in\n   * the 1.3 release of the API but may change or be removed in the future since it depends on the still changing\n   * {@link JewishCalendar} and related classes.\n   *\n   * @return the Date representing the moment halfway between molad and molad. If the time occurs between\n   *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned\n   * @see #getSofZmanKidushLevanaBetweenMoldos(Date, Date)\n   * @see #getSofZmanKidushLevana15Days()\n   * @see JewishCalendar#getSofZmanKidushLevanaBetweenMoldos()\n   */\n\n  /*\n    public getSofZmanKidushLevanaBetweenMoldos(): Date {\n        return this.getSofZmanKidushLevanaBetweenMoldos(this.getAlos72(), this.getTzais72());\n    }\n*/\n\n  /**\n   * Returns the latest time of <em>Kiddush Levana</em> calculated as 15 days after the molad. This is the opinion of\n   * the Shulchan Aruch (Orach Chaim 426). It should be noted that some opinions hold that the\n   * <a href=\"https://en.wikipedia.org/wiki/Moses_Isserles\">Rema</a> who brings down the opinion of the <a\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> of calculating\n   * {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date) half way between <em>molad</em> and <em>molad</em>} is of\n   * the opinion that the Mechaber agrees to his opinion. Also see the Aruch Hashulchan. For additional details on the subject,\n   * See Rabbi Dovid Heber's very detailed write-up in Siman Daled (chapter 4) of <a href=\"https://hebrewbooks.org/53000\">Shaarei\n   * Zmanim</a>. The <em>sof zman Kiddush Levana</em> will be returned even if it occurs during the day. To limit the time to\n   * between <em>tzais</em> and <em>alos</em>, see {@link #getSofZmanKidushLevana15Days(Date, Date)}.\n   *\n   * @return the Date representing the moment 15 days after the <em>molad</em>. If the time occurs between\n   *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned. If the <em>zman</em> will not occur on this day, a\n   *         <code>null</code> will be returned.\n   *\n   * @see #getSofZmanKidushLevana15Days(Date, Date)\n   * @see #getSofZmanKidushLevanaBetweenMoldos()\n   * @see JewishCalendar#getSofZmanKidushLevana15Days()\n   *\n   */\n  public getSofZmanKidushLevana15Days(alos: DateTime | null = null, tzais: DateTime | null = null): DateTime | null {\n    const jewishCalendar: JewishCalendar = new JewishCalendar(this.getDate());\n\n    // Do not calculate for impossible dates, but account for extreme cases. In the extreme case of Rapa Iti in\n    // French Polynesia on Dec 2027 when kiddush Levana 3 days can be said on <em>Rosh Chodesh</em>, the sof zman Kiddush\n    // Levana will be on the 12th of the Teves. in the case of Anadyr, Russia on Jan, 2071, sof zman kiddush levana will\n    // occur after midnight on the 17th of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n    if (jewishCalendar.getJewishDayOfMonth() < 11 || jewishCalendar.getJewishDayOfMonth() > 17) {\n      return null;\n    }\n    return this.getMoladBasedTime(jewishCalendar.getSofZmanKidushLevana15Days(), alos, tzais, false);\n  }\n\n  /**\n   * Returns the latest time of <em>Kiddush Levana</em> calculated as 15 days after the molad. This is the opinion of\n   * the Shulchan Aruch (Orach Chaim 426). It should be noted that some opinions hold that the\n   * <a href=\"https://en.wikipedia.org/wiki/Moses_Isserles\">Rema</a> who brings down the opinion of the <a\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> of calculating\n   * {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date) half way between <em>molad</em> and <em>molad</em>} is of\n   * the opinion that the Mechaber agrees to his opinion. Also see the Aruch Hashulchan. For additional details on the subject,\n   * See Rabbi Dovid Heber's very detailed write-up in Siman Daled (chapter 4) of <a href=\"https://www.hebrewbooks.org/53000\">Shaarei\n   * Zmanim</a>. The <em>sof zman Kiddush Levana</em> will be returned even if it occurs during the day. To limit the time to\n   * between <em>tzais</em> and <em>alos</em>, see {@link #getSofZmanKidushLevana15Days(Date, Date)}.\n   *\n   * @return the Date representing the moment 15 days after the <em>molad</em>. If the time occurs between\n   *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned\n   *\n   * @see #getSofZmanKidushLevana15Days(Date, Date)\n   * @see #getSofZmanKidushLevanaBetweenMoldos()\n   * @see JewishCalendar#getSofZmanKidushLevana15Days()\n   */\n\n  /*\n    public getSofZmanKidushLevana15Days(): Date {\n        return this.getSofZmanKidushLevana15Days(this.getAlos72(), this.getTzais72());\n    }\n*/\n\n  /**\n   * Returns the earliest time of <em>Kiddush Levana</em> according to <a href=\n   * \"https://en.wikipedia.org/wiki/Yonah_Gerondi\">Rabbeinu Yonah</a>'s opinion that it can be said 3 days after the <em>molad</em>.\n   * If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between <em>alos</em> and <em>tzais</em> passed to\n   * this method) it will return the following <em>tzais</em>. If null is passed for either <em>alos</em> or <em>tzais</em>, the actual\n   * <em>tchilas zman Kiddush Levana</em> will be returned, regardless of if it is during the day or not.\n   *\n   * @param alos\n   *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at <em>alos</em> and ending\n   *            at <em>tzais</em>), the time returned will be <em>tzais</em>. If either the <em>alos</em> or <em>tzais</em> parameters\n   *            are null, no daytime adjustment will be made.\n   * @param tzais\n   *            the end of the Jewish day. If <em>Kidush Levana</em> occurs during the day (starting at <em>alos</em> and ending at\n   *            <em>tzais</em>), the time returned will be <em>tzais</em>. If either the <em>alos</em> or <em>tzais</em> parameters\n   *            are null, no daytime adjustment will be made.\n   *\n   * @return the Date representing the moment 3 days after the molad. If the time occurs between <em>alos</em> and\n   *         <em>tzais</em>, <em>tzais</em> will be returned. If the <em>zman</em> will not occur on this day, a\n   *         <code>null</code> will be returned.\n   * @see #getTchilasZmanKidushLevana3Days()\n   * @see #getTchilasZmanKidushLevana7Days(Date, Date)\n   * @see JewishCalendar#getTchilasZmanKidushLevana3Days()\n   */\n  public getTchilasZmanKidushLevana3Days(alos: DateTime | null = null, tzais: DateTime | null = null): DateTime | null {\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day);\n\n    // Do not calculate for impossible dates, but account for extreme cases. Tchilas zman kiddush Levana 3 days for\n    // the extreme case of Rapa Iti in French Polynesia on Dec 2027 when kiddush Levana 3 days can be said on the evening\n    // of the 30th, the second night of Rosh Chodesh. The 3rd day after the <em>molad</em> will be on the 4th of the month.\n    // In the case of Anadyr, Russia on Jan, 2071, when sof zman kiddush levana is on the 17th of the month, the 3rd day\n    // from the molad will be on the 5th day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n    if (jewishCalendar.getJewishDayOfMonth() > 5 && jewishCalendar.getJewishDayOfMonth() < 30) {\n      return null;\n    }\n\n    let zman: DateTime | null = this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana3Days(), alos, tzais, true);\n\n    // Get the following month's zman kiddush Levana for the extreme case of Rapa Iti in French Polynesia on Dec 2027 when\n    // kiddush Levana can be said on Rosh Chodesh (the evening of the 30th). See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (page 32)\n    if (zman === null && jewishCalendar.getJewishDayOfMonth() === 30) {\n      jewishCalendar.forward(Calendar.MONTH, 1);\n      zman = this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana3Days(), null, null, true);\n    }\n\n    return zman;\n  }\n\n  /**\n   * Returns the earliest time of <em>Kiddush Levana</em> according to <a href=\n   * \"https://en.wikipedia.org/wiki/Yonah_Gerondi\">Rabbeinu Yonah</a>'s opinion that it can be said 3 days after the <em>molad</em>.\n   * If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between <em>alos</em> and <em>tzais</em> passed to\n   * this method) it will return the following <em>tzais</em>. If null is passed for either <em>alos</em> or <em>tzais</em>, the actual\n   * <em>tchilas zman Kiddush Levana</em> will be returned, regardless of if it is during the day or not.\n   *\n   * @param alos\n   *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at <em>alos</em> and ending\n   *            at <em>tzais</em>), the time returned will be <em>tzais</em>. If either the <em>alos</em> or <em>tzais</em> parameters\n   *            are null, no daytime adjustment will be made.\n   * @param tzais\n   *            the end of the Jewish day. If <em>Kidush Levana</em> occurs during the day (starting at <em>alos</em> and ending at\n   *            <em>tzais</em>), the time returned will be tzais. If either the <em>alos</em> or <em>tzais</em> parameters are null, no\n   *            daytime adjustment will be made.\n   *\n   * @return the Date representing the moment 3 days after the molad. If the time occurs between <em>alos</em> and\n   *         <em>tzais</em>, <em>tzais</em> will be returned\n   * @see #getTchilasZmanKidushLevana3Days(Date, Date)\n   * @see #getTchilasZmanKidushLevana7Days()\n   * @see JewishCalendar#getTchilasZmanKidushLevana3Days()\n   */\n\n  /*\n    public getTchilasZmanKidushLevana3Days(): Date {\n        return this.getTchilasZmanKidushLevana3Days(this.getAlos72(), this.getTzais72());\n    }\n*/\n\n  /**\n   * Returns the point in time of <em>Molad</em> as a <code>Date</code> Object. For the traditional day of week, hour,\n   * minute and chalakim, {@link JewishCalendar#getMoladAsDate()} and the not yet completed\n   * {@link HebrewDateFormatter} that will have formatting for this.\n   *\n   * @return the Date representing the moment of the molad. If the <em>molad</em> does not occur on this day, a\n   *         <code>null</code> will be returned.\n   *\n   * @see #getTchilasZmanKidushLevana3Days()\n   * @see #getTchilasZmanKidushLevana7Days(Date, Date)\n   * @see JewishCalendar#getMoladAsDate()\n   */\n  public getZmanMolad(): DateTime | null {\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day);\n\n    // Optimize to not calculate for impossible dates, but account for extreme cases. The molad in the extreme case of Rapa\n    // Iti in French Polynesia on Dec 2027 occurs on the night of the 27th of Kislev. In the case of Anadyr, Russia on\n    // Jan 2071, the molad will be on the 2nd day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n    if (jewishCalendar.getJewishDayOfMonth() > 2 && jewishCalendar.getJewishDayOfMonth() < 27) {\n      return null;\n    }\n\n    let molad: DateTime | null = this.getMoladBasedTime(jewishCalendar.getMoladAsDate(), null, null, true);\n\n    // deal with molad that happens on the end of the previous month\n    if (molad === null && jewishCalendar.getJewishDayOfMonth() > 26) {\n      jewishCalendar.forward(Calendar.MONTH, 1);\n      molad = this.getMoladBasedTime(jewishCalendar.getMoladAsDate(), null, null, true);\n    }\n    return molad;\n  }\n\n  /**\n   * Used by Molad based <em>zmanim</em> to determine if <em>zmanim</em> occur during the current day.\n   * @see #getMoladBasedTime(Date, Date, Date, boolean)\n   * @return previous midnight\n   */\n  private getMidnightLastNight(): DateTime {\n    // reset hour, minutes, seconds and millis\n    return this.getDate().set({\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0,\n    });\n  }\n\n  /**\n   * Used by Molad based <em>zmanim</em> to determine if <em>zmanim</em> occur during the current day.\n   * @see #getMoladBasedTime(Date, Date, Date, boolean)\n   * @return following midnight\n   */\n  private getMidnightTonight(): DateTime {\n    return this.getDate()\n        .plus({ days: 1 })\n        .set({\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0,\n        });\n  }\n\n  /**\n   * Returns the earliest time of <em>Kiddush Levana</em> according to the opinions that it should not be said until 7\n   * days after the <em>molad</em>. The time will be returned even if it occurs during the day when <em>Kiddush Levana</em>\n   * can't be recited. Use {@link #getTchilasZmanKidushLevana7Days(Date, Date)} if you want to limit the time to night hours.\n   *\n   * @return the Date representing the moment 7 days after the molad regardless of it is day or night. If the <em>zman</em>\n   *         will not occur on this day, a <code>null</code> will be returned.\n   * @see #getTchilasZmanKidushLevana7Days(Date, Date)\n   * @see JewishCalendar#getTchilasZmanKidushLevana7Days()\n   * @see #getTchilasZmanKidushLevana3Days()\n   */\n  public getTchilasZmanKidushLevana7Days(alos: DateTime | null = null, tzais: DateTime | null = null): DateTime | null {\n    const jewishCalendar: JewishCalendar = new JewishCalendar(this.getDate());\n\n    // Optimize to not calculate for impossible dates, but account for extreme cases. Tchilas zman kiddush Levana 7 days for\n    // the extreme case of Rapa Iti in French Polynesia on Jan 2028 (when kiddush Levana 3 days can be said on the evening\n    // of the 30th, the second night of Rosh Chodesh), the 7th day after the molad will be on the 4th of the month.\n    // In the case of Anadyr, Russia on Jan, 2071, when sof zman kiddush levana is on the 17th of the month, the 7th day\n    // from the molad will be on the 9th day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\n    if (jewishCalendar.getJewishDayOfMonth() < 4 || jewishCalendar.getJewishDayOfMonth() > 9) {\n      return null;\n    }\n\n    return this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana7Days(), alos, tzais, true);\n  }\n\n  /**\n   * Returns the earliest time of <em>Kiddush Levana</em> according to the opinions that it should not be said until 7\n   * days after the <em>molad</em>. The time will be returned even if it occurs during the day when <em>Kiddush Levana</em>\n   * can't be recited. Use {@link #getTchilasZmanKidushLevana7Days(Date, Date)} if you want to limit the time to night hours.\n   *\n   * @return the Date representing the moment 7 days after the molad. If the time occurs between <em>alos</em> and\n   *         <em>tzais</em>, <em>tzais</em> will be returned\n   * @see #getTchilasZmanKidushLevana7Days(Date, Date)\n   * @see #getTchilasZmanKidushLevana3Days()\n   * @see JewishCalendar#getTchilasZmanKidushLevana7Days()\n   */\n\n  /*\n    public getTchilasZmanKidushLevana7Days(): Date {\n        return this.getTchilasZmanKidushLevana7Days(this.getAlos72(), this.getTzais72());\n    }\n*/\n\n  /**\n   * This method returns the latest time one is allowed eating <em>chametz</em> on <em>Erev Pesach</em> according to\n   * the opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. This time is identical to the {@link\n   * #getSofZmanTfilaGRA() <em>Sof zman tfilah</em> GRA} and is provided as a convenience method for those who are\n   * unaware how this <em>zman</em> is calculated. This time is 4 hours into the day based on the opinion of the\n   * <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day is calculated from sunrise to sunset.\n   * This returns the time 4 * {@link #getShaahZmanisGra()} after {@link #getSeaLevelSunrise() sea level sunrise}. If it\n   * is not <em>erev Pesach</em>, a null will be returned.\n   *\n   * @see ZmanimCalendar#getShaahZmanisGra()\n   * @see ZmanimCalendar#getSofZmanTfilaGRA()\n   * @return the <code>Date</code> one is allowed eating <em>chametz</em> on <em>Erev Pesach</em>. If it is not <em>erev\n   *         Pesach</em> or the calculation can't be computed such as in the Arctic Circle where there is at least one\n   *         day a year where the sun does not rise, and one where it does not set, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @todo enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   */\n  public getSofZmanAchilasChametzGRA(): DateTime | null {\n/*\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    const now: DateTime = DateTime.local();\n    jewishCalendar.setGregorianDate(now.year, now.month, now.day);\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return this.getSofZmanTfilaGRA();\n    }\n    return null;\n*/\n\n    return this.getSofZmanTfilaGRA();\n  }\n\n  /**\n   * This method returns the latest time one is allowed eating <em>chametz</em> on <em>Erev Pesach</em> according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em>\n   * being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}. This time is identical to the\n   * {@link #getSofZmanTfilaMGA72Minutes() <em>Sof zman tfilah</em> MGA 72 minutes}. This time is 4 {@link #getShaahZmanisMGA()\n   * <em>shaos zmaniyos</em>} (temporal hours) after {@link #getAlos72() dawn} based on the opinion of the MGA that the day is\n   * calculated from a {@link #getAlos72() dawn} of 72 minutes before sunrise to {@link #getTzais72() nightfall} of 72 minutes\n   * after sunset. This returns the time of 4 * {@link #getShaahZmanisMGA()} after {@link #getAlos72() dawn}. If it is not\n   * <em>erev Pesach</em>, a null will be returned.\n   *\n   * @return the <code>Date</code> of the latest time of eating <em>chametz</em>. If it is not <em>erev Pesach</em> or the\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\n   *         not rise, and one where it does not set, a <code>null</code> will be returned. See detailed explanation on top of\n   *         the {@link AstronomicalCalendar} documentation.\n   * @todo enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   * @see #getShaahZmanisMGA()\n   * @see #getAlos72()\n   * @see #getSofZmanTfilaMGA72Minutes()\n   */\n  public getSofZmanAchilasChametzMGA72Minutes(): DateTime | null {\n/*\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    const now: DateTime = DateTime.local();\n    jewishCalendar.setGregorianDate(now.year, now.month, now.day);\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return this.getSofZmanTfilaMGA72Minutes();\n    }\n    return null;\n*/\n\n    return this.getSofZmanTfilaMGA72Minutes();\n  }\n\n  /**\n   * This method returns the latest time one is allowed eating <em>chametz</em> on <em>Erev Pesach</em> according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em>\n   * being {@link #getAlos72Zmanis() 72 zmaniyos} minutes before {@link #getSunrise() sunrise}. This time is identical to the\n   * {@link #getSofZmanTfilaMGA72MinutesZmanis() <em>Sof zman tfilah</em> MGA 72 minutes zmanis}. This time is 4 {@link #getShaahZmanis72MinutesZmanis()\n   * <em>shaos zmaniyos</em>} (temporal hours) after {@link #getAlos72() dawn} based on the opinion of the MGA that the day is\n   * calculated from a {@link #getAlos72Zmanis() dawn} of 72 minutes zmanis before sunrise to {@link #getTzais72Zmanis() nightfall} of 72 minutes zmanis\n   * after sunset. This returns the time of 4 * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}. If it is not\n   * <em>erev Pesach</em>, a null will be returned.\n   *\n   * @return the <code>Date</code> of the latest time of eating <em>chametz</em>. If it is not <em>erev Pesach</em> or the\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\n   *         not rise, and one where it does not set, a <code>null</code> will be returned. See detailed explanation on top of\n   *         the {@link AstronomicalCalendar} documentation.\n   * @todo in v 3.0.0 enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   * @see #getShaahZmanis72MinutesZmanis()\n   * @see #getAlos72Zmanis()\n   * @see #getSofZmanTfilaMGA72MinutesZmanis()\n   */\n  public getSofZmanAchilasChametzMGA72MinutesZmanis(): DateTime | null {\n    const jewishCalendar = new JewishCalendar();\n    jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day);\n\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return this.getSofZmanTfilaMGA72MinutesZmanis();\n    }\n\n    return null;\n  }\n\n  /**\n   * This method returns the latest time one is allowed eating <em>chametz</em> on <em>Erev Pesach</em> according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em>\n   * being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time is 4 {@link\n   * #getShaahZmanis16Point1Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos16Point1Degrees() dawn}\n   * based on the opinion of the MGA that the day is calculated from dawn to nightfall with both being 16.1&deg;\n   * below sunrise or sunset. This returns the time of 4 {@link #getShaahZmanis16Point1Degrees()} after\n   * {@link #getAlos16Point1Degrees() dawn}.  If it is not <em>erev Pesach</em>, a null will be returned.\n   *\n   * @return the <code>Date</code> of the latest time of eating <em>chametz</em>. If it is not <em>erev Pesach</em> or the\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and north\n   *         of the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\n   *         <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @todo enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   * @see #getShaahZmanis16Point1Degrees()\n   * @see #getAlos16Point1Degrees()\n   * @see #getSofZmanTfilaMGA16Point1Degrees()\n   */\n  public getSofZmanAchilasChametzMGA16Point1Degrees(): DateTime | null {\n/*\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    const now: DateTime = DateTime.local();\n    jewishCalendar.setGregorianDate(now.year, now.month, now.day);\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return this.getSofZmanTfilaMGA16Point1Degrees();\n    }\n    return null;\n*/\n\n    return this.getSofZmanTfilaMGA16Point1Degrees();\n  }\n\n  /**\n   * FIXME adjust for synchronous\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion\n   * of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. This time is 5 hours into the day based on the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day is calculated from\n   * sunrise to sunset. This returns the time 5 * {@link #getShaahZmanisGra()} after {@link #getSeaLevelSunrise() sea\n   * level sunrise}. If it is not  <em>erev Pesach</em>, a null will be returned.\n   * @todo enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   * @see ZmanimCalendar#getShaahZmanisGra()\n   * @return the <code>Date</code> of the latest time for burning <em>chametz</em> on <em>Erev Pesach</em>. If it is not\n   *         <em>erev Pesach</em> or the calculation can't be computed such as in the Arctic Circle where there is at least\n   *         one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanBiurChametzGRA(): DateTime | null {\n/*\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    const now: DateTime = DateTime.local();\n    jewishCalendar.setGregorianDate(now.year, now.month, now.day);\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), this.getShaahZmanisGra() * 5);\n    }\n    return null;\n*/\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunrise(), this.getShaahZmanisGra() * 5);\n  }\n\n  /**\n   * FIXME adjust for synchronous\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion of\n   * the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em>\n   * being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}. This time is 5 {@link\n   * #getShaahZmanisMGA() <em>shaos zmaniyos</em>} (temporal hours) after {@link #getAlos72() dawn} based on the opinion of\n   * the MGA that the day is calculated from a {@link #getAlos72() dawn} of 72 minutes before sunrise to {@link\n   * #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 5 * {@link #getShaahZmanisMGA()} after\n   * {@link #getAlos72() dawn}. If it is not  <em>erev Pesach</em>, a null will be returned.\n   * @todo enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   * @return the <code>Date</code> of the latest time for burning <em>chametz</em> on <em>Erev Pesach</em>. If it is not\n   *         <em>erev Pesach</em> or the calculation can't be computed such as in the Arctic Circle where there is at\n   *         least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanisMGA()\n   * @see #getAlos72()\n   */\n  public getSofZmanBiurChametzMGA72Minutes(): DateTime | null {\n/*\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    const now: DateTime = DateTime.local();\n    jewishCalendar.setGregorianDate(now.year, now.month, now.day);\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return ComplexZmanimCalendar.getTimeOffset(this.getAlos72(), this.getShaahZmanisMGA() * 5);\n    }\n    return null;\n*/\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getAlos72(), this.getShaahZmanisMGA() * 5);\n  }\n\n  /**\n   * FIXME adjust for synchronous\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion of\n   * the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em>\n   * being {@link #getAlos72Zmanis() 72} minutes zmanis before {@link #getSunrise() sunrise}. This time is 5 {@link\n   * #getShaahZmanis72MinutesZmanis() <em>shaos zmaniyos</em>} (temporal hours) after {@link #getAlos72Zmanis() dawn} based on the opinion of\n   * the MGA that the day is calculated from a {@link #getAlos72Zmanis() dawn} of 72 minutes zmanis before sunrise to {@link\n   * #getTzais72Zmanis() nightfall} of 72 minutes zmanis after sunset. This returns the time of 5 * {@link #getShaahZmanis72MinutesZmanis()} after\n   * {@link #getAlos72Zmanis() dawn}. If it is not  <em>erev Pesach</em>, a null will be returned.\n   * @todo in v 3.0.0 enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   * @return the <code>Date</code> of the latest time for burning <em>chametz</em> on <em>Erev Pesach</em>. If it is not\n   *         <em>erev Pesach</em> or the calculation can't be computed such as in the Arctic Circle where there is at\n   *         least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getShaahZmanis72MinutesZmanis()\n   * @see #getAlos72Zmanis()\n   */\n  public getSofZmanBiurChametzMGA72MinutesZmanis(): DateTime | null {\n    const jewishCalendar = new JewishCalendar();\n    jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day);\n\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return ComplexZmanimCalendar.getTimeOffset(this.getAlos72Zmanis(), this.getShaahZmanis72MinutesZmanis() * 5);\n    }\n\n    return null;\n  }\n\n  /**\n   * FIXME adjust for synchronous\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> based on <em>alos</em>\n   * being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time is 5\n   * {@link #getShaahZmanis16Point1Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos16Point1Degrees()\n   * dawn} based on the opinion of the MGA that the day is calculated from dawn to nightfall with both being 16.1&deg;\n   * below sunrise or sunset. This returns the time of 5 {@link #getShaahZmanis16Point1Degrees()} after\n   * {@link #getAlos16Point1Degrees() dawn}. If it is not  <em>erev Pesach</em>, a null will be returned.\n   * @todo enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   * @return the <code>Date</code> of the latest time for burning <em>chametz</em> on <em>Erev Pesach</em>. If it is not\n   *         <em>erev Pesach</em> or the calculation can't be computed such as northern and southern locations even south\n   *         of the Arctic Circle and north of the Antarctic Circle where the sun may not reach low enough below the\n   *         horizon for this calculation, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getShaahZmanis16Point1Degrees()\n   * @see #getAlos16Point1Degrees()\n   */\n  public getSofZmanBiurChametzMGA16Point1Degrees(): DateTime | null {\n/*\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    const now: DateTime = DateTime.local();\n    jewishCalendar.setGregorianDate(now.year, now.month, now.day);\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return ComplexZmanimCalendar.getTimeOffset(this.getAlos16Point1Degrees(), this.getShaahZmanis16Point1Degrees() * 5);\n    }\n    return null;\n*/\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getAlos16Point1Degrees(), this.getShaahZmanis16Point1Degrees() * 5);\n  }\n\n  /**\n   * A method that returns the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s\n   * <em>netz amiti</em> (sunrise) without {@link AstronomicalCalculator#getElevationAdjustment(double)\n   * elevation adjustment}. This forms the base for the Baal Hatanya's dawn-based calculations that are\n   * calculated as a dip below the horizon before sunrise.\n   *\n   * According to the Baal Hatanya, <em>netz amiti</em>, or true (halachic) sunrise, is when the top of the sun's\n   * disk is visible at an elevation similar to the mountains of Eretz Yisrael. The time is calculated as the point at which\n   * the center of the sun's disk is 1.583&deg; below the horizon. This degree-based calculation can be found in Rabbi Shalom\n   * DovBer Levine's commentary on The <a href=\"https://www.chabadlibrary.org/books/pdf/Seder-Hachnosas-Shabbos.pdf\">Baal\n   * Hatanya's Seder Hachnasas Shabbos</a>. From an elevation of 546 meters, the top of <a href=\n   * \"https://en.wikipedia.org/wiki/Mount_Carmel\">Har Hacarmel</a>, the sun disappears when it is 1&deg; 35' or 1.583&deg;\n   * below the sea level horizon. This in turn is based on the Gemara <a href=\n   * \"https://hebrewbooks.org/shas.aspx?mesechta=2&daf=35\">Shabbos 35a</a>. There are other opinions brought down by\n   * Rabbi Levine, including Rabbi Yosef Yitzchok Feigelstock who calculates it as the degrees below the horizon 4 minutes after\n   * sunset in Yerushalayim (on the equinox). That is brought down as 1.583&deg;. This is identical to the 1&deg; 35' <em>zman</em>\n   * and is probably a typo and should be 1.683&deg;. These calculations are used by most <a href=\n   * \"https://en.wikipedia.org/wiki/Chabad\">Chabad</a> calendars that use the Baal Hatanya's <em>zmanim</em>. See\n   * <a href=\"https://www.chabad.org/library/article_cdo/aid/3209349/jewish/About-Our-Zmanim-Calculations.htm\">About Our\n   * <em>Zmanim</em> Calculations @ Chabad.org</a>.\n   *\n   * Note: <em>netz amiti</em> is used only for calculating certain <em>zmanim</em>, and is intentionally unpublished. For\n   * practical purposes, daytime <em>mitzvos</em> like <em>shofar</em> and <em>lulav</em> should not be done until after the\n   * published time for <em>netz</em> / sunrise.\n   *\n   * @return the <code>Date</code> representing the exact sea level <em>netz amiti</em> (sunrise) time. If the calculation can't be\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\n   *         where it does not set, a <code>null</code> will be returned. See detailed explanation on top of the page.\n   *\n   * @see #getSunrise()\n   * @see #getSeaLevelSunrise()\n   * @see #getSunsetBaalHatanya()\n   * @see #ZENITH_1_POINT_583\n   */\n  private getSunriseBaalHatanya(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_1_POINT_583);\n  }\n\n  /**\n   * A method that returns the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s\n   * <em>shkiah amiti</em> (sunset) without {@link AstronomicalCalculator#getElevationAdjustment(double)\n   * elevation adjustment}. This forms the base for the Baal Hatanya's dusk-based calculations that are calculated\n   * as a dip below the horizon after sunset.\n   *\n   * According to the Baal Hatanya, <em>shkiah amiti</em>, true (<em>halachic</em>) sunset, is when the top of the\n   * sun's disk disappears from view at an elevation similar to the mountains of <em>Eretz Yisrael</em>.\n   * This time is calculated as the point at which the center of the sun's disk is 1.583 degrees below the horizon.\n   *\n   * Note: <em>shkiah amiti</em> is used only for calculating certain <em>zmanim</em>, and is intentionally unpublished. For\n   * practical purposes, all daytime mitzvos should be completed before the published time for <em>shkiah</em> / sunset.\n   *\n   * For further explanation of the calculations used for the Baal Hatanya's <em>zmanim</em> in this library, see\n   * <a href=\"https://www.chabad.org/library/article_cdo/aid/3209349/jewish/About-Our-Zmanim-Calculations.htm\">About Our\n   * <em>Zmanim</em> Calculations @ Chabad.org</a>.\n   *\n   * @return the <code>Date</code> representing the exact sea level <em>shkiah amiti</em> (sunset) time. If the calculation\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\n   *         rise, and one where it does not set, a <code>null</code> will be returned. See detailed explanation on top of\n   *         the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getSunset()\n   * @see #getSeaLevelSunset()\n   * @see #getSunriseBaalHatanya()\n   * @see #ZENITH_1_POINT_583\n   */\n  private getSunsetBaalHatanya(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_1_POINT_583);\n  }\n\n  /**\n   * A method that returns the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s\n   * a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}). This forms the base for the\n   * Baal Hatanya's  day  based calculations that are calculated as a 1.583&deg; dip below the horizon after sunset.\n   * According to the Baal Hatanya, <em>shkiah amiti</em>, true (halachic) sunset, is when the top of the\n   * sun's disk disappears from view at an elevation similar to the mountains of Eretz Yisrael.\n   * This time is calculated as the point at which the center of the sun's disk is 1.583 degrees below the horizon.\n   * A method that returns a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}) calculated\n   * based on the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s <em>netz\n   * amiti</em> and <em>shkiah amiti</em> using a dip of 1.583&deg; below the sea level horizon. This calculation divides\n   * the day based on the opinion of the Baal Hatanya that the day runs from {@link #getSunriseBaalHatanya() netz amiti}\n   * to {@link #getSunsetBaalHatanya() <em>shkiah amiti</em>}. The calculations are based on a day from {@link\n   * #getSunriseBaalHatanya() sea level <em>netz amiti</em>} to {@link #getSunsetBaalHatanya() sea level <em>shkiah amiti</em>}.\n   * The day is split into 12 equal parts with each one being a <em>shaah zmanis</em>. This method is similar to {@link\n   * #getTemporalHour}, but all calculations are based on a sea level sunrise and sunset.\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em> calculated from\n   *         {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)} to {@link #getSunsetBaalHatanya() <em>shkiah amiti</em>\n   *         (\"real\" sunset)}. If the calculation can't be computed such as in the Arctic Circle where there is at least one day a\n   *         year where the sun does not rise, and one where it does not set, {@link Long#MIN_VALUE} will be returned. See\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getTemporalHour(Date, Date)\n   * @see #getSunriseBaalHatanya()\n   * @see #getSunsetBaalHatanya()\n   * @see #ZENITH_1_POINT_583\n   */\n  public getShaahZmanisBaalHatanya(): number {\n    return this.getTemporalHour(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\n  }\n\n  /**\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s <em>alos</em>\n   * (dawn) calculated as the time when the sun is 16.9&deg; below the eastern {@link #GEOMETRIC_ZENITH geometric horizon}\n   * before {@link #getSunrise() sunrise}. For more information the source of 16.9&deg; see {@link #ZENITH_16_POINT_9}.\n   *\n   * @see #ZENITH_16_POINT_9\n   * @return The <code>Date</code> of dawn. If the calculation can't be computed such as northern and southern\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\n   *         low enough below the horizon for this calculation, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getAlosBaalHatanya(): DateTime | null {\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_9);\n  }\n\n  /**\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning). This time is 3\n   * {@link #getShaahZmanisBaalHatanya() <em>shaos zmaniyos</em>} (solar hours) after {@link #getSunriseBaalHatanya()\n   * <em>netz amiti</em> (sunrise)} based on the opinion of the Baal Hatanya that the day is calculated from\n   * sunrise to sunset. This returns the time 3 * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya()\n   * <em>netz amiti</em> (sunrise)}.\n   *\n   * @see ZmanimCalendar#getSofZmanShma(Date, Date)\n   * @see #getShaahZmanisBaalHatanya()\n   * @return the <code>Date</code> of the latest <em>zman shema</em> according to the Baal Hatanya. If the calculation\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\n   *         not rise, and one where it does not set, a <code>null</code> will be returned. See detailed explanation on\n   *         top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanShmaBaalHatanya(): DateTime | null {\n    return this.getSofZmanShma(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya(), true);\n  }\n\n  /**\n   * This method returns the latest <em>zman tfilah</em> (time to recite the morning prayers). This time is 4\n   * hours into the day based on the opinion of the Baal Hatanya that the day is\n   * calculated from sunrise to sunset. This returns the time 4 * {@link #getShaahZmanisBaalHatanya()} after\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\n   *\n   * @see ZmanimCalendar#getSofZmanTfila(Date, Date)\n   * @see #getShaahZmanisBaalHatanya()\n   * @return the <code>Date</code> of the latest <em>zman tfilah</em>. If the calculation can't be computed such as in\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\n   *         not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanTfilaBaalHatanya(): DateTime | null {\n    return this.getSofZmanTfila(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya(), true);\n  }\n\n  /**\n   * This method returns the latest time one is allowed eating <em>chametz</em> on <em>Erev Pesach</em> according to the\n   * opinion of the Baal Hatanya. This time is identical to the {@link #getSofZmanTfilaBaalHatanya() <em>Sof zman\n   * tfilah</em> Baal Hatanya}. This time is 4 hours into the day based on the opinion of the Baal Hatanya that the day\n   * is calculated from sunrise to sunset. This returns the time 4 {@link #getShaahZmanisBaalHatanya()} after\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\n   * @todo enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   * @see #getShaahZmanisBaalHatanya()\n   * @see #getSofZmanTfilaBaalHatanya()\n   * @return the <code>Date</code> one is allowed eating <em>chametz</em> on <em>Erev Pesach</em>. If it is not <em>erev\n   *         Pesach</em> or the  calculation can't be computed such as in the Arctic Circle where there is at least one\n   *         day a year where the sun does not rise, and one where it does not set, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanAchilasChametzBaalHatanya(): DateTime | null {\n  /*\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    const now: DateTime = DateTime.local();\n    jewishCalendar.setGregorianDate(now.year, now.month, now.day);\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return this.getSofZmanTfilaBaalHatanya();\n    }\n    return null;\n  */\n\n    return this.getSofZmanTfilaBaalHatanya();\n  }\n\n  /**\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion of\n   * the Baal Hatanya. This time is 5 hours into the day based on the opinion of the Baal Hatanya that the day is calculated\n   * from sunrise to sunset. This returns the time 5 * {@link #getShaahZmanisBaalHatanya()} after\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}. If it is not  <em>erev Pesach</em>, a null will be returned.\n   * @todo enable the calendar check for erev pesach and return <code>null</code> in all other cases.\n   * @see #getShaahZmanisBaalHatanya()\n   * @return the <code>Date</code> of the latest time for burning <em>chametz</em> on <em>Erev Pesach</em>.  If it is not\n   *         <em>erev Pesach</em> or the  calculation can't be computed such as in the Arctic Circle where there is at\n   *         least one day a year where the sun does not rise, and one where it does not set, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSofZmanBiurChametzBaalHatanya(): DateTime | null {\n/*\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\n    const now: DateTime = DateTime.local();\n    jewishCalendar.setGregorianDate(now.year, now.month, now.day);\n    if (jewishCalendar.getJewishMonth() === JewishCalendar.NISSAN && jewishCalendar.getJewishDayOfMonth() === 14) {\n      return ComplexZmanimCalendar.getTimeOffset(this.getSunriseBaalHatanya(), this.getShaahZmanisBaalHatanya() * 5);\n    }\n    return null;\n*/\n\n    return ComplexZmanimCalendar.getTimeOffset(this.getSunriseBaalHatanya(), this.getShaahZmanisBaalHatanya() * 5);\n  }\n\n  /**\n   * This method returns the time of <em>mincha gedola</em>. <em>Mincha gedola</em> is the earliest time one can pray\n   * <em>mincha</em>. The <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> is of the opinion that it is\n   * better to delay <em>mincha</em> until {@link #getMinchaKetanaBaalHatanya() <em>mincha ketana</em>} while the\n   * <a href=\"https://en.wikipedia.org/wiki/Asher_ben_Jehiel\">Ra\"sh</a>,\n   * <a href=\"https://en.wikipedia.org/wiki/Jacob_ben_Asher\">Tur</a>, <a href=\n   * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> and others are of the opinion that <em>mincha</em> can be prayed\n   * <em>lechatchila</em> starting at <em>mincha gedola</em>. This is calculated as 6.5 {@link #getShaahZmanisBaalHatanya()\n   * sea level solar hours} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}. This calculation is based\n   * on the opinion of the Baal Hatanya that the day is calculated from sunrise to sunset. This returns the time 6.5\n   * * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (\"real\" sunrise)}.\n   * @todo Consider adjusting this to calculate the time as 30 clock or <em>zmaniyos </em> minutes after either {@link\n   *         #getSunTransit() astronomical <em>chatzos</em>} or {@link #getChatzosAsHalfDay() <em>chatzos</em> as half a day}\n   *         for {@link AstronomicalCalculator calculators} that support it, based on {@link #isUseAstronomicalChatzos()}.\n   * @see #getMinchaGedola(Date, Date)\n   * @see #getShaahZmanisBaalHatanya()\n   * @see #getMinchaKetanaBaalHatanya()\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em> according to the Baal Hatanya. If the calculation\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\n   *         and one where it does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaGedolaBaalHatanya(): DateTime | null {\n    return this.getMinchaGedola(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya(), true);\n  }\n\n  /**\n   * FIXME synchronous\n   * This is a convenience method that returns the later of {@link #getMinchaGedolaBaalHatanya()} and\n   * {@link #getMinchaGedola30Minutes()}. In the winter when 1/2 of a {@link #getShaahZmanisBaalHatanya()\n   * <em>shaah zmanis</em>} is less than 30 minutes {@link #getMinchaGedola30Minutes()} will be returned, otherwise\n   * {@link #getMinchaGedolaBaalHatanya()} will be returned.\n   * @todo Consider adjusting this to calculate the time as 30 clock or <em>zmaniyos </em> minutes after either {@link\n   *         #getSunTransit() astronomical <em>chatzos</em>} or {@link #getChatzosAsHalfDay() <em>chatzos</em> as half a day}\n   *         for {@link AstronomicalCalculator calculators} that support it, based on {@link #isUseAstronomicalChatzos()}.\n   * @return the <code>Date</code> of the later of {@link #getMinchaGedolaBaalHatanya()} and {@link #getMinchaGedola30Minutes()}.\n   *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\n   *         where the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaGedolaBaalHatanyaGreaterThan30(): DateTime | null {\n    if (this.getMinchaGedola30Minutes() === null || this.getMinchaGedolaBaalHatanya() === null) {\n      return null;\n    }\n\n    return DateTime.max(this.getMinchaGedola30Minutes()!, this.getMinchaGedolaBaalHatanya()!);\n  }\n\n  /**\n   * This method returns the time of <em>mincha ketana</em>. This is the preferred earliest time to pray\n   * <em>mincha</em> in the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others.\n   * For more information on this see the documentation on {@link #getMinchaGedolaBaalHatanya() <em>mincha gedola</em>}.\n   * This is calculated as 9.5 {@link #getShaahZmanisBaalHatanya()  sea level solar hours} after {@link #getSunriseBaalHatanya()\n   * <em>netz amiti</em> (sunrise)}. This calculation is calculated based on the opinion of the Baal Hatanya that the\n   * day is calculated from sunrise to sunset. This returns the time 9.5 * {@link #getShaahZmanisBaalHatanya()} after {@link\n   * #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\n   *\n   * @see #getMinchaKetana(Date, Date)\n   * @see #getShaahZmanisBaalHatanya()\n   * @see #getMinchaGedolaBaalHatanya()\n   * @return the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getMinchaKetanaBaalHatanya(): DateTime | null {\n    return this.getMinchaKetana(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya(), true);\n  }\n\n  /**\n   * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after sunrise. This\n   * calculation is based on the opinion of the Baal Hatanya that the day is calculated\n   * from sunrise to sunset. This returns the time 10.75 * {@link #getShaahZmanisBaalHatanya()} after\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\n   *\n   * @see #getPlagHamincha(Date, Date)\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   */\n  public getPlagHaminchaBaalHatanya(): DateTime | null {\n    return this.getPlagHamincha(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya(), true);\n  }\n\n  /**\n   * A method that returns <em>tzais</em> (nightfall) when the sun is 6&deg; below the western geometric horizon\n   * (90&deg;) after {@link #getSunset() sunset}. For information on the source of this calculation see\n   * {@link #ZENITH_6_DEGREES}.\n   *\n   * @return The <code>Date</code> of nightfall. If the calculation can't be computed such as northern and southern\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\n   *         low enough below the horizon for this calculation, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #ZENITH_6_DEGREES\n   */\n  public getTzaisBaalHatanya(): DateTime | null {\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_6_DEGREES);\n  }\n\n  /**\n   * A utility method to calculate zmanim based on <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe\n   * Feinstein</a> as calculated in <a href=\"https://en.wikipedia.org/wiki/Mesivtha_Tifereth_Jerusalem\">MTJ</a>, <a href=\n   * \"https://en.wikipedia.org/wiki/Mesivtha_Tifereth_Jerusalem\">Yeshiva of Staten Island</a>, and Camp Yeshiva\n   * of Staten Island. The day is split in two, from <em>alos</em> / sunrise to fixed local <em>chatzos</em>, and the\n   * second half of the day, from fixed local <em>chatzos</em> to sunset / <em>tzais</em>. Morning based times are calculated\n   * based on the first 6 hours, and afternoon times based on the second half of the day.\n   * @deprecated This method will be replaced by the more generic {@link\n   *         ZmanimCalendar#getHalfDayBasedZman(Date, Date, double)} method.\n   *\n   * @param startOfHalfDay\n   *            The start of the half day. This would be <em>alos</em> or sunrise for morning based times and fixed\n   *            local <em>chatzos</em> for the second half of the day.\n   * @param endOfHalfDay\n   *            The end of the half day. This would be fixed local <em>chatzos</em> for morning based times and sunset\n   *            or <em>tzais</em> for afternoon based times.\n   * @param hours\n   *            the number of hours to offset the beginning of the first or second half of the day\n   *\n   * @return the <code>Date</code> of the <em>zman</em> based on calculation of the first or second half of the day. If\n   *         the calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\n   *         the sun does not rise, and one where it does not set, a <code>null</code> will be returned. See detailed\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\n   *\n   * @see ComplexZmanimCalendar#getFixedLocalChatzos()\n   */\n  public getFixedLocalChatzosBasedZmanim(startOfHalfDay: DateTime | null, endOfHalfDay: DateTime | null, hours: number): DateTime | null {\n    return this.getHalfDayBasedZman(startOfHalfDay, endOfHalfDay, hours);\n  }\n\n  /**\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> that the\n   * day is calculated from dawn to nightfall, but calculated using the first half of the day only. The half a day starts\n   * at <em>alos</em> defined as {@link #getAlos18Degrees() 18&deg;} and ends at {@link #getFixedLocalChatzos() fixed local\n   * chatzos}. <em>Sof Zman Shema</em> is 3 <em>shaos zmaniyos</em> (solar hours) after <em>alos</em> or half of this half-day.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAlos18Degrees()\n   * @see #getFixedLocalChatzos()\n   * @see ZmanimCalendar#getHalfDayBasedZman(Date, Date, double)\n   */\n  public getSofZmanShmaMGA18DegreesToFixedLocalChatzos(): DateTime | null {\n    return this.getHalfDayBasedZman(this.getAlos18Degrees(), this.getFixedLocalChatzos(), 3);\n  }\n\n  /**\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> that the\n   * day is calculated from dawn to nightfall, but calculated using the first half of the day only. The half a day starts\n   * at <em>alos</em> defined as {@link #getAlos16Point1Degrees() 16.1&deg;} and ends at {@link #getFixedLocalChatzos() fixed local\n   * chatzos}. <em>Sof Zman Shema</em> is 3 <em>shaos zmaniyos</em> (solar hours) after this <em>alos</em> or half of this half-day.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAlos16Point1Degrees()\n   * @see #getFixedLocalChatzos()\n   * @see #getHalfDayBasedZman(Date, Date, double)\n   */\n  public getSofZmanShmaMGA16Point1DegreesToFixedLocalChatzos(): DateTime | null {\n    return this.getHalfDayBasedZman(this.getAlos16Point1Degrees(), this.getFixedLocalChatzos(), 3);\n  }\n\n  /**\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> that the\n   * day is calculated from dawn to nightfall, but calculated using the first half of the day only. The half a day starts\n   * at <em>alos</em> defined as {@link #getAlos90() 90 minutes before sunrise} and ends at {@link #getFixedLocalChatzos()\n   * fixed local chatzos}. <em>Sof Zman Shema</em> is 3 <em>shaos zmaniyos</em> (solar hours) after this <em>alos</em> or\n   * half of this half-day.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAlos90()\n   * @see #getFixedLocalChatzos()\n   * @see #getHalfDayBasedZman(Date, Date, double)\n   */\n  public getSofZmanShmaMGA90MinutesToFixedLocalChatzos(): DateTime | null {\n    return this.getHalfDayBasedZman(this.getAlos90(), this.getFixedLocalChatzos(), 3);\n  }\n\n  /**\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombiner\">Magen Avraham (MGA)</a> that the\n   * day is calculated from dawn to nightfall, but calculated using the first half of the day only. The half a day starts\n   * at <em>alos</em> defined as {@link #getAlos72() 72 minutes before sunrise} and ends at {@link #getFixedLocalChatzos()\n   * fixed local chatzos}. <em>Sof Zman Shema</em> is 3 <em>shaos zmaniyos</em> (solar hours) after this <em>alos</em> or\n   * half of this half-day.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getAlos72()\n   * @see #getFixedLocalChatzos()\n   * @see #getHalfDayBasedZman(Date, Date, double)\n   */\n  public getSofZmanShmaMGA72MinutesToFixedLocalChatzos(): DateTime | null {\n    return this.getHalfDayBasedZman(this.getAlos72(), this.getFixedLocalChatzos(), 3);\n  }\n\n  /**\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day is calculated from\n   * sunrise to sunset, but calculated using the first half of the day only. The half a day starts at {@link #getSunrise()\n   * sunrise} and ends at {@link #getFixedLocalChatzos() fixed local chatzos}. <em>Sof zman Shema</em> is 3 <em>shaos\n   * zmaniyos</em> (solar hours) after sunrise or half of this half-day.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getSunrise()\n   * @see #getFixedLocalChatzos()\n   * @see #getHalfDayBasedZman(Date, Date, double)\n   */\n  public getSofZmanShmaGRASunriseToFixedLocalChatzos(): DateTime | null {\n    return this.getHalfDayBasedZman(this.getElevationAdjustedSunrise(), this.getFixedLocalChatzos(), 3);\n  }\n\n  /**\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\n   * calculation of <em>sof zman tfila</em> (<em>zman tfilah</em> (the latest time to recite the morning prayers))\n   * according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day is\n   * calculated from sunrise to sunset, but calculated using the first half of the day only. The half a day starts at\n   * {@link #getSunrise() sunrise} and ends at {@link #getFixedLocalChatzos() fixed local chatzos}. <em>Sof zman tefila</em>\n   * is 4 <em>shaos zmaniyos</em> (solar hours) after sunrise or 2/3 of this half-day.\n   *\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   * @see #getSunrise()\n   * @see #getFixedLocalChatzos()\n   * @see #getHalfDayBasedZman(Date, Date, double)\n   */\n  public getSofZmanTfilaGRASunriseToFixedLocalChatzos(): DateTime | null {\n    return this.getHalfDayBasedZman(this.getElevationAdjustedSunrise(), this.getFixedLocalChatzos(), 4);\n  }\n\n  /**\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of\n   * the calculation of <em>mincha gedola</em>, the earliest time one can pray <em>mincha</em> <a href=\n   * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that is 30 minutes after {@link #getFixedLocalChatzos() fixed\n   * local chatzos}.\n   *\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getMinchaGedola()\n   * @see #getFixedLocalChatzos()\n   * @see #getMinchaKetanaGRAFixedLocalChatzosToSunset\n   */\n  public getMinchaGedolaGRAFixedLocalChatzos30Minutes(): DateTime | null {\n    return ZmanimCalendar.getTimeOffset(this.getFixedLocalChatzos(), ZmanimCalendar.MINUTE_MILLIS * 30);\n  }\n\n  /**\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion\n   * of the calculation of <em>mincha ketana</em> (the preferred time to recite the <em>mincha prayers</em> according to\n   * the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others) calculated according\n   * to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that is 3.5 <em>shaos zmaniyos</em> (solar\n   * hours) after {@link #getFixedLocalChatzos() fixed local chatzos}.\n   *\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getMinchaGedola()\n   * @see #getFixedLocalChatzos()\n   * @see #getMinchaGedolaGRAFixedLocalChatzos30Minutes\n   * @see ZmanimCalendar#getHalfDayBasedZman(Date, Date, double)\n   */\n  public getMinchaKetanaGRAFixedLocalChatzosToSunset(): DateTime | null {\n    return this.getHalfDayBasedZman(this.getFixedLocalChatzos(), this.getElevationAdjustedSunset(), 3.5);\n  }\n\n  /**\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion\n   * of the calculation of <em>plag hamincha</em>. This method returns <em>plag hamincha</em> calculated according to the\n   * <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day ends at sunset and is 4.75 <em>shaos\n   * zmaniyos</em> (solar hours) after {@link #getFixedLocalChatzos() fixed local chatzos}.\n   *\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\n   *         does not set, a <code>null</code> will be returned. See detailed explanation on top of the\n   *         {@link AstronomicalCalendar} documentation.\n   *\n   * @see #getPlagHamincha()\n   * @see #getFixedLocalChatzos()\n   * @see #getMinchaKetanaGRAFixedLocalChatzosToSunset\n   * @see #getMinchaGedolaGRAFixedLocalChatzos30Minutes\n   * @see ZmanimCalendar#getHalfDayBasedZman(Date, Date, double)\n   */\n  public getPlagHaminchaGRAFixedLocalChatzosToSunset(): DateTime | null {\n    return this.getHalfDayBasedZman(this.getFixedLocalChatzos(), this.getElevationAdjustedSunset(), 4.75);\n  }\n\n  /**\n   * Method to return <em>tzais</em> (dusk) calculated as 50 minutes after sea level sunset. This method returns\n   * <em>tzais</em> (nightfall) based on the opinion of Rabbi Moshe Feinstein for the New York area. This time should\n   * not be used for latitudes other than ones similar to the latitude of the NY area.\n   *\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\n   *         a <code>null</code> will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\n   *         documentation.\n   */\n  public getTzais50(): DateTime | null {\n    return ZmanimCalendar.getTimeOffset(this.getElevationAdjustedSunset(), 50 * ZmanimCalendar.MINUTE_MILLIS);\n  }\n\n  /**\n   * A method for calculating <em>samuch lemincha ketana</em>, / near <em>mincha ketana</em> time that is half an hour before\n   * {@link #getMinchaKetana()} or is 9 * {@link #getShaahZmanisGra() <em>shaos zmaniyos</em>} (solar hours) after {@link\n   * #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()}\n   * setting), calculated according to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> using a day starting at\n   * sunrise and ending at sunset. This is the time that eating or other activity can't begin prior to praying <em>mincha</em>.\n   * The calculation used is 9 * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() <em>alos</em>\n   * 16.1&deg;}. See the <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=60387&st=&pgnum=294\">Mechaber and Mishna Berurah\n   * 232</a> and <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=60388&pgnum=34\">249:2</a>.\n   *\n   * @see #getShaahZmanisGra()\n   * @see #getSamuchLeMinchaKetana16Point1Degrees()\n   * @see #isUseAstronomicalChatzosForOtherZmanim()\n   * @return the <code>Date</code> of the time of <em>samuch lemincha ketana</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSamuchLeMinchaKetanaGRA(): DateTime | null {\n    return this.getSamuchLeMinchaKetana(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset(), true);\n  }\n\n  /**\n   * A method for calculating <em>samuch lemincha ketana</em>, / near <em>mincha ketana</em> time that is half an hour\n   * before {@link #getMinchaGedola16Point1Degrees()}  or 9 * <em>shaos zmaniyos</em> (temporal hours) after the start of\n   * the day, calculated using a day starting and ending 16.1&deg; below the horizon. This is the time that eating or other\n   * activity can't begin prior to praying <em>mincha</em>. The calculation used is 9 * {@link\n   * #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;}. See the <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=60387&st=&pgnum=294\">Mechaber and Mishna Berurah 232</a> and <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=60388&pgnum=34\">249:2</a>.\n   *\n   * @see #getShaahZmanis16Point1Degrees()\n   * @return the <code>Date</code> of the time of <em>samuch lemincha ketana</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSamuchLeMinchaKetana16Point1Degrees(): DateTime | null {\n    return this.getSamuchLeMinchaKetana(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees(), true);\n  }\n\n  /**\n   * A method for calculating <em>samuch lemincha ketana</em>, / near <em>mincha ketana</em> time that is half an hour before\n   * {@link #getMinchaKetana72Minutes()}  or 9 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day,\n   * calculated using a day starting 72 minutes before sunrise and ending 72 minutes after sunset. This is the time that eating\n   * or other activity can't begin prior to praying <em>mincha</em>. The calculation used is 9 * {@link\n   * #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;}. See the <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=60387&st=&pgnum=294\">Mechaber and Mishna Berurah 232</a> and <a href=\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=60388&pgnum=34\">249:2</a>.   *\n   * @see #getShaahZmanis16Point1Degrees()\n   * @return the <code>Date</code> of the time of <em>samuch lemincha ketana</em>. If the calculation can't be computed such\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\n   *         where the sun may not reach low enough below the horizon for this calculation, a <code>null</code> will be returned.\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\n   */\n  public getSamuchLeMinchaKetana72Minutes(): DateTime | null {\n    return this.getSamuchLeMinchaKetana(this.getAlos72(), this.getTzais72(), true);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getClassName() {\n    return 'com.kosherjava.zmanim.ComplexZmanimCalendar';\n  }\n}\n","import { UnsupportedError } from '../polyfills/errors';\n\n/**\n * A class that represents a numeric time. Times that represent a time of day are stored as {@link java.util.Date}s in\n * this API. The time class is used to represent numeric time such as the time in hours, minutes, seconds and\n * milliseconds of a {@link AstronomicalCalendar#getTemporalHour() temporal hour}.\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2011\n * @version 0.9.0\n */\n\nexport class Time {\n  /** milliseconds in a second. */\n  private static readonly SECOND_MILLIS: number = 1000;\n\n  /** milliseconds in a minute. */\n  private static readonly MINUTE_MILLIS: number = Time.SECOND_MILLIS * 60;\n\n  /** milliseconds in an hour. */\n  private static readonly HOUR_MILLIS: number = Time.MINUTE_MILLIS * 60;\n\n  /**\n   * The hour.\n   * @see #getHours()\n   */\n  private hours: number;\n\n  /**\n   * The minutes.\n   * @see #getMinutes()\n   */\n  private minutes: number;\n\n  /**\n   * The seconds.\n   * @see #getSeconds()\n   */\n  private seconds: number;\n\n  /**\n   * The milliseconds.\n   * @see #getMilliseconds()\n   */\n  private milliseconds: number;\n\n  /**\n   * Is the time negative\n   * @see #isNegative()\n   * @see #setIsNegative(boolean)\n   */\n  private negative: boolean = false;\n\n  /**\n   * Constructor with parameters for the hours, minutes, seconds and milliseconds.\n   *\n   * @param hours the hours to set\n   * @param minutes the minutes to set\n   * @param seconds the seconds to set\n   * @param milliseconds the milliseconds to set\n   */\n  constructor(hours: number, minutes: number, seconds: number, milliseconds: number)\n  /**\n   * A constructor that sets the time from milliseconds. The milliseconds are converted to hours, minutes,\n   * seconds and milliseconds. If the milliseconds are negative it will call {@link #setIsNegative(boolean)}.\n   * @param millis the milliseconds to set.\n   */\n  constructor(millis: number)\n  /**\n   * A constructor with 2 overloads:\n   * - A constructor that sets the time by milliseconds.\n   *   The milliseconds are converted to hours, minutes, seconds and milliseconds. If the\n   *   milliseconds are negative it will call {@link #setIsNegative(boolean)}.\n   * - A constructor with parameters for the hours, minutes, seconds and milliseconds.\n   * @param hoursOrMillis\n   * @param minutes\n   * @param seconds\n   * @param milliseconds\n   */\n  constructor(hoursOrMillis: number, minutes?: number, seconds: number = 0, milliseconds: number = 0) {\n    if (minutes) {\n      this.hours = hoursOrMillis;\n      this.minutes = minutes;\n      this.seconds = seconds;\n      this.milliseconds = milliseconds;\n    } else {\n      let adjustedMillis: number = hoursOrMillis;\n      if (adjustedMillis < 0) {\n        this.negative = true;\n        adjustedMillis = Math.abs(adjustedMillis);\n      }\n      this.hours = Math.trunc(adjustedMillis / Time.HOUR_MILLIS);\n      adjustedMillis = adjustedMillis - this.hours * Time.HOUR_MILLIS;\n\n      this.minutes = Math.trunc(adjustedMillis / Time.MINUTE_MILLIS);\n      adjustedMillis = adjustedMillis - this.minutes * Time.MINUTE_MILLIS;\n\n      this.seconds = Math.trunc(adjustedMillis / Time.SECOND_MILLIS);\n      adjustedMillis = adjustedMillis - this.seconds * Time.SECOND_MILLIS;\n\n      this.milliseconds = adjustedMillis;\n    }\n  }\n\n  /*\n      /!**\n       * A constructor that sets the time from milliseconds. The milliseconds are converted to hours, minutes,\n       * seconds and milliseconds. If the milliseconds are negative it will call {@link#setIsNegative(boolean)}.\n       * @param millis the milliseconds to set.\n       *!/\n      public Time(millis: number) {\n          this((int) millis);\n      }\n\n      public Time(millis: number) {\n          adjustedMillis: number = millis;\n          if (adjustedMillis < 0) {\n              this.isNegative = true;\n              adjustedMillis = Math.abs(adjustedMillis);\n          }\n          this.hours = adjustedMillis / HOUR_MILLIS;\n          adjustedMillis = adjustedMillis - this.hours * HOUR_MILLIS;\n\n          this.minutes = adjustedMillis / MINUTE_MILLIS;\n          adjustedMillis = adjustedMillis - this.minutes * MINUTE_MILLIS;\n\n          this.seconds = adjustedMillis / SECOND_MILLIS;\n          adjustedMillis = adjustedMillis - this.seconds * SECOND_MILLIS;\n\n          this.milliseconds = adjustedMillis;\n      }\n  */\n\n  /**\n   * Does the time represent a negative time 9such as using this to subtract time from another Time.\n   * @return if the time is negative.\n   */\n  public isNegative(): boolean {\n    return this.negative;\n  }\n\n  /**\n   * Does the time represent a negative time, such as using this to subtract time from another Time.\n   * @param isNegative that the Time represents negative time\n   */\n  public setIsNegative(isNegative: boolean): void {\n    this.negative = isNegative;\n  }\n\n  /**\n   * Get the hour.\n   * @return Returns the hour.\n   */\n  public getHours(): number {\n    return this.hours;\n  }\n\n  /**\n   * Set the hour.\n   * @param hours\n   *            The hours to set.\n   */\n  public setHours(hours: number): void {\n    this.hours = hours;\n  }\n\n  /**\n   * Get the minutes.\n   * @return Returns the minutes.\n   */\n  public getMinutes(): number {\n    return this.minutes;\n  }\n\n  /**\n   * Set the minutes.\n   * @param minutes\n   *            The minutes to set.\n   */\n  public setMinutes(minutes: number): void {\n    this.minutes = minutes;\n  }\n\n  /**\n   * Get the seconds.\n   * @return Returns the seconds.\n   */\n  public getSeconds(): number {\n    return this.seconds;\n  }\n\n  /**\n   * Set the seconds.\n   * @param seconds\n   *            The seconds to set.\n   */\n  public setSeconds(seconds: number): void {\n    this.seconds = seconds;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return Returns the milliseconds.\n   */\n  public getMilliseconds(): number {\n    return this.milliseconds;\n  }\n\n  /**\n   * Set the milliseconds.\n   * @param milliseconds\n   *            The milliseconds to set.\n   */\n  public setMilliseconds(milliseconds: number): void {\n    this.milliseconds = milliseconds;\n  }\n\n  /**\n   * Returns the time in milliseconds by converting hours, minutes and seconds into milliseconds.\n   * @return the time in milliseconds\n   */\n  public getTime(): number {\n    return this.hours * Time.HOUR_MILLIS + this.minutes * Time.MINUTE_MILLIS + this.seconds * Time.SECOND_MILLIS\n      + this.milliseconds;\n  }\n\n  /**\n   * @deprecated This depends on a circular dependency. Use <pre>new ZmanimFormatter(TimeZone.getTimeZone(\"UTC\")).format(time)</pre> instead.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public toString(): string {\n    throw new UnsupportedError('This method is deprecated, due to the fact that it depends on a circular dependency. '\n      + 'Use `new ZmanimFormatter(TimeZone.getTimeZone(\\'UTC\\')).format(time)` instead');\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { IntegerUtils, StringUtils } from '../polyfills/Utils';\nimport { UnsupportedError } from '../polyfills/errors';\nimport { GeoLocation } from './GeoLocation';\n\n/**\n * A wrapper class for astronomical times / <em>zmanim</em> that is mostly intended to allow sorting collections of astronomical times.\n * It has fields for both date/time and duration based <em>zmanim</em>, name / labels as well as a longer description or explanation of a\n * <em>zman</em>.\n * <p>\n * Here is an example of various ways of sorting <em>zmanim</em>.\n * <p>First create the Calendar for the location you would like to calculate:\n *\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\n * String locationName = &quot;Lakewood, NJ&quot;;\n * double latitude = 40.0828; // Lakewood, NJ\n * double longitude = -74.2094; // Lakewood, NJ\n * double elevation = 20; // optional elevation correction in Meters\n * // the String parameter in getTimeZone() has to be a valid timezone listed in {@link java.util.TimeZone#getAvailableIDs()}\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\n * ComplexZmanimCalendar czc = new ComplexZmanimCalendar(location);\n * Zman sunset = new Zman(czc.getSunset(), \"Sunset\");\n * Zman shaah16 = new Zman(czc.getShaahZmanis16Point1Degrees(), \"Shaah zmanis 16.1\");\n * Zman sunrise = new Zman(czc.getSunrise(), \"Sunrise\");\n * Zman shaah = new Zman(czc.getShaahZmanisGra(), \"Shaah zmanis GRA\");\n * ArrayList&lt;Zman&gt; zl = new ArrayList&lt;Zman&gt;();\n * zl.add(sunset);\n * zl.add(shaah16);\n * zl.add(sunrise);\n * zl.add(shaah);\n * //will sort sunset, shaah 1.6, sunrise, shaah GRA\n * System.out.println(zl);\n * Collections.sort(zl, Zman.DATE_ORDER);\n * // will sort sunrise, sunset, shaah, shaah 1.6 (the last 2 are not in any specific order)\n * Collections.sort(zl, Zman.DURATION_ORDER);\n * // will sort sunrise, sunset (the first 2 are not in any specific order), shaah GRA, shaah 1.6\n * Collections.sort(zl, Zman.NAME_ORDER);\n * // will sort shaah 1.6, shaah GRA, sunrise, sunset\n * </pre>\n *\n * @author &copy; Eliyahu Hershfeld 2007-2020\n * @todo Add secondary sorting. As of now the {@code Comparator}s in this class do not sort by secondary order. This means that when sorting a\n * {@link java.util.Collection} of <em>zmanim</em> and using the {@link #DATE_ORDER} {@code Comparator} will have the duration based <em>zmanim</em>\n * at the end, but they will not be sorted by duration. This should be N/A for label based sorting.\n */\nexport class Zman {\n  /**\n   * The name / label of the <em>zman</em>.\n   */\n  label: string | null;\n\n  /**\n   * The {@link Date} of the <em>zman</em>\n   */\n  zman?: DateTime;\n\n  /**\n   * The duration if the <em>zman</em> is  a {@link AstronomicalCalendar#getTemporalHour() temporal hour} (or the various\n   * <em>shaah zmanis</em> base times such as {@link ZmanimCalendar#getShaahZmanisGra()  <em>shaah Zmanis GRA</em>} or\n   * {@link ComplexZmanimCalendar#getShaahZmanis16Point1Degrees() <em>shaah Zmanis 16.1&deg;</em>}).\n   */\n  duration?: number;\n\n  /**\n   * A longer description or explanation of a <em>zman</em>.\n   */\n  description?: string;\n\n  /**\n   * The location information of the <em>zman</em>.\n   */\n  geoLocation?: GeoLocation;\n\n  /**\n   * The constructor setting a {@link Date} based <em>zman</em> and a label.\n   * @param date the Date of the <em>zman</em>.\n   * @param label the label of the  <em>zman</em> such as \"<em>Sof Zman Krias Shema GRA</em>\".\n   * @see #Zman(Date, GeoLocation, String)\n   */\n  constructor(date: DateTime, label: string | null)\n  /**\n   * The constructor setting a duration based <em>zman</em> such as\n   * {@link AstronomicalCalendar#getTemporalHour() temporal hour} (or the various <em>shaah zmanis</em> times such as\n   * {@link ZmanimCalendar#getShaahZmanisGra() <em>shaah zmanis GRA</em>} or\n   * {@link ComplexZmanimCalendar#getShaahZmanis16Point1Degrees() <em>shaah Zmanis 16.1&deg;</em>}) and label.\n   * @param duration a duration based <em>zman</em> such as ({@link AstronomicalCalendar#getTemporalHour()}\n   * @param label the label of the  <em>zman</em> such as \"<em>Shaah Zmanis GRA</em>\".\n   * @see #Zman(Date, String)\n   */\n  constructor(duration: number, label: string | null)\n  constructor(date: DateTime, geoLocation: GeoLocation, label: string | null)\n  constructor(dateOrDuration: number | DateTime, labelOrGeoLocation: string | GeoLocation | null, label?: string | null) {\n    this.label = label || null;\n\n    if (labelOrGeoLocation instanceof GeoLocation) {\n      this.geoLocation = labelOrGeoLocation;\n    } else {\n      this.label = labelOrGeoLocation;\n    }\n\n    if (DateTime.isDateTime(dateOrDuration)) {\n      this.zman = dateOrDuration;\n    } else {\n      this.duration = dateOrDuration;\n    }\n  }\n\n  /**\n   * A {@link Comparator} that will compare and sort <em>zmanim</em> by date/time order. Compares its two arguments by the zman's date/time\n   * order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater\n   * than the second.\n   * Please note that this class will handle cases where either the {@code Zman} is a null or {@link #getZman()} returns a null.\n   */\n  static compareDateOrder(zman1: Zman, zman2: Zman): number {\n    const firstMillis = zman1.zman?.valueOf() || 0;\n    const secondMillis = zman2.zman?.valueOf() || 0;\n\n    return IntegerUtils.compare(firstMillis, secondMillis);\n  }\n\n  /**\n   * A {@link Comparator} that will compare and sort zmanim by zmanim label order. Compares its two arguments by the zmanim label\n   * name order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater\n   * than the second.\n   * Please note that this class will sort cases where either the {@code Zman} is a null or {@link #label} returns a null\n   * as empty {@code String}s.\n   */\n  static compareNameOrder(zman1: Zman, zman2: Zman): number {\n    return StringUtils.compareTo(zman1.label || '', zman2.label || '');\n  }\n\n  /**\n   * A {@link Comparator} that will compare and sort duration based <em>zmanim</em>  such as\n   * {@link AstronomicalCalendar#getTemporalHour() temporal hour} (or the various <em>shaah zmanis</em> times\n   * such as <em>{@link ZmanimCalendar#getShaahZmanisGra() shaah zmanis GRA}</em> or\n   * {@link ComplexZmanimCalendar#getShaahZmanis16Point1Degrees() <em>shaah zmanis 16.1&deg;</em>}). Returns a negative\n   * integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.\n   * Please note that this class will sort cases where {@code Zman} is a null.\n   */\n  static compareDurationOrder(zman1: Zman, zman2: Zman): number {\n    return IntegerUtils.compare(zman1.duration || 0, zman2.duration || 0);\n  }\n\n  /**\n   * A method that returns an XML formatted <code>String</code> representing the serialized <code>Object</code>. Very\n   * similar to the toString method but the return value is in an xml format. The format currently used (subject to\n   * change) is:\n   *\n   * <pre>\n   * &lt;Zman&gt;\n   *  &lt;Label&gt;Sof Zman Krias Shema GRA&lt;/Label&gt;\n   *  &lt;Zman&gt;1969-02-08T09:37:56.820&lt;/Zman&gt;\n   *  &lt;TimeZone&gt;\n   *    &lt;TimezoneName&gt;America/Montreal&lt;/TimezoneName&gt;\n   *    &lt;TimeZoneDisplayName&gt;Eastern Standard Time&lt;/TimeZoneDisplayName&gt;\n   *    &lt;TimezoneGMTOffset&gt;-5&lt;/TimezoneGMTOffset&gt;\n   *    &lt;TimezoneDSTOffset&gt;1&lt;/TimezoneDSTOffset&gt;\n   *  &lt;/TimeZone&gt;\n   *  &lt;Duration&gt;0&lt;/Duration&gt;\n   *  &lt;Description&gt;Sof Zman Krias Shema GRA is 3 sha'os zmaniyos calculated from sunrise to sunset.&lt;/Description&gt;\n   * &lt;/Zman&gt;\n   * </pre>\n   * @return The XML formatted <code>String</code>.\n   * @deprecated\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public toXML(): void {\n    throw new UnsupportedError('This method is deprecated');\n  }\n\n  toString(): string {\n    return (`\\nLabel:\\t${this.label}`)\n      .concat(`\\nZman:\\t${this.zman}`)\n      .concat(`\\nnGeoLocation:\\t${this.geoLocation?.toString().replace(/\\n/g, '\\n\\t')}`)\n      .concat(`\\nDuration:\\t${this.duration}`)\n      .concat(`\\nDescription:\\t${this.description}`);\n  }\n}\n\nexport type ZmanWithZmanDate = Zman & { zman: DateTime };\nexport type ZmanWithDuration = Zman & { duration: number };\n","import { DateTime } from 'luxon';\n\nimport { TimeZone, Utils, padZeros } from '../polyfills/Utils';\nimport { Time } from './Time';\nimport { AstronomicalCalendar } from '../AstronomicalCalendar';\nimport { ZmanimCalendar } from '../ZmanimCalendar';\nimport { ComplexZmanimCalendar } from '../ComplexZmanimCalendar';\nimport { Zman, ZmanWithDuration, ZmanWithZmanDate } from './Zman';\nimport { UnsupportedError } from '../polyfills/errors';\n\nconst methodBlacklist: string[] = [\n  'getAdjustedDate',\n  'getDate',\n  'getElevationAdjustedSunrise',\n  'getElevationAdjustedSunset',\n  'getMidnightLastNight',\n  'getMidnightTonight',\n  'getSunriseBaalHatanya',\n  'getSunsetBaalHatanya',\n];\n\nconst methodWhitelist: string[] = [\n  // These methods have parameters, but have default values.\n  'getMinchaGedola',\n  'getMinchaKetana',\n  'getPlagHamincha',\n  'getSofZmanKidushLevana15Days',\n  'getSofZmanKidushLevanaBetweenMoldos',\n  'getSunTransit',\n  'getTchilasZmanKidushLevana3Days',\n  'getTchilasZmanKidushLevana7Days',\n  'getTemporalHour',\n];\n\n/**\n * A class used to format both non {@link java.util.Date} times generated by the Zmanim package as well as Dates. For\n * example the {@link AstronomicalCalendar#getTemporalHour()} returns the length of the hour in\n * milliseconds. This class can format this time.\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2019\n * @version 1.2\n */\nexport class ZmanimFormatter {\n  /**\n   * Setting to prepend a zero to single digit hours.\n   * @see #setSettings(boolean, boolean, boolean)\n   */\n  private prependZeroHours: boolean = false;\n\n  /**\n   * Should seconds be used in formatting time.\n   * @see #setSettings(boolean, boolean, boolean)\n   */\n  private useSeconds: boolean = false;\n\n  /**\n   * @see #setSettings(boolean, boolean, boolean)\n   */\n  private useMillis: boolean = false;\n\n  /**\n   * the formatter for minutes as seconds.\n   */\n  private static readonly minuteSecondNF: number = 2;\n\n  /**\n   * the formatter for hours.\n   */\n  private hourNF!: number;\n\n  /**\n   * the formatter for minutes as milliseconds.\n   */\n  private static readonly milliNF: number = 3;\n\n  /**\n   * @see #setDateFormat(SimpleDateFormat)\n   */\n  private dateFormat!: string;\n\n  /**\n   * Method to return the TimeZone.\n   * @see #setTimeZone(TimeZone)\n   */\n  private timeZoneId!: string; // TimeZone.getTimeZone(\"UTC\");\n\n  /**\n   * @return the timeZone\n   */\n  public getTimeZone(): string {\n    return this.timeZoneId;\n  }\n\n  /**\n   * Method to set the TimeZone.\n   * @param timeZoneId\n   *            the timeZone to set\n   */\n  public setTimeZone(timeZoneId: string): void {\n    this.timeZoneId = timeZoneId;\n  }\n\n  /**\n   * Format using hours, minutes, seconds and milliseconds using the xsd:time format. This format will return\n   * 00.00.00.0 when formatting 0.\n   */\n  public static readonly SEXAGESIMAL_XSD_FORMAT: number = 0;\n\n  /**\n   * Defaults to {@link #SEXAGESIMAL_XSD_FORMAT}.\n   * @see #setTimeFormat(int)\n   */\n  private timeFormat: number = ZmanimFormatter.SEXAGESIMAL_XSD_FORMAT;\n\n  /**\n   * Format using standard decimal format with 5 positions after the decimal.\n   */\n  public static readonly DECIMAL_FORMAT: number = 1;\n\n  /** Format using hours and minutes. */\n  public static readonly SEXAGESIMAL_FORMAT: number = 2;\n\n  /** Format using hours, minutes and seconds. */\n  public static readonly SEXAGESIMAL_SECONDS_FORMAT: number = 3;\n\n  /** Format using hours, minutes, seconds and milliseconds. */\n  public static readonly SEXAGESIMAL_MILLIS_FORMAT: number = 4;\n\n  /** constant for milliseconds in a minute (60,000) */\n  public static readonly MINUTE_MILLIS: number = 60 * 1000;\n\n  /** constant for milliseconds in an hour (3,600,000) */\n  public static readonly HOUR_MILLIS: number = ZmanimFormatter.MINUTE_MILLIS * 60;\n\n  /**\n   * Format using the XSD Duration format. This is in the format of PT1H6M7.869S (P for period (duration), T for time,\n   * H, M and S indicate hours, minutes and seconds.\n   */\n  public static readonly XSD_DURATION_FORMAT: number = 5;\n\n  public static readonly XSD_DATE_FORMAT = 'yyyy-LL-dd\\'T\\'HH:mm:ss';\n\n  /**\n   * Constructor that defaults to this will use the format \"h:mm:ss\" for dates and 00.00.00.0 for {@link Time}.\n   * @param timeZone the TimeZone Object\n   */\n  /*\n      public ZmanimFormatter(timeZone: TimeZone) {\n          this(0, new SimpleDateFormat(\"h:mm:ss\"), timeZone);\n      }\n  */\n\n  // public ZmanimFormatter() {\n  // this(0, new SimpleDateFormat(\"h:mm:ss\"), TimeZone.getTimeZone(\"UTC\"));\n  // }\n\n  /**\n   * ZmanimFormatter constructor using a formatter\n   *\n   * @param format\n   *            int The formatting style to use. Using ZmanimFormatter.SEXAGESIMAL_SECONDS_FORMAT will format the\n   *            time of 90*60*1000 + 1 as 1:30:00\n   * @param dateFormat the SimpleDateFormat Object\n   * @param timeZone the TimeZone Object\n   */\n  constructor(timeZoneId: string)\n  constructor(format: number, dateFormat: string, timeZoneId: string)\n  constructor(formatOrTimeZone: number | string, dateFormat?: string, timeZoneId?: string) {\n    let format: number;\n    if (dateFormat) {\n      format = formatOrTimeZone as number;\n    } else {\n      format = 0;\n      dateFormat = 'h:mm:ss';\n      timeZoneId = formatOrTimeZone as string;\n    }\n\n    this.setTimeZone(timeZoneId!);\n\n    if (this.prependZeroHours) {\n      this.hourNF = 2;\n    }\n\n    this.setTimeFormat(format);\n    this.setDateFormat(dateFormat);\n  }\n\n  /**\n   * Sets the format to use for formatting.\n   *\n   * @param format\n   *            int the format constant to use.\n   */\n  public setTimeFormat(format: number): void {\n    this.timeFormat = format;\n    switch (format) {\n      case ZmanimFormatter.SEXAGESIMAL_XSD_FORMAT:\n        this.setSettings(true, true, true);\n        break;\n      case ZmanimFormatter.SEXAGESIMAL_FORMAT:\n        this.setSettings(false, false, false);\n        break;\n      case ZmanimFormatter.SEXAGESIMAL_SECONDS_FORMAT:\n        this.setSettings(false, true, false);\n        break;\n      case ZmanimFormatter.SEXAGESIMAL_MILLIS_FORMAT:\n        this.setSettings(false, true, true);\n        break;\n      // case DECIMAL_FORMAT:\n      // default:\n    }\n  }\n\n  /**\n   * Sets the SimpleDateFormat Object\n   * @param dateFormat the SimpleDateFormat Object to set\n   */\n  public setDateFormat(dateFormat: string): void {\n    this.dateFormat = dateFormat;\n  }\n\n  /**\n   * returns the SimpleDateFormat Object\n   * @return the SimpleDateFormat Object\n   */\n  public getDateFormat(): string {\n    return this.dateFormat;\n  }\n\n  /**\n   * Sets various format settings.\n   * @param prependZeroHours  if to prepend a zero for single digit hours (so that 1 o'clock is displayed as 01)\n   * @param useSeconds should seconds be used in the time format\n   * @param useMillis should milliseconds be used in formatting time.\n   */\n  private setSettings(prependZeroHours: boolean, useSeconds: boolean, useMillis: boolean): void {\n    this.prependZeroHours = prependZeroHours;\n    this.useSeconds = useSeconds;\n    this.useMillis = useMillis;\n  }\n\n  /**\n   * A method that formats milliseconds into a time format.\n   *\n   * @param milliseconds\n   *            The time in milliseconds.\n   * @return String The formatted <code>String</code>\n   */\n  /*\n      public format(milliseconds: number): string {\n          return this.format(milliseconds);\n      }\n  */\n\n  /**\n   * A method that formats milliseconds into a time format.\n   *\n   * @param millis\n   *            The time in milliseconds.\n   * @return String The formatted <code>String</code>\n   */\n\n  /*\n      public format(millis: number): string {\n          return format(new Time(millis));\n      }\n  */\n\n  /**\n   * A method that formats {@link Time} objects.\n   *\n   * @param time\n   *            The time <code>Object</code> to be formatted.\n   * @return String The formatted <code>String</code>\n   */\n  public format(timeOrMillis: Time | number): string {\n    let time: Time;\n    if (timeOrMillis instanceof Time) {\n      time = timeOrMillis as Time;\n    } else {\n      time = new Time(timeOrMillis as number);\n    }\n\n    if (this.timeFormat === ZmanimFormatter.XSD_DURATION_FORMAT) {\n      return ZmanimFormatter.formatXSDDurationTime(time);\n    }\n    let sb: string = padZeros(time.getHours(), this.hourNF)\n      .concat(':')\n      .concat(padZeros(time.getMinutes(), ZmanimFormatter.minuteSecondNF));\n    if (this.useSeconds) {\n      sb = sb.concat(':')\n        .concat(padZeros(time.getSeconds(), ZmanimFormatter.minuteSecondNF));\n    }\n    if (this.useMillis) {\n      sb = sb.concat('.')\n        .concat(padZeros(time.getMilliseconds(), ZmanimFormatter.milliNF));\n    }\n    return sb;\n  }\n\n  /**\n   * Formats a date using this class's {@link #getDateFormat() date format}.\n   *\n   * @param dateTime - the date to format\n   * @return the formatted String\n   */\n  public formatDateTime(dateTime: DateTime): string {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const _dateTime = dateTime.setZone(this.getTimeZone());\n\n    if (this.dateFormat === ZmanimFormatter.XSD_DATE_FORMAT) {\n      return this.getXSDateTime(_dateTime);\n    }\n    return _dateTime.toFormat(this.dateFormat);\n  }\n\n  /**\n   * The date:date-time function returns the current date and time as a date/time string. The date/time string that's\n   * returned must be a string in the format defined as the lexical representation of xs:dateTime in <a\n   * href=\"http://www.w3.org/TR/xmlschema11-2/#dateTime\">[3.3.8 dateTime]</a> of <a\n   * href=\"http://www.w3.org/TR/xmlschema11-2/\">[XML Schema 1.1 Part 2: Datatypes]</a>. The date/time format is\n   * basically CCYY-MM-DDThh:mm:ss, although implementers should consult <a\n   * href=\"http://www.w3.org/TR/xmlschema11-2/\">[XML Schema 1.1 Part 2: Datatypes]</a> and <a\n   * href=\"http://www.iso.ch/markete/8601.pdf\">[ISO 8601]</a> for details. The date/time string format must include a\n   * time zone, either a Z to indicate Coordinated Universal Time or a + or - followed by the difference between the\n   * difference from UTC represented as hh:mm.\n   * @param dateTime - the UTC Date Object\n   * @return the XSD dateTime\n   */\n  public getXSDateTime(dateTime: DateTime): string {\n    return dateTime.setZone(this.getTimeZone())\n      .toFormat(ZmanimFormatter.XSD_DATE_FORMAT.concat('ZZ'));\n  }\n\n  /**\n   * This returns the xml representation of an xsd:duration object.\n   *\n   * @param millis\n   *            the duration in milliseconds\n   * @return the xsd:duration formatted String\n   */\n\n  /*\n      public formatXSDDurationTime(millis: number): string {\n          return formatXSDDurationTime(new Time(millis));\n      }\n  */\n\n  /**\n   * This returns the xml representation of an xsd:duration object.\n   *\n   * @param time\n   *            the duration as a Time object\n   * @return the xsd:duration formatted String\n   */\n  public static formatXSDDurationTime(timeOrMillis: Time | number): string {\n    let time: Time;\n    if (timeOrMillis instanceof Time) {\n      time = timeOrMillis as Time;\n    } else {\n      time = new Time(timeOrMillis as number);\n    }\n\n    let duration: string;\n    if (time.getHours() !== 0 || time.getMinutes() !== 0 || time.getSeconds() !== 0 || time.getMilliseconds() !== 0) {\n      duration = ('P').concat('T');\n\n      if (time.getHours() !== 0) duration = duration.concat(`${time.getHours()}H`);\n\n      if (time.getMinutes() !== 0) duration = duration.concat(`${time.getMinutes()}M`);\n\n      if (time.getSeconds() !== 0 || time.getMilliseconds() !== 0) {\n        duration = duration.concat(`${time.getSeconds()}.${padZeros(time.getMilliseconds(), ZmanimFormatter.milliNF)}`);\n        duration = duration.concat('S');\n      }\n\n      if (duration.length === 1) duration.concat('T0S'); // zero seconds\n\n      if (time.isNegative()) {\n        duration = duration.substr(0, 0).concat('-').concat(duration.substr(0, duration.length));\n      }\n    }\n    return duration!.toString();\n  }\n\n  public static formatDecimal(num: number): string {\n    const hasDecimal = num - Math.trunc(num) > 0;\n    return hasDecimal ? num.toString() : num.toFixed(1);\n  }\n\n  /**\n   * A method that returns an XML formatted <code>String</code> representing the serialized <code>Object</code>. The\n   * format used is:\n   *\n   * <pre>\n   *  &lt;AstronomicalTimes date=&quot;1969-02-08&quot; type=&quot;AstronomicalCalendar algorithm=&quot;US Naval Almanac Algorithm&quot; location=&quot;Lakewood, NJ&quot; latitude=&quot;40.095965&quot; longitude=&quot;-74.22213&quot; elevation=&quot;31.0&quot; timeZoneName=&quot;Eastern Standard Time&quot; timeZoneID=&quot;America/New_York&quot; timeZoneOffset=&quot;-5&quot;&gt;\n   *     &lt;Sunrise&gt;2007-02-18T06:45:27-05:00&lt;/Sunrise&gt;\n   *     &lt;TemporalHour&gt;PT54M17.529S&lt;/TemporalHour&gt;\n   *     ...\n   *   &lt;/AstronomicalTimes&gt;\n   * </pre>\n   *\n   * Note that the output uses the <a href=\"http://www.w3.org/TR/xmlschema11-2/#dateTime\">xsd:dateTime</a> format for\n   * times such as sunrise, and <a href=\"http://www.w3.org/TR/xmlschema11-2/#duration\">xsd:duration</a> format for\n   * times that are a duration such as the length of a\n   * {@link AstronomicalCalendar#getTemporalHour() temporal hour}. The output of this method is\n   * returned by the {@link #toString() toString}.\n   *\n   * @param astronomicalCalendar the AstronomicalCalendar Object\n   *\n   * @return The XML formatted <code>String</code>. The format will be:\n   *\n   *         <pre>\n   *  &lt;AstronomicalTimes date=&quot;1969-02-08&quot; type=&quot;AstronomicalCalendar algorithm=&quot;US Naval Almanac Algorithm&quot; location=&quot;Lakewood, NJ&quot; latitude=&quot;40.095965&quot; longitude=&quot;-74.22213&quot; elevation=&quot;31.0&quot; timeZoneName=&quot;Eastern Standard Time&quot; timeZoneID=&quot;America/New_York&quot; timeZoneOffset=&quot;-5&quot;&gt;\n   *     &lt;Sunrise&gt;2007-02-18T06:45:27-05:00&lt;/Sunrise&gt;\n   *     &lt;TemporalHour&gt;PT54M17.529S&lt;/TemporalHour&gt;\n   *     ...\n   *  &lt;/AstronomicalTimes&gt;\n   * </pre>\n   *\n   *         TODO: add proper schema, and support for nulls. XSD duration (for solar hours), should probably return\n   *         nil and not P\n   * @deprecated\n   */\n  public static toXML(): void {\n    throw new UnsupportedError('This method is not supported.');\n  }\n\n  /**\n   * A method that returns a JSON formatted <code>String</code> representing the serialized <code>Object</code>. The\n   * format used is:\n   * <pre>\n   * {\n   *    &quot;metadata&quot;:{\n   *      &quot;date&quot;:&quot;1969-02-08&quot;,\n   *      &quot;type&quot;:&quot;AstronomicalCalendar&quot;,\n   *      &quot;algorithm&quot;:&quot;US Naval Almanac Algorithm&quot;,\n   *      &quot;location&quot;:&quot;Lakewood, NJ&quot;,\n   *      &quot;latitude&quot;:&quot;40.095965&quot;,\n   *      &quot;longitude&quot;:&quot;-74.22213&quot;,\n   *      &quot;elevation:&quot;31.0&quot;,\n   *      &quot;timeZoneName&quot;:&quot;Eastern Standard Time&quot;,\n   *      &quot;timeZoneID&quot;:&quot;America/New_York&quot;,\n   *      &quot;timeZoneOffset&quot;:&quot;-5&quot;},\n   *    &quot;AstronomicalTimes&quot;:{\n   *     &quot;Sunrise&quot;:&quot;2007-02-18T06:45:27-05:00&quot;,\n   *     &quot;TemporalHour&quot;:&quot;PT54M17.529S&quot;\n   *     ...\n   *     }\n   * }\n   * </pre>\n   *\n   * Note that the output uses the <a href=\"http://www.w3.org/TR/xmlschema11-2/#dateTime\">xsd:dateTime</a> format for\n   * times such as sunrise, and <a href=\"http://www.w3.org/TR/xmlschema11-2/#duration\">xsd:duration</a> format for\n   * times that are a duration such as the length of a\n   * {@link AstronomicalCalendar#getTemporalHour() temporal hour}.\n   *\n   * @param astronomicalCalendar the AstronomicalCalendar Object\n   *\n   * @return The JSON formatted <code>String</code>. The format will be:\n   * <pre>\n   * {\n   *    &quot;metadata&quot;:{\n   *      &quot;date&quot;:&quot;1969-02-08&quot;,\n   *      &quot;type&quot;:&quot;AstronomicalCalendar&quot;,\n   *      &quot;algorithm&quot;:&quot;US Naval Almanac Algorithm&quot;,\n   *      &quot;location&quot;:&quot;Lakewood, NJ&quot;,\n   *      &quot;latitude&quot;:&quot;40.095965&quot;,\n   *      &quot;longitude&quot;:&quot;-74.22213&quot;,\n   *      &quot;elevation:&quot;31.0&quot;,\n   *      &quot;timeZoneName&quot;:&quot;Eastern Standard Time&quot;,\n   *      &quot;timeZoneID&quot;:&quot;America/New_York&quot;,\n   *      &quot;timeZoneOffset&quot;:&quot;-5&quot;},\n   *    &quot;AstronomicalTimes&quot;:{\n   *     &quot;Sunrise&quot;:&quot;2007-02-18T06:45:27-05:00&quot;,\n   *     &quot;TemporalHour&quot;:&quot;PT54M17.529S&quot;\n   *     ...\n   *     }\n   * }\n   * </pre>\n   */\n  public static toJSON(astronomicalCalendar: AstronomicalCalendar): JsonOutput {\n    const json: JsonOutput = {\n      metadata: ZmanimFormatter.getOutputMetadata(astronomicalCalendar),\n    };\n    const key: string = ZmanimFormatter.getOutputKey(astronomicalCalendar);\n    json[key] = ZmanimFormatter.getZmanimOutput(astronomicalCalendar);\n\n    return json;\n  }\n\n  // @ts-ignore\n  private static getOutputKey(astronomicalCalendar: AstronomicalCalendar): string {\n    switch (true) {\n      case astronomicalCalendar instanceof ComplexZmanimCalendar:\n        return 'Zmanim';\n      case astronomicalCalendar instanceof ZmanimCalendar:\n        return 'BasicZmanim';\n      case astronomicalCalendar instanceof AstronomicalCalendar:\n        return 'AstronomicalTimes';\n    }\n  }\n\n  private static getOutputMetadata(astronomicalCalendar: AstronomicalCalendar): OutputMetadata {\n    const df: string = 'yyyy-MM-dd';\n\n    return {\n      date: astronomicalCalendar.getDate().toFormat(df),\n      type: astronomicalCalendar.getClassName(),\n      algorithm: astronomicalCalendar.getAstronomicalCalculator().getCalculatorName(),\n      location: astronomicalCalendar.getGeoLocation().getLocationName(),\n      latitude: astronomicalCalendar.getGeoLocation().getLatitude().toString(),\n      longitude: astronomicalCalendar.getGeoLocation().getLongitude().toString(),\n      elevation: ZmanimFormatter.formatDecimal(astronomicalCalendar.getGeoLocation().getElevation()),\n      timeZoneName: TimeZone.getDisplayName(astronomicalCalendar.getGeoLocation().getTimeZone(), astronomicalCalendar.getDate()),\n      timeZoneID: astronomicalCalendar.getGeoLocation().getTimeZone(),\n      timeZoneOffset: ZmanimFormatter.formatDecimal(TimeZone.getOffset(astronomicalCalendar.getGeoLocation().getTimeZone(),\n        astronomicalCalendar.getDate().valueOf()) / ZmanimFormatter.HOUR_MILLIS),\n    };\n  }\n\n  private static getZmanimOutput(astronomicalCalendar: AstronomicalCalendar): Record<string, string> {\n    const formatter: ZmanimFormatter = new ZmanimFormatter(ZmanimFormatter.XSD_DURATION_FORMAT, ZmanimFormatter.XSD_DATE_FORMAT,\n      astronomicalCalendar.getGeoLocation().getTimeZone());\n\n    const dateList: ZmanWithZmanDate[] = [];\n    let durationList: ZmanWithDuration[] = [];\n    const otherList: string[] = [];\n\n    // Get al the methods in the calendar\n    Utils.getAllMethodNames(astronomicalCalendar, true)\n      // Filter out methods that we don't want\n      .filter(method => includeMethod(method, astronomicalCalendar))\n      // Call each method and get the return values\n      .map(method => ({\n        methodName: method,\n        value: (astronomicalCalendar as any as Record<string, Function>)[method].call(astronomicalCalendar),\n      }))\n      // Filter for return values of type Date or number\n      .filter(methodObj => DateTime.isDateTime(methodObj.value) || typeof methodObj.value === 'number' || methodObj.value === null)\n      // Separate the Dates and numbers\n      .forEach(methodObj => {\n        const tagName: string = methodObj.methodName.substring(3);\n        if (DateTime.isDateTime(methodObj.value)) {\n          dateList.push(new Zman(methodObj.value as DateTime, tagName) as ZmanWithZmanDate);\n        } else if (typeof methodObj.value === 'number') {\n          durationList.push(new Zman(methodObj.value, tagName) as ZmanWithDuration);\n        } else {\n          otherList.push(tagName);\n        }\n      });\n\n    dateList.sort(Zman.compareDateOrder);\n    // Filter for values in milliseconds, and not values in minutes\n    durationList = durationList.filter((zman: ZmanWithDuration) => zman.duration > 1000)\n      .sort(Zman.compareDurationOrder);\n\n    const timesData: Record<string, string> = {};\n    dateList.forEach((zman: ZmanWithZmanDate) => {\n      timesData[zman.label as string] = formatter.formatDateTime(zman.zman);\n    });\n    durationList.forEach((zman: ZmanWithDuration) => {\n      timesData[zman.label as string] = formatter.format(Math.trunc(zman.duration));\n    });\n    otherList.forEach((tagName: string) => {\n      timesData[tagName] = 'N/A';\n    });\n\n    return timesData;\n  }\n}\n\n/**\n * Determines if a method should be output by the {@link #toJSON(AstronomicalCalendar)}\n *\n * @param {string} method - the method in question\n * @param {AstronomicalCalendar} astronomicalCalendar - The astronomical calendar, to be able to\n * check the parameterlist\n * @return if the method should be included in serialization\n */\nfunction includeMethod(method: string, astronomicalCalendar: AstronomicalCalendar): boolean {\n  if (methodWhitelist.includes(method)) return true;\n\n  // Filter out excluded methods\n  return !methodBlacklist.includes(method)\n    // Filter out methods with parameters since we don't know what value(s) to pass\n    && (astronomicalCalendar as any as Record<string, Function>)[method].length === 0\n    // Filter out methods that don't start with 'get'\n    && method.startsWith('get');\n}\n\nexport interface JsonOutput {\n  metadata: OutputMetadata\n\n  [key: string]: object;\n}\n\nexport interface OutputMetadata {\n  date: string;\n  type: string;\n  algorithm: string;\n  location: string | null;\n  latitude: string;\n  longitude: string;\n  elevation: string;\n  timeZoneName: string;\n  timeZoneID: string;\n  timeZoneOffset: string;\n}\n","import { GeoLocation } from './GeoLocation';\nimport { MathUtils } from '../polyfills/Utils';\n\n/**\n * A class for various location calculations\n * Most of the code in this class is ported from <a href=\"http://www.movable-type.co.uk/\">Chris Veness'</a>\n * <a href=\"http://www.fsf.org/licensing/licenses/lgpl.html\">LGPL</a> Javascript Implementation\n *\n * @author &copy; Eliyahu Hershfeld 2009 - 2020\n * @deprecated All methods in this class are available in the {@link GeoLocation} class, and this class that duplicates that\n * code will be removed in a future release.\n */\nexport class GeoLocationUtils {\n  /**\n   * Constant for a distance type calculation.\n   * @see #getGeodesicDistance(GeoLocation, GeoLocation)\n   */\n  private static readonly DISTANCE: number = 0;\n\n  /**\n   * Constant for an initial bearing type calculation.\n   * @see #getGeodesicInitialBearing(GeoLocation, GeoLocation)\n   */\n  private static readonly INITIAL_BEARING: number = 1;\n\n  /**\n   * Constant for a final bearing type calculation.\n   * @see #getGeodesicFinalBearing(GeoLocation, GeoLocation)\n   */\n  private static readonly FINAL_BEARING: number = 2;\n\n  /**\n   * Calculate the <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> initial bearing between this Object and\n   * a second Object passed to this method using <a href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus\n   * Vincenty's</a> inverse formula See T Vincenty, \"<a href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and\n   * Inverse Solutions of Geodesics on the Ellipsoid with application of nested equations</a>\", Survey Review, vol XXII\n   * no 176, 1975.\n   *\n   * @param location\n   *            the initial location\n   * @param destination\n   *            the destination location\n   * @return the geodesic bearing\n   */\n  public static getGeodesicInitialBearing(location: GeoLocation, destination: GeoLocation): number {\n    return GeoLocationUtils.vincentyFormula(location, destination, GeoLocationUtils.INITIAL_BEARING);\n  }\n\n  /**\n   * Calculate the <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> final bearing between this Object\n   * and a second Object passed to this method using <a href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a>\n   * inverse formula See T Vincenty, \"<a href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics\n   * on the Ellipsoid with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975.\n   *\n   * @param location\n   *            the initial location\n   * @param destination\n   *            the destination location\n   * @return the geodesic bearing\n   */\n  public static getGeodesicFinalBearing(location: GeoLocation, destination: GeoLocation): number {\n    return GeoLocationUtils.vincentyFormula(location, destination, GeoLocationUtils.FINAL_BEARING);\n  }\n\n  /**\n   * Calculate <a href=\"https://en.wikipedia.org/wiki/Great-circle_distance\">geodesic distance</a> in Meters\n   * between this Object and a second Object passed to this method using <a\n   * href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty,\n   * \"<a href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the\n   * Ellipsoid with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975. This uses the\n   * WGS-84 geodetic model.\n   * @param location\n   *            the initial location\n   * @param destination\n   *            the destination location\n   * @return the geodesic distance in Meters\n   */\n  public static getGeodesicDistance(location: GeoLocation, destination: GeoLocation): number {\n    return GeoLocationUtils.vincentyFormula(location, destination, GeoLocationUtils.DISTANCE);\n  }\n\n  /**\n   * Calculates the initial <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> bearing, final bearing or\n   * <a href=\"https://en.wikipedia.org/wiki/Great-circle_distance\">geodesic distance</a> using <a href=\n   * \"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty, \"<a\n   * href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the Ellipsoid\n   * with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975.\n   *\n   * @param location\n   *            the initial location\n   * @param destination\n   *            the destination location\n   * @param formula\n   *            This formula calculates initial bearing ({@link #INITIAL_BEARING}),\n   *            final bearing ({@link #FINAL_BEARING}) and distance ({@link #DISTANCE}).\n   * @return\n   *            the geodesic distance, initial or final bearing (based on the formula passed in) between the location\n   *            and destination in Meters\n   * @see #getGeodesicDistance(GeoLocation, GeoLocation)\n   * @see #getGeodesicInitialBearing(GeoLocation, GeoLocation)\n   * @see #getGeodesicFinalBearing(GeoLocation, GeoLocation)\n   */\n  private static vincentyFormula(location: GeoLocation, destination: GeoLocation, formula: number): number {\n    const a: number = 6378137; // length of semi-major axis of the ellipsoid (radius at equator) in metres based on WGS-84\n    const b: number = 6356752.3142; // length of semi-minor axis of the ellipsoid (radius at the poles) in meters based on WGS-84\n    const f: number = 1 / 298.257223563; // flattening of the ellipsoid based on WGS-84\n    const L: number = MathUtils.degreesToRadians(destination.getLongitude() - location.getLongitude()); // difference in longitude of two points;\n    const U1: number = Math.atan((1 - f) * Math.tan(MathUtils.degreesToRadians(location.getLatitude()))); // reduced latitude (latitude on the auxiliary sphere)\n    const U2: number = Math.atan((1 - f) * Math.tan(MathUtils.degreesToRadians(destination.getLatitude()))); // reduced latitude (latitude on the auxiliary sphere)\n\n    const sinU1: number = Math.sin(U1);\n    const cosU1: number = Math.cos(U1);\n    const sinU2: number = Math.sin(U2);\n    const cosU2: number = Math.cos(U2);\n\n    let lambda: number = L;\n    let lambdaP: number = 2 * Math.PI;\n    let iterLimit: number = 20;\n    let sinLambda: number = 0;\n    let cosLambda: number = 0;\n    let sinSigma: number = 0;\n    let cosSigma: number = 0;\n    let sigma: number = 0;\n    let sinAlpha: number = 0;\n    let cosSqAlpha: number = 0;\n    let cos2SigmaM: number = 0;\n    let C: number;\n\n    while (Math.abs(lambda - lambdaP) > 1e-12 && --iterLimit > 0) {\n      sinLambda = Math.sin(lambda);\n      cosLambda = Math.cos(lambda);\n      sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)\n        + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda)\n        * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));\n      if (sinSigma === 0) return 0; // co-incident points\n      cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;\n      sigma = Math.atan2(sinSigma, cosSigma);\n      sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;\n      cosSqAlpha = 1 - sinAlpha * sinAlpha;\n      cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;\n      if (Number.isNaN(cos2SigmaM)) cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (§6)\n      C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));\n      lambdaP = lambda;\n      lambda = L + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n    }\n    if (iterLimit === 0) return Number.NaN; // formula failed to converge\n\n    const uSq: number = cosSqAlpha * (a * a - b * b) / (b * b);\n    const A: number = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n    const B: number = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n    const deltaSigma: number = B * sinSigma * (cos2SigmaM + B / 4\n        * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM\n          * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n    const distance: number = b * A * (sigma - deltaSigma);\n\n    // initial bearing\n    const fwdAz: number = MathUtils.radiansToDegrees(Math.atan2(cosU2 * sinLambda, cosU1\n      * sinU2 - sinU1 * cosU2 * cosLambda));\n    // final bearing\n    const revAz: number = MathUtils.radiansToDegrees(Math.atan2(cosU1 * sinLambda, -sinU1\n      * cosU2 + cosU1 * sinU2 * cosLambda));\n    if (formula === GeoLocationUtils.DISTANCE) {\n      return distance;\n    } else if (formula === GeoLocationUtils.INITIAL_BEARING) {\n      return fwdAz;\n    } else if (formula === GeoLocationUtils.FINAL_BEARING) {\n      return revAz;\n    }\n    // should never happen\n    return Number.NaN;\n  }\n\n  /**\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Rhumb_line\">rhumb line</a>\n   * bearing from the current location to the GeoLocation passed in.\n   *\n   * @param location\n   *            the initial location\n   * @param destination\n   *            the destination location\n   * @return the bearing in degrees\n   */\n  public static getRhumbLineBearing(location: GeoLocation, destination: GeoLocation): number {\n    let dLon: number = MathUtils.degreesToRadians(destination.getLongitude() - location.getLongitude());\n    const dPhi: number = Math.log(Math.tan(MathUtils.degreesToRadians(destination.getLatitude())\n      / 2 + Math.PI / 4)\n      / Math.tan(MathUtils.degreesToRadians(location.getLatitude()) / 2 + Math.PI / 4));\n    if (Math.abs(dLon) > Math.PI) dLon = dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);\n    return MathUtils.radiansToDegrees(Math.atan2(dLon, dPhi));\n  }\n\n  /**\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Rhumb_line\">rhumb line</a> distance from the current\n   * location to the GeoLocation passed in. Ported from <a href=\"http://www.movable-type.co.uk/\">Chris Veness'</a>\n   * Javascript Implementation.\n   *\n   * @param location\n   *            the initial location\n   * @param destination\n   *            the destination location\n   * @return the distance in Meters\n   */\n  public static getRhumbLineDistance(location: GeoLocation, destination: GeoLocation): number {\n    const earthRadius: number = 6378137; // earth's mean radius in km\n    const dLat: number = MathUtils.degreesToRadians(location.getLatitude())\n      - MathUtils.degreesToRadians(destination.getLatitude());\n    let dLon: number = Math.abs(MathUtils.degreesToRadians(location.getLongitude())\n      - MathUtils.degreesToRadians(destination.getLongitude()));\n    const dPhi: number = Math.log(Math.tan(MathUtils.degreesToRadians(location.getLatitude()) / 2 + Math.PI / 4)\n      / Math.tan(MathUtils.degreesToRadians(destination.getLatitude()) / 2 + Math.PI / 4));\n\n    let q: number = dLat / dPhi;\n    if (!Number.isFinite(q)) {\n      q = Math.cos(MathUtils.degreesToRadians(destination.getLatitude()));\n    }\n\n    // if dLon over 180° take shorter rhumb across 180° meridian:\n    if (dLon > Math.PI) {\n      dLon = 2 * Math.PI - dLon;\n    }\n    const d: number = Math.sqrt(dLat * dLat + q * q * dLon * dLon);\n    return d * earthRadius;\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { GeoLocation } from './GeoLocation';\nimport { AstronomicalCalculator } from './AstronomicalCalculator';\nimport { MathUtils } from '../polyfills/Utils';\n\n/**\n * Implementation of sunrise and sunset methods to calculate astronomical times. This calculator uses the Java algorithm\n * written by <a href=\"https://web.archive.org/web/20090531215353/http://www.kevinboone.com/suntimes.html\">Kevin\n * Boone</a> that is based on the <a href = \"https://aa.usno.navy.mil/\">US Naval Observatory's</a><a\n * href=\"https://aa.usno.navy.mil/publications/asa\">Astronomical Almanac</a> and used with his permission. Added to Kevin's\n * code is adjustment of the zenith to account for elevation. This algorithm returns the same time every year and does not\n * account for leap years. It is not as accurate as the Jean Meeus based {@link NOAACalculator} that is the default calculator\n * use by the KosherJava <em>zmanim</em> library.\n *\n * @author &copy; Eliyahu Hershfeld 2004 - 2023\n * @author &copy; Kevin Boone 2000\n */\nexport class SunTimesCalculator extends AstronomicalCalculator {\n  /**\n   * Default constructor of the SunTimesCalculator.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor() {\n    super();\n  }\n\n  /**\n   * @see AstronomicalCalculator#getCalculatorName()\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public getCalculatorName(): string {\n    return 'US Naval Almanac Algorithm';\n  }\n\n  /**\n   * @see AstronomicalCalculator#getUTCSunrise(Calendar, GeoLocation, double, boolean)\n   */\n  public getUTCSunrise(date: DateTime, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number {\n    const elevation: number = adjustForElevation ? geoLocation.getElevation() : 0;\n    const adjustedZenith: number = this.adjustZenith(zenith, elevation);\n\n    return SunTimesCalculator.getTimeUTC(date, geoLocation, adjustedZenith, true);\n  }\n\n  /**\n   * @see AstronomicalCalculator#getUTCSunset(Calendar, GeoLocation, double, boolean)\n   */\n  public getUTCSunset(date: DateTime, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number {\n    const elevation: number = adjustForElevation ? geoLocation.getElevation() : 0;\n    const adjustedZenith: number = this.adjustZenith(zenith, elevation);\n\n    return SunTimesCalculator.getTimeUTC(date, geoLocation, adjustedZenith, false);\n  }\n\n  /**\n   * The number of degrees of longitude that corresponds to one hour of time difference.\n   */\n  private static readonly DEG_PER_HOUR: number = 360 / 24;\n\n  /**\n   * The sine in degrees.\n   * @param deg the degrees\n   * @return sin of the angle in degrees\n   */\n  private static sinDeg(deg: number): number {\n    // return Math.sin(deg * 2 * Math.PI / 360);\n    return Math.sin(MathUtils.degreesToRadians(deg));\n  }\n\n  /**\n   * Return the arc cosine in degrees.\n   * @param x angle\n   * @return acos of the angle in degrees\n   */\n  private static acosDeg(x: number): number {\n    // return Math.acos(x) * 360 / (2 * Math.PI);\n    return MathUtils.radiansToDegrees(Math.acos(x));\n  }\n\n  /**\n   * Return the arc sine in degrees.\n   * @param x angle\n   * @return asin of the angle in degrees\n   */\n  private static asinDeg(x: number): number {\n    // return Math.asin(x) * 360 / (2 * Math.PI);\n    return MathUtils.radiansToDegrees(Math.asin(x));\n  }\n\n  /**\n   * Return the tangent in degrees.\n   * @param deg degrees\n   * @return tan of the angle in degrees\n   */\n  private static tanDeg(deg: number): number {\n    // return Math.tan(deg * 2 * Math.PI / 360);\n    return Math.tan(MathUtils.degreesToRadians(deg));\n  }\n\n  /**\n   * Calculate cosine of the angle in degrees\n   *\n   * @param deg degrees\n   * @return cosine of the angle in degrees\n   */\n  private static cosDeg(deg: number): number {\n    // return Math.cos(deg * 2 * Math.PI / 360);\n    return Math.cos(MathUtils.degreesToRadians(deg));\n  }\n\n  /**\n   * Get time difference between location's longitude and the Meridian, in hours.\n   *\n   * @param longitude the longitude\n   * @return time difference between the location's longitude and the Meridian, in hours. West of Meridian has a negative time difference\n   */\n  private static getHoursFromMeridian(longitude: number): number {\n    return longitude / SunTimesCalculator.DEG_PER_HOUR;\n  }\n\n  /**\n   * Calculate the approximate time of sunset or sunrise in days since midnight Jan 1st, assuming 6am and 6pm events. We\n   * need this figure to derive the Sun's mean anomaly.\n   *\n   * @param dayOfYear the day of year\n   * @param hoursFromMeridian hours from the meridian\n   * @param isSunrise true for sunrise and false for sunset\n   *\n   * @return the approximate time of sunset or sunrise in days since midnight Jan 1st, assuming 6am and 6pm events. We\n   * need this figure to derive the Sun's mean anomaly.\n   */\n  private static getApproxTimeDays(dayOfYear: number, hoursFromMeridian: number, isSunrise: boolean): number {\n    if (isSunrise) {\n      return dayOfYear + ((6 - hoursFromMeridian) / 24);\n    }\n    // sunset\n    return dayOfYear + ((18 - hoursFromMeridian) / 24);\n  }\n\n  /**\n   * Calculate the Sun's mean anomaly in degrees, at sunrise or sunset, given the longitude in degrees\n   *\n   * @param dayOfYear the day of the year\n   * @param longitude longitude\n   * @param isSunrise true for sunrise and false for sunset\n   * @return the Sun's mean anomaly in degrees\n   */\n  private static getMeanAnomaly(dayOfYear: number, longitude: number, isSunrise: boolean): number {\n    return (0.9856 * SunTimesCalculator.getApproxTimeDays(dayOfYear, SunTimesCalculator.getHoursFromMeridian(longitude), isSunrise)) - 3.289;\n  }\n\n  /**\n   * Returns the Sun's true longitude in degrees.\n   * @param sunMeanAnomaly the Sun's mean anomaly in degrees\n   * @return the Sun's true longitude in degrees. The result is an angle &gt;= 0 and &lt;= 360.\n   */\n  private static getSunTrueLongitude(sunMeanAnomaly: number): number {\n    let l: number = sunMeanAnomaly + (1.916 * SunTimesCalculator.sinDeg(sunMeanAnomaly)) + (0.020 * SunTimesCalculator.sinDeg(2 * sunMeanAnomaly)) + 282.634;\n\n    // get longitude into 0-360 degree range\n    if (l >= 360) {\n      l = l - 360;\n    }\n    if (l < 0) {\n      l = l + 360;\n    }\n    return l;\n  }\n\n  /**\n   * Calculates the Sun's right ascension in hours.\n   * @param sunTrueLongitude the Sun's true longitude in degrees &gt; 0 and &lt; 360.\n   * @return the Sun's right ascension in hours in angles &gt; 0 and &lt; 360.\n   */\n  private static getSunRightAscensionHours(sunTrueLongitude: number): number {\n    const a: number = 0.91764 * SunTimesCalculator.tanDeg(sunTrueLongitude);\n    let ra: number = 360 / (2 * Math.PI) * Math.atan(a);\n\n    const lQuadrant: number = Math.floor(sunTrueLongitude / 90) * 90;\n    const raQuadrant: number = Math.floor(ra / 90) * 90;\n    ra += (lQuadrant - raQuadrant);\n\n    return ra / SunTimesCalculator.DEG_PER_HOUR; // convert to hours\n  }\n\n  /**\n   * Calculate the cosine of the Sun's local hour angle\n   *\n   * @param sunTrueLongitude the sun's true longitude\n   * @param latitude the latitude\n   * @param zenith the zenith\n   * @return the cosine of the Sun's local hour angle\n   */\n  private static getCosLocalHourAngle(sunTrueLongitude: number, latitude: number, zenith: number): number {\n    const sinDec: number = 0.39782 * SunTimesCalculator.sinDeg(sunTrueLongitude);\n    const cosDec: number = SunTimesCalculator.cosDeg(SunTimesCalculator.asinDeg(sinDec));\n    return (SunTimesCalculator.cosDeg(zenith) - (sinDec * SunTimesCalculator.sinDeg(latitude))) / (cosDec * SunTimesCalculator.cosDeg(latitude));\n  }\n\n  /**\n   * Calculate local mean time of rising or setting. By `local' is meant the exact time at the location, assuming that\n   * there were no time zone. That is, the time difference between the location and the Meridian depended entirely on\n   * the longitude. We can't do anything with this time directly; we must convert it to UTC and then to a local time.\n   * The result is expressed as a fractional number of hours since midnight\n   *\n   * @param localHour the local hour\n   * @param sunRightAscensionHours the sun's right ascension in hours\n   * @param approxTimeDays approximate time days\n   *\n   * @return the fractional number of hours since midnight as a double\n   */\n  private static getLocalMeanTime(localHour: number, sunRightAscensionHours: number, approxTimeDays: number): number {\n    return localHour + sunRightAscensionHours - (0.06571 * approxTimeDays) - 6.622;\n  }\n\n  /**\n   * Get sunrise or sunset time in UTC, according to flag. This time is returned as\n   * a double and is not adjusted for time-zone.\n   *\n   * @param calendar\n   *            the Calendar object to extract the day of year for calculation\n   * @param geoLocation\n   *            the GeoLocation object that contains the latitude and longitude\n   * @param zenith\n   *            Sun's zenith, in degrees\n   * @param isSunrise\n   *            True for sunrise and false for sunset.\n   * @return the time as a double. If an error was encountered in the calculation\n   *         (expected behavior for some locations such as near the poles,\n   *         {@link Double#NaN} will be returned.\n   */\n  private static getTimeUTC(date: DateTime, geoLocation: GeoLocation, zenith: number, isSunrise: boolean): number {\n    const dayOfYear: number = date.ordinal;\n    const sunMeanAnomaly: number = SunTimesCalculator.getMeanAnomaly(dayOfYear, geoLocation.getLongitude(), isSunrise);\n    const sunTrueLong: number = SunTimesCalculator.getSunTrueLongitude(sunMeanAnomaly);\n    const sunRightAscensionHours: number = SunTimesCalculator.getSunRightAscensionHours(sunTrueLong);\n    const cosLocalHourAngle: number = SunTimesCalculator.getCosLocalHourAngle(sunTrueLong, geoLocation.getLatitude(), zenith);\n\n    let localHourAngle: number;\n    if (isSunrise) {\n      localHourAngle = 360 - SunTimesCalculator.acosDeg(cosLocalHourAngle);\n    } else { // sunset\n      localHourAngle = SunTimesCalculator.acosDeg(cosLocalHourAngle);\n    }\n    const localHour: number = localHourAngle / SunTimesCalculator.DEG_PER_HOUR;\n\n    const localMeanTime: number = SunTimesCalculator.getLocalMeanTime(localHour, sunRightAscensionHours,\n        SunTimesCalculator.getApproxTimeDays(dayOfYear, SunTimesCalculator.getHoursFromMeridian(geoLocation.getLatitude()), isSunrise));\n    const processedTime = localMeanTime - SunTimesCalculator.getHoursFromMeridian(geoLocation.getLongitude());\n\n    return processedTime > 0 ? processedTime % 24 : (processedTime % 24) + 24; // ensure that the time is >= 0 and < 24\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n   * of <a href=\"https://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> for the given day at the given location\n   * on earth. This implementation returns solar noon as the time halfway between sunrise and sunset.\n   * {@link NOAACalculator}, the default calculator, returns true solar noon. See <a href=\n   * \"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition of Chatzos</a> for details on solar\n   * noon calculations.\n   * @see com.kosherjava.zmanim.util.AstronomicalCalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see NOAACalculator\n   *\n   * @param date\n   *            The Calendar representing the date to calculate solar noon for\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times.\n   * @return the time in minutes from zero UTC. If an error was encountered in the calculation (expected behavior for\n   *         some locations such as near the poles, {@link Double#NaN} will be returned.\n   */\n  public getUTCNoon(date: DateTime, geoLocation: GeoLocation): number {\n    const sunrise: number = this.getUTCSunrise(date, geoLocation, 90, false);\n    const sunset: number = this.getUTCSunset(date, geoLocation, 90, false);\n\n    let noon: number = (sunrise + ((sunset - sunrise) / 2));\n    if (noon < 0) noon += 12;\n    if (noon < sunrise) noon -= 12;\n\n    return noon;\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\n   * of midnight for the given day at the given location on earth. This implementation returns solar midnight as 12 hours\n   * after utc noon that is  halfway between sunrise and sunset.\n   * {@link NOAACalculator}, the default calculator, returns true solar noon. See <a href=\n   * \"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition of Chatzos</a> for details on solar\n   * noon calculations.\n   * @see com.kosherjava.zmanim.util.AstronomicalCalculator#getUTCNoon(Calendar, GeoLocation)\n   * @see NOAACalculator\n   *\n   * @param calendar\n   *            The Calendar representing the date to calculate solar noon for\n   * @param geoLocation\n   *            The location information used for astronomical calculating sun times.\n   * @return the time in minutes from zero UTC. If an error was encountered in the calculation (expected behavior for\n   *         some locations such as near the poles, {@link Double#NaN} will be returned.\n   */\n  public getUTCMidnight(date: DateTime, geoLocation: GeoLocation): number {\n    return this.getUTCNoon(date, geoLocation) + 12;\n  }\n}\n","/**\n * An Object representing a <em>daf</em> (page) in the <a href=\"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a> cycle.\n *\n * @author &copy; Eliyahu Hershfeld 2011 - 2023\n */\nexport class Daf {\n  /**\n   * See {@link #getMasechtaNumber()} and {@link #setMasechtaNumber(int)}.\n   */\n  private masechtaNumber: number;\n\n  /**\n   * See {@link #getDaf()} and {@link #setDaf(int)}.\n   */\n  private daf: number;\n\n  /**\n   * See {@link #getMasechtaTransliterated()} and {@link #setMasechtaTransliterated(String[])}.\n   */\n  private static masechtosBavliTransliterated: string[] = ['Berachos', 'Shabbos', 'Eruvin', 'Pesachim', 'Shekalim',\n    'Yoma', 'Sukkah', 'Beitzah', 'Rosh Hashana', 'Taanis', 'Megillah', 'Moed Katan', 'Chagigah', 'Yevamos',\n    'Kesubos', 'Nedarim', 'Nazir', 'Sotah', 'Gitin', 'Kiddushin', 'Bava Kamma', 'Bava Metzia', 'Bava Basra',\n    'Shevuos', 'Makkos', 'Sanhedrin', 'Avodah Zarah', 'Horiyos', 'Zevachim', 'Menachos', 'Chullin', 'Bechoros',\n    'Arachin', 'Temurah', 'Kerisos', 'Meilah', 'Kinnim', 'Tamid', 'Midos', 'Niddah'];\n\n  /**\n   * See {@link #getMasechta()}.\n   */\n  private static readonly masechtosBavli: string[] = ['\\u05D1\\u05E8\\u05DB\\u05D5\\u05EA', '\\u05E9\\u05D1\\u05EA',\n    '\\u05E2\\u05D9\\u05E8\\u05D5\\u05D1\\u05D9\\u05DF', '\\u05E4\\u05E1\\u05D7\\u05D9\\u05DD',\n    '\\u05E9\\u05E7\\u05DC\\u05D9\\u05DD', '\\u05D9\\u05D5\\u05DE\\u05D0', '\\u05E1\\u05D5\\u05DB\\u05D4',\n    '\\u05D1\\u05D9\\u05E6\\u05D4', '\\u05E8\\u05D0\\u05E9 \\u05D4\\u05E9\\u05E0\\u05D4',\n    '\\u05EA\\u05E2\\u05E0\\u05D9\\u05EA', '\\u05DE\\u05D2\\u05D9\\u05DC\\u05D4',\n    '\\u05DE\\u05D5\\u05E2\\u05D3 \\u05E7\\u05D8\\u05DF', '\\u05D7\\u05D2\\u05D9\\u05D2\\u05D4',\n    '\\u05D9\\u05D1\\u05DE\\u05D5\\u05EA', '\\u05DB\\u05EA\\u05D5\\u05D1\\u05D5\\u05EA', '\\u05E0\\u05D3\\u05E8\\u05D9\\u05DD',\n    '\\u05E0\\u05D6\\u05D9\\u05E8', '\\u05E1\\u05D5\\u05D8\\u05D4', '\\u05D2\\u05D9\\u05D8\\u05D9\\u05DF',\n    '\\u05E7\\u05D9\\u05D3\\u05D5\\u05E9\\u05D9\\u05DF', '\\u05D1\\u05D1\\u05D0 \\u05E7\\u05DE\\u05D0',\n    '\\u05D1\\u05D1\\u05D0 \\u05DE\\u05E6\\u05D9\\u05E2\\u05D0', '\\u05D1\\u05D1\\u05D0 \\u05D1\\u05EA\\u05E8\\u05D0',\n    '\\u05E1\\u05E0\\u05D4\\u05D3\\u05E8\\u05D9\\u05DF', '\\u05DE\\u05DB\\u05D5\\u05EA',\n    '\\u05E9\\u05D1\\u05D5\\u05E2\\u05D5\\u05EA', '\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4 \\u05D6\\u05E8\\u05D4',\n    '\\u05D4\\u05D5\\u05E8\\u05D9\\u05D5\\u05EA', '\\u05D6\\u05D1\\u05D7\\u05D9\\u05DD', '\\u05DE\\u05E0\\u05D7\\u05D5\\u05EA',\n    '\\u05D7\\u05D5\\u05DC\\u05D9\\u05DF', '\\u05D1\\u05DB\\u05D5\\u05E8\\u05D5\\u05EA', '\\u05E2\\u05E8\\u05DB\\u05D9\\u05DF',\n    '\\u05EA\\u05DE\\u05D5\\u05E8\\u05D4', '\\u05DB\\u05E8\\u05D9\\u05EA\\u05D5\\u05EA', '\\u05DE\\u05E2\\u05D9\\u05DC\\u05D4',\n    '\\u05E7\\u05D9\\u05E0\\u05D9\\u05DD', '\\u05EA\\u05DE\\u05D9\\u05D3', '\\u05DE\\u05D9\\u05D3\\u05D5\\u05EA',\n    '\\u05E0\\u05D3\\u05D4'];\n\n  /**\n   * See {@link #getYerushlmiMasechtaTransliterated()}.\n   */\n  private static masechtosYerushalmiTransliterated: string[] = ['Berachos', 'Pe\\'ah', 'Demai', 'Kilayim', 'Shevi\\'is',\n    'Terumos', 'Ma\\'asros', 'Ma\\'aser Sheni', 'Chalah', 'Orlah', 'Bikurim', 'Shabbos', 'Eruvin', 'Pesachim',\n    'Beitzah', 'Rosh Hashanah', 'Yoma', 'Sukah', 'Ta\\'anis', 'Shekalim', 'Megilah', 'Chagigah', 'Moed Katan',\n    'Yevamos', 'Kesuvos', 'Sotah', 'Nedarim', 'Nazir', 'Gitin', 'Kidushin', 'Bava Kama', 'Bava Metzia',\n    'Bava Basra', 'Sanhedrin', 'Makos', 'Shevuos', 'Avodah Zarah', 'Horayos', 'Nidah', 'No Daf Today'];\n\n  /**\n   * See {@link #getYerushalmiMasechta()}.\n   */\n  private static readonly masechtosYerushalmi: string[] = ['\\u05d1\\u05e8\\u05db\\u05d5\\u05ea', '\\u05e4\\u05d9\\u05d0\\u05d4',\n    '\\u05d3\\u05de\\u05d0\\u05d9', '\\u05db\\u05dc\\u05d0\\u05d9\\u05dd', '\\u05e9\\u05d1\\u05d9\\u05e2\\u05d9\\u05ea',\n    '\\u05ea\\u05e8\\u05d5\\u05de\\u05d5\\u05ea', '\\u05de\\u05e2\\u05e9\\u05e8\\u05d5\\u05ea', '\\u05de\\u05e2\\u05e9\\u05e8 \\u05e9\\u05e0\\u05d9',\n    '\\u05d7\\u05dc\\u05d4', '\\u05e2\\u05d5\\u05e8\\u05dc\\u05d4', '\\u05d1\\u05d9\\u05db\\u05d5\\u05e8\\u05d9\\u05dd',\n    '\\u05e9\\u05d1\\u05ea', '\\u05e2\\u05d9\\u05e8\\u05d5\\u05d1\\u05d9\\u05df', '\\u05e4\\u05e1\\u05d7\\u05d9\\u05dd',\n    '\\u05d1\\u05d9\\u05e6\\u05d4', '\\u05e8\\u05d0\\u05e9 \\u05d4\\u05e9\\u05e0\\u05d4', '\\u05d9\\u05d5\\u05de\\u05d0',\n    '\\u05e1\\u05d5\\u05db\\u05d4', '\\u05ea\\u05e2\\u05e0\\u05d9\\u05ea', '\\u05e9\\u05e7\\u05dc\\u05d9\\u05dd', '\\u05de\\u05d2\\u05d9\\u05dc\\u05d4',\n    '\\u05d7\\u05d2\\u05d9\\u05d2\\u05d4', '\\u05de\\u05d5\\u05e2\\u05d3 \\u05e7\\u05d8\\u05df', '\\u05d9\\u05d1\\u05de\\u05d5\\u05ea',\n    '\\u05db\\u05ea\\u05d5\\u05d1\\u05d5\\u05ea', '\\u05e1\\u05d5\\u05d8\\u05d4', '\\u05e0\\u05d3\\u05e8\\u05d9\\u05dd', '\\u05e0\\u05d6\\u05d9\\u05e8',\n    '\\u05d2\\u05d9\\u05d8\\u05d9\\u05df', '\\u05e7\\u05d9\\u05d3\\u05d5\\u05e9\\u05d9\\u05df', '\\u05d1\\u05d1\\u05d0 \\u05e7\\u05de\\u05d0',\n    '\\u05d1\\u05d1\\u05d0 \\u05de\\u05e6\\u05d9\\u05e2\\u05d0', '\\u05d1\\u05d1\\u05d0 \\u05d1\\u05ea\\u05e8\\u05d0',\n    '\\u05e9\\u05d1\\u05d5\\u05e2\\u05d5\\u05ea', '\\u05de\\u05db\\u05d5\\u05ea', '\\u05e1\\u05e0\\u05d4\\u05d3\\u05e8\\u05d9\\u05df',\n    '\\u05e2\\u05d1\\u05d5\\u05d3\\u05d4 \\u05d6\\u05e8\\u05d4', '\\u05d4\\u05d5\\u05e8\\u05d9\\u05d5\\u05ea', '\\u05e0\\u05d9\\u05d3\\u05d4',\n    '\\u05d0\\u05d9\\u05df \\u05d3\\u05e3 \\u05d4\\u05d9\\u05d5\\u05dd'];\n\n  /**\n   * Gets the <em>masechta</em> number of the currently set <em>Daf</em>. The sequence is: Berachos, Shabbos, Eruvin,\n   * Pesachim, Shekalim, Yoma, Sukkah, Beitzah, Rosh Hashana, Taanis, Megillah, Moed Katan, Chagigah, Yevamos, Kesubos,\n   * Nedarim, Nazir, Sotah, Gitin, Kiddushin, Bava Kamma, Bava Metzia, Bava Basra, Sanhedrin, Makkos, Shevuos, Avodah\n   * Zarah, Horiyos, Zevachim, Menachos, Chullin, Bechoros, Arachin, Temurah, Kerisos, Meilah, Kinnim, Tamid, Midos and\n   * Niddah.\n   * @return the masechtaNumber.\n   * @see #setMasechtaNumber(int)\n   */\n  public getMasechtaNumber(): number {\n    return this.masechtaNumber;\n  }\n\n  /**\n   * Set the <em>masechta</em> number in the order of the Daf Yomi. The sequence is: Berachos, Shabbos, Eruvin, Pesachim,\n   * Shekalim, Yoma, Sukkah, Beitzah, Rosh Hashana, Taanis, Megillah, Moed Katan, Chagigah, Yevamos, Kesubos, Nedarim,\n   * Nazir, Sotah, Gitin, Kiddushin, Bava Kamma, Bava Metzia, Bava Basra, Sanhedrin, Makkos, Shevuos, Avodah Zarah,\n   * Horiyos, Zevachim, Menachos, Chullin, Bechoros, Arachin, Temurah, Kerisos, Meilah, Kinnim, Tamid, Midos and\n   * Niddah.\n   *\n   * @param masechtaNumber\n   *            the <em>masechta</em> number in the order of the Daf Yomi to set.\n   */\n  public setMasechtaNumber(masechtaNumber: number): void {\n    this.masechtaNumber = masechtaNumber;\n  }\n\n  /**\n   * Constructor that creates a Daf setting the {@link #setMasechtaNumber(int) <em>masechta</em> number} and\n   * {@link #setDaf(int) <em>daf</em> number}.\n   *\n   * @param masechtaNumber the <em>masechta</em> number in the order of the Daf Yomi to set as the current <em>masechta</em>.\n   * @param daf the <em>daf</em> (page) number to set.\n   */\n  constructor(masechtaNumber: number, daf: number) {\n    this.masechtaNumber = masechtaNumber;\n    this.daf = daf;\n  }\n\n  /**\n   * Returns the <em>daf</em> (page) number of the Daf Yomi.\n   * @return the <em>daf</em> (page) number of the Daf Yomi.\n   */\n  public getDaf(): number {\n    return this.daf;\n  }\n\n  /**\n   * Sets the <em>daf</em> (page) number of the Daf Yomi.\n   * @param daf the <em>daf</em> (page) number.\n   */\n  public setDaf(daf: number): void {\n    this.daf = daf;\n  }\n\n  /**\n   * Returns the transliterated name of the <em>masechta</em> (tractate) of the Daf Yomi. The list of <em>mashechtos</em>\n   * is: Berachos, Shabbos, Eruvin, Pesachim, Shekalim, Yoma, Sukkah, Beitzah, Rosh Hashana, Taanis, Megillah, Moed Katan,\n   * Chagigah, Yevamos, Kesubos, Nedarim, Nazir, Sotah, Gitin, Kiddushin, Bava Kamma, Bava Metzia, Bava Basra, Sanhedrin,\n   * Makkos, Shevuos, Avodah Zarah, Horiyos, Zevachim, Menachos, Chullin, Bechoros, Arachin, Temurah, Kerisos, Meilah,\n   * Kinnim, Tamid, Midos and Niddah.\n   *\n   * @return the transliterated name of the <em>masechta</em> (tractate) of the Daf Yomi such as Berachos.\n   * @see #setMasechtaTransliterated(String[])\n   */\n  public getMasechtaTransliterated(): string {\n    return Daf.masechtosBavliTransliterated[this.masechtaNumber];\n  }\n\n  /**\n   * Setter method to allow overriding of the default list of <em>masechtos</em> transliterated into Latin chars.\n   * The default values use Ashkenazi American English transliteration.\n   *\n   * @param masechtosBavliTransliterated the list of transliterated Bavli <em>masechtos</em> to set.\n   * @see #getMasechtaTransliterated()\n   */\n  public static setMasechtaTransliterated(masechtosBavliTransliterated: string[]): void {\n    Daf.masechtosBavliTransliterated = masechtosBavliTransliterated;\n  }\n\n  /**\n   * Returns the <em>masechta</em> (tractate) of the Daf Yomi in Hebrew. The list is in the following format<br>\n   * <code>[\"&#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA;\",\n   * \"&#x05E9;&#x05D1;&#x05EA;\", \"&#x05E2;&#x05D9;&#x05E8;&#x05D5;&#x05D1;&#x05D9;&#x05DF;\",\n   * \"&#x05E4;&#x05E1;&#x05D7;&#x05D9;&#x05DD;\", \"&#x05E9;&#x05E7;&#x05DC;&#x05D9;&#x05DD;\", \"&#x05D9;&#x05D5;&#x05DE;&#x05D0;\",\n   * \"&#x05E1;&#x05D5;&#x05DB;&#x05D4;\", \"&#x05D1;&#x05D9;&#x05E6;&#x05D4;\", \"&#x05E8;&#x05D0;&#x05E9; &#x05D4;&#x05E9;&#x05E0;&#x05D4;\",\n   * \"&#x05EA;&#x05E2;&#x05E0;&#x05D9;&#x05EA;\", \"&#x05DE;&#x05D2;&#x05D9;&#x05DC;&#x05D4;\", \"&#x05DE;&#x05D5;&#x05E2;&#x05D3;\n   * &#x05E7;&#x05D8;&#x05DF;\", \"&#x05D7;&#x05D2;&#x05D9;&#x05D2;&#x05D4;\", \"&#x05D9;&#x05D1;&#x05DE;&#x05D5;&#x05EA;\",\n   * \"&#x05DB;&#x05EA;&#x05D5;&#x05D1;&#x05D5;&#x05EA;\", \"&#x05E0;&#x05D3;&#x05E8;&#x05D9;&#x05DD;\",\"&#x05E0;&#x05D6;&#x05D9;&#x05E8;\",\n   * \"&#x05E1;&#x05D5;&#x05D8;&#x05D4;\", \"&#x05D2;&#x05D9;&#x05D8;&#x05D9;&#x05DF;\", \"&#x05E7;&#x05D9;&#x05D3;&#x05D5;&#x05E9;&#x05D9;&#x05DF;\",\n   * \"&#x05D1;&#x05D1;&#x05D0; &#x05E7;&#x05DE;&#x05D0;\", \"&#x05D1;&#x05D1;&#x05D0; &#x05DE;&#x05E6;&#x05D9;&#x05E2;&#x05D0;\",\n   * \"&#x05D1;&#x05D1;&#x05D0; &#x05D1;&#x05EA;&#x05E8;&#x05D0;\", \"&#x05E1;&#x05E0;&#x05D4;&#x05D3;&#x05E8;&#x05D9;&#x05DF;\",\n   * \"&#x05DE;&#x05DB;&#x05D5;&#x05EA;\", \"&#x05E9;&#x05D1;&#x05D5;&#x05E2;&#x05D5;&#x05EA;\", \"&#x05E2;&#x05D1;&#x05D5;&#x05D3;&#x05D4;\n   * &#x05D6;&#x05E8;&#x05D4;\", \"&#x05D4;&#x05D5;&#x05E8;&#x05D9;&#x05D5;&#x05EA;\", \"&#x05D6;&#x05D1;&#x05D7;&#x05D9;&#x05DD;\",\n   * \"&#x05DE;&#x05E0;&#x05D7;&#x05D5;&#x05EA;\", \"&#x05D7;&#x05D5;&#x05DC;&#x05D9;&#x05DF;\", \"&#x05D1;&#x05DB;&#x05D5;&#x05E8;&#x05D5;&#x05EA;\",\n   * \"&#x05E2;&#x05E8;&#x05DB;&#x05D9;&#x05DF;\", \"&#x05EA;&#x05DE;&#x05D5;&#x05E8;&#x05D4;\", \"&#x05DB;&#x05E8;&#x05D9;&#x05EA;&#x05D5;&#x05EA;\",\n   * \"&#x05DE;&#x05E2;&#x05D9;&#x05DC;&#x05D4;\", \"&#x05E7;&#x05D9;&#x05E0;&#x05D9;&#x05DD;\", \"&#x05EA;&#x05DE;&#x05D9;&#x05D3;\",\n   * \"&#x05DE;&#x05D9;&#x05D3;&#x05D5;&#x05EA;\", \"&#x05E0;&#x05D3;&#x05D4;\"]</code>.\n   *\n   * @return the <em>masechta</em> (tractate) of the Daf Yomi in Hebrew. As an example, it will return\n   *         &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos.\n   */\n  public getMasechta(): string {\n    return Daf.masechtosBavli[this.masechtaNumber];\n  }\n\n  /**\n   * Returns the transliterated name of the <em>masechta</em> (tractate) of the Daf Yomi in Yerushalmi. The list of\n   * <em>mashechtos</em> is:\n   * Berachos, Pe'ah, Demai, Kilayim, Shevi'is, Terumos, Ma'asros, Ma'aser Sheni, Chalah, Orlah, Bikurim,\n   * Shabbos, Eruvin, Pesachim, Beitzah, Rosh Hashanah, Yoma, Sukah, Ta'anis, Shekalim, Megilah, Chagigah,\n   * Moed Katan, Yevamos, Kesuvos, Sotah, Nedarim, Nazir, Gitin, Kidushin, Bava Kama, Bava Metzia,\n   * Bava Basra, Shevuos, Makos, Sanhedrin, Avodah Zarah, Horayos, Nidah and No Daf Today.\n   *\n   * @return the transliterated name of the <em>masechta</em> (tractate) of the Daf Yomi such as Berachos.\n   */\n  public getYerushalmiMasechtaTransliterated(): string {\n    return Daf.masechtosYerushalmiTransliterated[this.masechtaNumber];\n  }\n\n  /**\n   * @see #getYerushalmiMasechtaTransliterated()\n   * @deprecated misspelled method name to be removed.\n   * @return the transliterated name of the <em>masechta</em> (tractate) of the Daf Yomi such as Berachos.\n   */\n  public getYerushlmiMasechtaTransliterated(): string {\n    return this.getYerushalmiMasechtaTransliterated();\n  }\n\n  /**\n   * Setter method to allow overriding of the default list of Yerushalmi <em>masechtos</em> transliterated into Latin chars.\n   * The default uses Ashkenazi American English transliteration.\n   *\n   * @param masechtosYerushalmiTransliterated the list of transliterated Yerushalmi <em>masechtos</em> to set.\n   */\n  public static setYerushalmiMasechtaTransliterated(masechtosYerushalmiTransliterated: string[]): void {\n    Daf.masechtosYerushalmiTransliterated = masechtosYerushalmiTransliterated;\n  }\n\n  /**\n   * @see #setYerushalmiMasechtaTransliterated(String[])\n   * @deprecated misspelled method name to be removed.\n   * @param masechtosYerushalmiTransliterated the list of transliterated Yerushalmi <em>masechtos</em> to set.\n   */\n  public static setYerushlmiMasechtaTransliterated(masechtosYerushalmiTransliterated: string[]): void {\n    Daf.setYerushalmiMasechtaTransliterated(masechtosYerushalmiTransliterated);\n  }\n\n  /**\n   * Getter method to allow retrieving the list of Yerushalmi masechtos transliterated into Latin chars.\n   * The default uses Ashkenazi American English transliteration.\n   *\n   * @return the array of transliterated masechta (tractate) names of the Daf Yomi Yerushalmi.\n   */\n  public static getYerushalmiMasechtosTransliterated(): string[] {\n    return Daf.masechtosYerushalmiTransliterated;\n  }\n\n  /**\n   * @see #getYerushalmiMasechtosTransliterated()\n   * @deprecated misspelled method name to be removed.\n   * @return the array of transliterated <em>masechta</em> (tractate) names of the Daf Yomi Yerushalmi.\n   */\n  public static getYerushlmiMasechtosTransliterated(): string[] {\n    return Daf.getYerushalmiMasechtosTransliterated();\n  }\n\n  /**\n   * Getter method to allow retrieving the list of Yerushalmi masechtos.\n   *\n   * @return the array of Hebrew masechta (tractate) names of the Daf Yomi Yerushalmi.\n   */\n  public static getYerushalmiMasechtos(): string[] {\n    return Daf.masechtosYerushalmi;\n  }\n\n  /**\n   * @see #getYerushalmiMasechtos()\n   * @deprecated misspelled method name to be removed in 3.0.0.\n   * @return the array of Hebrew <em>masechta</em> (tractate) names of the Daf Yomi Yerushalmi.\n   */\n  public static getYerushlmiMasechtos(): string[] {\n    return Daf.getYerushalmiMasechtos();\n  }\n\n  /**\n   * Returns the Yerushlmi masechta (tractate) of the Daf Yomi in Hebrew, It will return\n   * &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos.\n   *\n   * @return the Yerushalmi masechta (tractate) of the Daf Yomi in Hebrew, It will return\n   *         &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos.\n   */\n  public getYerushalmiMasechta(): string {\n    return Daf.masechtosYerushalmi[this.masechtaNumber];\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { Calendar } from '../polyfills/Utils';\nimport { Daf } from './Daf';\nimport { JewishCalendar } from './JewishCalendar';\nimport { IllegalArgumentException } from '../polyfills/errors';\n\n/**\n * This class calculates the Daf Yomi Bavli page (daf) for a given date. To calculate Daf Yomi Yerushalmi\n * use the {@link YerushalmiYomiCalculator}. The library may cover Mishna Yomi etc. at some point in the future.\n *\n * @author &copy; Bob Newell (original C code)\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\n * @version 0.0.1\n */\nexport class YomiCalculator {\n  /**\n   * The start date of the first Daf Yomi Bavli cycle of September 11, 1923 / Rosh Hashana 5684.\n   */\n  private static readonly dafYomiStartDate: DateTime = DateTime.fromObject({\n    year: 1923,\n    month: Calendar.SEPTEMBER + 1,\n    day: 11,\n  });\n\n  /** The start date of the first Daf Yomi Bavli cycle in the Julian calendar. Used internally for calculations. */\n  private static readonly dafYomiJulianStartDay: number = YomiCalculator.getJulianDay(YomiCalculator.dafYomiStartDate);\n\n  /**\n   * The date that the pagination for the Daf Yomi <em>Maseches Shekalim</em> changed to use the commonly used Vilna\n   * Shas pagination from the no longer commonly available Zhitomir / Slavuta Shas used by Rabbi Meir Shapiro.\n   */\n  private static readonly shekalimChangeDate: DateTime = DateTime.fromObject({ year: 1975, month: Calendar.JUNE + 1, day: 24 });\n\n  /** The Julian date that the cycle for Shekalim changed.\n   * @see #getDafYomiBavli(JewishCalendar) for details.\n   */\n  private static readonly shekalimJulianChangeDay: number = YomiCalculator.getJulianDay(YomiCalculator.shekalimChangeDate);\n\n  /**\n   * Default constructor.\n   */\n/*\n  public YomiCalculator() {\n    // nothing here\n  }\n*/\n\n  /**\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Daf_yomi\">Daf Yomi</a> <a\n   * href=\"https://en.wikipedia.org/wiki/Talmud\">Bavli</a> {@link Daf} for a given date. The first Daf Yomi cycle\n   * started on Rosh Hashana 5684 (September 11, 1923) and calculations prior to this date will result in an\n   * IllegalArgumentException thrown. For historical calculations (supported by this method), it is important to note\n   * that a change in length of the cycle was instituted starting in the eighth Daf Yomi cycle beginning on June 24,\n   * 1975. The Daf Yomi Bavli cycle has a single masechta of the Talmud Yerushalmi - Shekalim as part of the cycle.\n   * Unlike the Bavli where the number of daf per masechta was standardized since the original <a\n   * href=\"https://en.wikipedia.org/wiki/Daniel_Bomberg\">Bomberg Edition</a> published from 1520 - 1523, there is no\n   * uniform page length in the Yerushalmi. The early cycles had the Yerushalmi Shekalim length of 13 days following the\n   * <a href=\n   * \"https://he.wikipedia.org/wiki/%D7%93%D7%A4%D7%95%D7%A1_%D7%A1%D7%9C%D7%90%D7%95%D7%95%D7%99%D7%98%D7%90\">Slavuta/Zhytomyr</a>\n   * Shas used by <a href=\"https://en.wikipedia.org/wiki/Meir_Shapiro\">Rabbi Meir Shapiro</a>. With the start of the eighth Daf Yomi\n   * cycle beginning on June 24, 1975, the length of the Yerushalmi Shekalim was changed from 13 to 22 daf to follow\n   * the <a href=\"https://en.wikipedia.org/wiki/Vilna_Edition_Shas\">Vilna Shas</a> that is in common use today.\n   *\n   * @param calendar\n   *            the calendar date for calculation\n   * @return the {@link Daf}.\n   *\n   * @throws IllegalArgumentException\n   *             if the date is prior to the September 11, 1923, the start date of the first Daf Yomi cycle\n   */\n  public static getDafYomiBavli(calendar: JewishCalendar): Daf {\n    /*\n     * The number of daf per masechta. Since the number of blatt in Shekalim changed on the 8th Daf Yomi cycle\n     * beginning on June 24, 1975, from 13 to 22, the actual calculation for blattPerMasechta[4] will later be\n     * adjusted based on the cycle.\n     */\n    const blattPerMasechta: number[] = [64, 157, 105, 121, 22, 88, 56, 40, 35, 31, 32, 29, 27, 122, 112, 91, 66, 49, 90, 82,\n      119, 119, 176, 113, 24, 49, 76, 14, 120, 110, 142, 61, 34, 34, 28, 22, 4, 9, 5, 73];\n\n    const date: DateTime = calendar.getDate();\n\n    let dafYomi: Daf;\n    const julianDay: number = this.getJulianDay(date);\n    let cycleNo: number;\n    let dafNo: number;\n    if (date < YomiCalculator.dafYomiStartDate) {\n      // TODO: should we return a null or throw an IllegalArgumentException?\n      throw new IllegalArgumentException(`${calendar} is prior to organized Daf Yomi Bavli cycles that started on ${YomiCalculator.dafYomiStartDate}`);\n    }\n    if ((date > YomiCalculator.shekalimChangeDate) || date.equals(YomiCalculator.shekalimChangeDate)) {\n      cycleNo = 8 + ((julianDay - YomiCalculator.shekalimJulianChangeDay) / 2711);\n      dafNo = ((julianDay - YomiCalculator.shekalimJulianChangeDay) % 2711);\n    } else {\n      cycleNo = 1 + ((julianDay - YomiCalculator.dafYomiJulianStartDay) / 2702);\n      dafNo = ((julianDay - YomiCalculator.dafYomiJulianStartDay) % 2702);\n    }\n\n    let total: number = 0;\n    let masechta: number = -1;\n    let blatt: number;\n\n    /* Fix Shekalim for old cycles. */\n    if (cycleNo <= 7) {\n      blattPerMasechta[4] = 13;\n    }\n    /* Finally find the daf. */\n    // eslint-disable-next-line no-restricted-syntax\n    for (const blattInMasechta of blattPerMasechta) {\n      masechta++;\n      total = total + blattInMasechta - 1;\n      if (dafNo < total) {\n        blatt = 1 + blattInMasechta - (total - dafNo);\n        /* Fiddle with the weird ones near the end. */\n        if (masechta === 36) {\n          blatt += 21;\n        } else if (masechta === 37) {\n          blatt += 24;\n        } else if (masechta === 38) {\n          blatt += 32;\n        }\n        dafYomi = new Daf(masechta, blatt);\n        break;\n      }\n    }\n\n    return dafYomi!;\n  }\n\n  /**\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian day</a> from a Java Date.\n   *\n   * @param date\n   *            The Java Date\n   * @return the Julian day number corresponding to the date\n   */\n  private static getJulianDay(date: DateTime): number {\n    let { year, month } = date;\n    const { day } = date;\n\n    if (month <= 2) {\n      year -= 1;\n      month += 12;\n    }\n\n    const a: number = Math.trunc(year / 100);\n    const b: number = 2 - a + Math.trunc(a / 4);\n    return Math.trunc(Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5);\n  }\n}\n","import { DateTime, Interval } from 'luxon';\n\nimport { Calendar } from '../polyfills/Utils';\nimport { Daf } from './Daf';\nimport { JewishCalendar } from './JewishCalendar';\nimport { IllegalArgumentException } from '../polyfills/errors';\n\n/**\n * This class calculates the <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud\">Talmud Yerusalmi</a> <a href=\n * \"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a> page ({@link Daf}) for the given date.\n *\n * @author &copy; elihaidv\n * @author &copy; Eliyahu Hershfeld 2017 - 2019\n */\nexport class YerushalmiYomiCalculator {\n  /**\n   * The start date of the first Daf Yomi Yerushalmi cycle of February 2, 1980 / 15 Shevat, 5740.\n   */\n  private static readonly DAF_YOMI_START_DAY: DateTime = DateTime.fromObject({\n    year: 1980,\n    month: Calendar.FEBRUARY + 1,\n    day: 2,\n  });\n\n  /** The number of pages in the Talmud Yerushalmi. */\n  private static readonly WHOLE_SHAS_DAFS: number = 1554;\n\n  /** The number of pages per <em>masechta</em> (tractate). */\n  private static readonly BLATT_PER_MASECHTA: number[] = [68, 37, 34, 44, 31, 59, 26, 33, 28, 20, 13, 92, 65, 71, 22,\n    22, 42, 26, 26, 33, 34, 22, 19, 85, 72, 47, 40, 47, 54, 48, 44, 37, 34, 44, 9, 57, 37, 19, 13];\n\n  /**\n   * Default constructor.\n   */\n/*\n  public YerushalmiYomiCalculator() {\n    // nothing here\n  }\n*/\n\n  /**\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a>\n   * <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud\">Yerusalmi</a> page ({@link Daf}) for the given date.\n   * The first Daf Yomi cycle started on 15 Shevat (Tu Bishvat), 5740 (February, 2, 1980) and calculations\n   * prior to this date will result in an IllegalArgumentException thrown. A null will be returned on Tisha B'Av or\n   * Yom Kippur.\n   *\n   * @param jewishCalendar\n   *            the calendar date for calculation\n   * @return the {@link Daf} or null if the date is on Tisha B'Av or Yom Kippur.\n   *\n   * @throws IllegalArgumentException\n   *             if the date is prior to the February 2, 1980, the start of the first Daf Yomi Yerushalmi cycle\n   */\n  public static getDafYomiYerushalmi(jewishCalendar: JewishCalendar): Daf | null {\n    let nextCycle: DateTime = YerushalmiYomiCalculator.DAF_YOMI_START_DAY;\n    let prevCycle: DateTime = YerushalmiYomiCalculator.DAF_YOMI_START_DAY;\n    const requested: DateTime = jewishCalendar.getDate();\n    let masechta: number = 0;\n    let dafYomi: Daf;\n\n    // There is no Daf Yomi on Yom Kippur or Tisha B'Av.\n    if (jewishCalendar.getYomTovIndex() === JewishCalendar.YOM_KIPPUR || jewishCalendar.getYomTovIndex() === JewishCalendar.TISHA_BEAV) {\n      return null;\n    }\n\n    if (requested < YerushalmiYomiCalculator.DAF_YOMI_START_DAY) {\n      throw new IllegalArgumentException(`${requested} is prior to organized Daf Yomi Yerushalmi cycles that started on ${YerushalmiYomiCalculator.DAF_YOMI_START_DAY}`);\n    }\n\n    // Start to calculate current cycle. Initialize the start day\n    // nextCycle = YerushalmiYomiCalculator.DAF_YOMI_START_DAY;\n\n    // Go cycle by cycle, until we get the next cycle\n    while (requested > nextCycle) {\n      prevCycle = nextCycle;\n\n      // Adds the number of whole shas dafs, and then the number of days that not have daf.\n      nextCycle = nextCycle.plus({ days: YerushalmiYomiCalculator.WHOLE_SHAS_DAFS });\n      // This needs to be a separate step\n      nextCycle = nextCycle.plus({ days: YerushalmiYomiCalculator.getNumOfSpecialDays(prevCycle, nextCycle) });\n    }\n\n    // Get the number of days from cycle start until request.\n    const dafNo: number = requested.diff(prevCycle, ['days']).days;\n\n    // Get the number of special days to subtract\n    const specialDays: number = YerushalmiYomiCalculator.getNumOfSpecialDays(prevCycle, requested);\n    let total: number = dafNo - specialDays;\n\n    // Finally find the daf.\n    // TODO:\n    // eslint-disable-next-line no-restricted-syntax\n    for (const blattInMasechta of YerushalmiYomiCalculator.BLATT_PER_MASECHTA) {\n      if (total <= blattInMasechta) {\n        dafYomi = new Daf(masechta, total + 1);\n        break;\n      }\n      total -= blattInMasechta;\n      masechta++;\n    }\n\n    return dafYomi!;\n  }\n\n  /**\n   * Return the number of special days (Yom Kippur and Tisha Beav, where there are no dafim), between the start date\n   * (as a <code>Calendar</code>) and end date (also as a <code>Calendar</code>).\n   * @param start - start date to calculate from\n   * @param end - end date to calculate at\n   * @return the number of special days between the start and end dates\n   */\n  private static getNumOfSpecialDays(start: DateTime, end: DateTime): number {\n    // Find the start and end Jewish years\n    const jewishStartYear: number = new JewishCalendar(start).getJewishYear();\n    const jewishEndYear: number = new JewishCalendar(end).getJewishYear();\n\n    // Value to return\n    let specialDays: number = 0;\n\n    // Instant of special dates\n    const yomKippur: JewishCalendar = new JewishCalendar(jewishStartYear, 7, 10);\n    const tishaBeav: JewishCalendar = new JewishCalendar(jewishStartYear, 5, 9);\n\n    // Go over the years and find special dates\n    for (let i: number = jewishStartYear; i <= jewishEndYear; i++) {\n      yomKippur.setJewishYear(i);\n      tishaBeav.setJewishYear(i);\n\n      const interval = Interval.fromDateTimes(start, end);\n      if (interval.contains(yomKippur.getDate())) specialDays++;\n      if (interval.contains(tishaBeav.getDate())) specialDays++;\n    }\n\n    return specialDays;\n  }\n}\n","import { DateTimeFormatOptions } from 'luxon';\n\nimport { Daf } from './Daf';\nimport { JewishDate } from './JewishDate';\nimport { JewishCalendar, Parsha } from './JewishCalendar';\nimport { IllegalArgumentException } from '../polyfills/errors';\n\n/**\n * The HebrewDateFormatter class formats a {@link JewishDate}.\n *\n * The class formats Jewish dates, numbers, Daf Yomi</em> (<em>Bavli and Yerushalmi), the Omer</em>,\n * <em>Parshas Hashavua</em>, (including special <em>parshiyos</em> of <em>Shekalim</em>, <em>Zachor</em>, <em>Parah</em>,\n * and <em>Hachodesh</em>), Yomim Tovim and the Molad (experimental) in Hebrew or Latin chars, and has various settings.\n * Sample full date output includes (using various options):\n * <ul>\n * <li>21 Shevat, 5729</li>\n * <li>&#x5DB;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;&#x5D8;</li>\n * <li>&#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5D4;&#x5F3;&#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;</li>\n * <li>&#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x05E4; or\n * &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x05E3;</li>\n * <li>&#x05DB;&#x05F3; &#x05E9;&#x05D1;&#x05D8; &#x05D5;&#x05F3; &#x05D0;&#x05DC;&#x05E4;&#x05D9;&#x05DD;</li>\n * </ul>\n *\n * @see JewishDate\n * @see JewishCalendar\n *\n * @author &copy; Eliyahu Hershfeld 2011 - 2015\n */\nexport class HebrewDateFormatter {\n  /**\n   * See {@link #isHebrewFormat()} and {@link #setHebrewFormat(boolean)}.\n   */\n  private hebrewFormat: boolean = false;\n\n  /**\n   * See {@link #isUseLongHebrewYears()} and {@link #setUseLongHebrewYears(boolean)}.\n   */\n  private useLonghebrewYears: boolean = false;\n\n  /**\n   * See {@link #isUseGershGershayim()} and {@link #setUseGershGershayim(boolean)}.\n   */\n\n  private useGershGershayim: boolean = true;\n  /**\n   * See {@link #isLongWeekFormat()} and {@link #setLongWeekFormat(boolean)}.\n   */\n\n  private longWeekFormat: boolean = true;\n  /**\n   * See {@link #isUseFinalFormLetters()} and {@link #setUseFinalFormLetters(boolean)}.\n   */\n\n  private useFinalFormLetters: boolean = false;\n\n  /**\n   * The internal DateFormat.&nbsp; See {@link #isLongWeekFormat()} and {@link #setLongWeekFormat(boolean)}.\n   */\n  private weekFormat: DateTimeFormatOptions | null = { weekday: 'long' };\n\n  /**\n   * List of transliterated parshiyos using the default <em>Ashkenazi</em> pronounciation.&nbsp; The formatParsha method uses this\n   * for transliterated <em>parsha</em> formatting.&nbsp; This list can be overridden (for <em>Sephardi</em> English transliteration for\n   * example) by setting the {@link #setTransliteratedParshiosList(EnumMap)}.&nbsp; The list includes double and special\n   * <em>parshiyos</em> is set as \"<em>Bereshis, Noach, Lech Lecha, Vayera, Chayei Sara, Toldos, Vayetzei, Vayishlach, Vayeshev, Miketz,\n   * Vayigash, Vayechi, Shemos, Vaera, Bo, Beshalach, Yisro, Mishpatim, Terumah, Tetzaveh, Ki Sisa, Vayakhel, Pekudei,\n   * Vayikra, Tzav, Shmini, Tazria, Metzora, Achrei Mos, Kedoshim, Emor, Behar, Bechukosai, Bamidbar, Nasso, Beha'aloscha,\n   * Sh'lach, Korach, Chukas, Balak, Pinchas, Matos, Masei, Devarim, Vaeschanan, Eikev, Re'eh, Shoftim, Ki Seitzei, Ki Savo,\n   * Nitzavim, Vayeilech, Ha'Azinu, Vezos Habracha, Vayakhel Pekudei, Tazria Metzora, Achrei Mos Kedoshim, Behar Bechukosai,\n   * Chukas Balak, Matos Masei, Nitzavim Vayeilech, Shekalim, Zachor, Parah, Hachodesh,Shuva, Shira, Hagadol, Chazon, Nachamu</em>\".\n   *\n   * @see #formatParsha(JewishCalendar)\n   */\n  private transliteratedParshaMap: Record<Parsha, string> = {\n    [Parsha.NONE]: '',\n    [Parsha.BERESHIS]: 'Bereshis',\n    [Parsha.NOACH]: 'Noach',\n    [Parsha.LECH_LECHA]: 'Lech Lecha',\n    [Parsha.VAYERA]: 'Vayera',\n    [Parsha.CHAYEI_SARA]: 'Chayei Sara',\n    [Parsha.TOLDOS]: 'Toldos',\n    [Parsha.VAYETZEI]: 'Vayetzei',\n    [Parsha.VAYISHLACH]: 'Vayishlach',\n    [Parsha.VAYESHEV]: 'Vayeshev',\n    [Parsha.MIKETZ]: 'Miketz',\n    [Parsha.VAYIGASH]: 'Vayigash',\n    [Parsha.VAYECHI]: 'Vayechi',\n    [Parsha.SHEMOS]: 'Shemos',\n    [Parsha.VAERA]: 'Vaera',\n    [Parsha.BO]: 'Bo',\n    [Parsha.BESHALACH]: 'Beshalach',\n    [Parsha.YISRO]: 'Yisro',\n    [Parsha.MISHPATIM]: 'Mishpatim',\n    [Parsha.TERUMAH]: 'Terumah',\n    [Parsha.TETZAVEH]: 'Tetzaveh',\n    [Parsha.KI_SISA]: 'Ki Sisa',\n    [Parsha.VAYAKHEL]: 'Vayakhel',\n    [Parsha.PEKUDEI]: 'Pekudei',\n    [Parsha.VAYIKRA]: 'Vayikra',\n    [Parsha.TZAV]: 'Tzav',\n    [Parsha.SHMINI]: 'Shmini',\n    [Parsha.TAZRIA]: 'Tazria',\n    [Parsha.METZORA]: 'Metzora',\n    [Parsha.ACHREI_MOS]: 'Achrei Mos',\n    [Parsha.KEDOSHIM]: 'Kedoshim',\n    [Parsha.EMOR]: 'Emor',\n    [Parsha.BEHAR]: 'Behar',\n    [Parsha.BECHUKOSAI]: 'Bechukosai',\n    [Parsha.BAMIDBAR]: 'Bamidbar',\n    [Parsha.NASSO]: 'Nasso',\n    [Parsha.BEHAALOSCHA]: 'Beha\\'aloscha',\n    [Parsha.SHLACH]: 'Sh\\'lach',\n    [Parsha.KORACH]: 'Korach',\n    [Parsha.CHUKAS]: 'Chukas',\n    [Parsha.BALAK]: 'Balak',\n    [Parsha.PINCHAS]: 'Pinchas',\n    [Parsha.MATOS]: 'Matos',\n    [Parsha.MASEI]: 'Masei',\n    [Parsha.DEVARIM]: 'Devarim',\n    [Parsha.VAESCHANAN]: 'Vaeschanan',\n    [Parsha.EIKEV]: 'Eikev',\n    [Parsha.REEH]: 'Re\\'eh',\n    [Parsha.SHOFTIM]: 'Shoftim',\n    [Parsha.KI_SEITZEI]: 'Ki Seitzei',\n    [Parsha.KI_SAVO]: 'Ki Savo',\n    [Parsha.NITZAVIM]: 'Nitzavim',\n    [Parsha.VAYEILECH]: 'Vayeilech',\n    [Parsha.HAAZINU]: 'Ha\\'Azinu',\n    [Parsha.VZOS_HABERACHA]: 'Vezos Habracha',\n    [Parsha.VAYAKHEL_PEKUDEI]: 'Vayakhel Pekudei',\n    [Parsha.TAZRIA_METZORA]: 'Tazria Metzora',\n    [Parsha.ACHREI_MOS_KEDOSHIM]: 'Achrei Mos Kedoshim',\n    [Parsha.BEHAR_BECHUKOSAI]: 'Behar Bechukosai',\n    [Parsha.CHUKAS_BALAK]: 'Chukas Balak',\n    [Parsha.MATOS_MASEI]: 'Matos Masei',\n    [Parsha.NITZAVIM_VAYEILECH]: 'Nitzavim Vayeilech',\n    [Parsha.SHKALIM]: 'Shekalim',\n    [Parsha.ZACHOR]: 'Zachor',\n    [Parsha.PARA]: 'Parah',\n    [Parsha.HACHODESH]: 'Hachodesh',\n    [Parsha.SHUVA]: 'Shuva',\n    [Parsha.SHIRA]: 'Shira',\n    [Parsha.HAGADOL]: 'Hagadol',\n    [Parsha.CHAZON]: 'Chazon',\n    [Parsha.NACHAMU]: 'Nachamu',\n  };\n\n  /**\n   * Unicode {@link Record} of Hebrew <em>parshiyos</em>.&nbsp; The list includes double and special <em>parshiyos</em> and\n   * contains <code>\"&#x05D1;&#x05E8;&#x05D0;&#x05E9;&#x05D9;&#x05EA;, &#x05E0;&#x05D7;, &#x05DC;&#x05DA; &#x05DC;&#x05DA;,\n   *  &#x05D5;&#x05D9;&#x05E8;&#x05D0;, &#x05D7;&#x05D9;&#x05D9; &#x05E9;&#x05E8;&#x05D4;,\n   *  &#x05EA;&#x05D5;&#x05DC;&#x05D3;&#x05D5;&#x05EA;, &#x05D5;&#x05D9;&#x05E6;&#x05D0;, &#x05D5;&#x05D9;&#x05E9;&#x05DC;&#x05D7;,\n   *  &#x05D5;&#x05D9;&#x05E9;&#x05D1;, &#x05DE;&#x05E7;&#x05E5;, &#x05D5;&#x05D9;&#x05D2;&#x05E9;, &#x05D5;&#x05D9;&#x05D7;&#x05D9;,\n   *  &#x05E9;&#x05DE;&#x05D5;&#x05EA;, &#x05D5;&#x05D0;&#x05E8;&#x05D0;, &#x05D1;&#x05D0;, &#x05D1;&#x05E9;&#x05DC;&#x05D7;,\n   *  &#x05D9;&#x05EA;&#x05E8;&#x05D5;, &#x05DE;&#x05E9;&#x05E4;&#x05D8;&#x05D9;&#x05DD;, &#x05EA;&#x05E8;&#x05D5;&#x05DE;&#x05D4;,\n   *  &#x05EA;&#x05E6;&#x05D5;&#x05D4;, &#x05DB;&#x05D9; &#x05EA;&#x05E9;&#x05D0;, &#x05D5;&#x05D9;&#x05E7;&#x05D4;&#x05DC;,\n   *  &#x05E4;&#x05E7;&#x05D5;&#x05D3;&#x05D9;, &#x05D5;&#x05D9;&#x05E7;&#x05E8;&#x05D0;, &#x05E6;&#x05D5;,\n   *  &#x05E9;&#x05DE;&#x05D9;&#x05E0;&#x05D9;, &#x05EA;&#x05D6;&#x05E8;&#x05D9;&#x05E2;, &#x05DE;&#x05E6;&#x05E8;&#x05E2;,\n   *  &#x05D0;&#x05D7;&#x05E8;&#x05D9; &#x05DE;&#x05D5;&#x05EA;, &#x05E7;&#x05D3;&#x05D5;&#x05E9;&#x05D9;&#x05DD;,\n   *  &#x05D0;&#x05DE;&#x05D5;&#x05E8;, &#x05D1;&#x05D4;&#x05E8;, &#x05D1;&#x05D7;&#x05E7;&#x05EA;&#x05D9;,\n   *  &#x05D1;&#x05DE;&#x05D3;&#x05D1;&#x05E8;, &#x05E0;&#x05E9;&#x05D0;, &#x05D1;&#x05D4;&#x05E2;&#x05DC;&#x05EA;&#x05DA;,\n   *  &#x05E9;&#x05DC;&#x05D7; &#x05DC;&#x05DA;, &#x05E7;&#x05E8;&#x05D7;, &#x05D7;&#x05D5;&#x05E7;&#x05EA;, &#x05D1;&#x05DC;&#x05E7;,\n   *  &#x05E4;&#x05D9;&#x05E0;&#x05D7;&#x05E1;, &#x05DE;&#x05D8;&#x05D5;&#x05EA;, &#x05DE;&#x05E1;&#x05E2;&#x05D9;,\n   *  &#x05D3;&#x05D1;&#x05E8;&#x05D9;&#x05DD;, &#x05D5;&#x05D0;&#x05EA;&#x05D7;&#x05E0;&#x05DF;, &#x05E2;&#x05E7;&#x05D1;,\n   *  &#x05E8;&#x05D0;&#x05D4;, &#x05E9;&#x05D5;&#x05E4;&#x05D8;&#x05D9;&#x05DD;, &#x05DB;&#x05D9; &#x05EA;&#x05E6;&#x05D0;,\n   *  &#x05DB;&#x05D9; &#x05EA;&#x05D1;&#x05D5;&#x05D0;, &#5D9;&#x05E6;&#x05D1;&#x05D9;&#x05DD;, &#x05D5;&#x05D9;&#x05DC;&#x05DA;,\n   *  &#x05D4;&#x05D0;&#x05D6;&#x05D9;&#x05E0;&#x05D5;, &#x05D5;&#x05D6;&#x05D0;&#x05EA; &#x05D4;&#x05D1;&#x05E8;&#x05DB;&#x05D4;,\n   *  &#x05D5;&#x05D9;&#x05E7;&#x05D4;&#x05DC; &#x05E4;&#x05E7;&#x05D5;&#x05D3;&#x05D9;, &#x05EA;&#x05D6;&#x05E8;&#x05D9;&#x05E2;\n   *  &#x05DE;&#x05E6;&#x05E8;&#x05E2;, &#x05D0;&#x05D7;&#x05E8;&#x05D9; &#x05DE;&#x05D5;&#x05EA;\n   *  &#x05E7;&#x05D3;&#x05D5;&#x05E9;&#x05D9;&#x05DD;, &#x05D1;&#x05D4;&#x05E8; &#x05D1;&#x05D7;&#x05E7;&#x05EA;&#x05D9;,\n   *  &#x05D7;&#x05D5;&#x05E7;&#x05EA; &#x05D1;&#x05DC;&#x05E7;, &#x05DE;&#x05D8;&#x05D5;&#x05EA; &#x05DE;&#x05E1;&#x05E2;&#x05D9;,\n   *  &#x05E0;&#x05E6;&#x05D1;&#x05D9;&#x05DD; &#x05D5;&#x05D9;&#x05DC;&#x05DA;, &#x05E9;&#x05E7;&#x05DC;&#x05D9;&#x05DD;,\n   *  &#x05D6;&#x05DB;&#x05D5;&#x05E8;, &#x05E4;&#x05E8;&#x05D4;, &#x05D4;&#x05D7;&#x05D3;&#x05E9;,\n   *  &#x05E9;&#x05D5;&#x05D1;&#x05D4;,&#x05E9;&#x05D9;&#x05E8;&#x05D4;,&#x05D4;&#x05D2;&#x05D3;&#x05D5;&#x05DC;,\n   *  &#x05D7;&#x05D6;&#x05D5;&#x05DF;,&#x05E0;&#x05D7;&#x05DE;&#x05D5;\"</code>\n   */\n  private readonly hebrewParshaMap: Record<Parsha, string> = {\n    [Parsha.NONE]: '',\n    [Parsha.BERESHIS]: '\\u05D1\\u05E8\\u05D0\\u05E9\\u05D9\\u05EA',\n    [Parsha.NOACH]: '\\u05E0\\u05D7',\n    [Parsha.LECH_LECHA]: '\\u05DC\\u05DA \\u05DC\\u05DA',\n    [Parsha.VAYERA]: '\\u05D5\\u05D9\\u05E8\\u05D0',\n    [Parsha.CHAYEI_SARA]: '\\u05D7\\u05D9\\u05D9 \\u05E9\\u05E8\\u05D4',\n    [Parsha.TOLDOS]: '\\u05EA\\u05D5\\u05DC\\u05D3\\u05D5\\u05EA',\n    [Parsha.VAYETZEI]: '\\u05D5\\u05D9\\u05E6\\u05D0',\n    [Parsha.VAYISHLACH]: '\\u05D5\\u05D9\\u05E9\\u05DC\\u05D7',\n    [Parsha.VAYESHEV]: '\\u05D5\\u05D9\\u05E9\\u05D1',\n    [Parsha.MIKETZ]: '\\u05DE\\u05E7\\u05E5',\n    [Parsha.VAYIGASH]: '\\u05D5\\u05D9\\u05D2\\u05E9',\n    [Parsha.VAYECHI]: '\\u05D5\\u05D9\\u05D7\\u05D9',\n    [Parsha.SHEMOS]: '\\u05E9\\u05DE\\u05D5\\u05EA',\n    [Parsha.VAERA]: '\\u05D5\\u05D0\\u05E8\\u05D0',\n    [Parsha.BO]: '\\u05D1\\u05D0',\n    [Parsha.BESHALACH]: '\\u05D1\\u05E9\\u05DC\\u05D7',\n    [Parsha.YISRO]: '\\u05D9\\u05EA\\u05E8\\u05D5',\n    [Parsha.MISHPATIM]: '\\u05DE\\u05E9\\u05E4\\u05D8\\u05D9\\u05DD',\n    [Parsha.TERUMAH]: '\\u05EA\\u05E8\\u05D5\\u05DE\\u05D4',\n    [Parsha.TETZAVEH]: '\\u05EA\\u05E6\\u05D5\\u05D4',\n    [Parsha.KI_SISA]: '\\u05DB\\u05D9 \\u05EA\\u05E9\\u05D0',\n    [Parsha.VAYAKHEL]: '\\u05D5\\u05D9\\u05E7\\u05D4\\u05DC',\n    [Parsha.PEKUDEI]: '\\u05E4\\u05E7\\u05D5\\u05D3\\u05D9',\n    [Parsha.VAYIKRA]: '\\u05D5\\u05D9\\u05E7\\u05E8\\u05D0',\n    [Parsha.TZAV]: '\\u05E6\\u05D5',\n    [Parsha.SHMINI]: '\\u05E9\\u05DE\\u05D9\\u05E0\\u05D9',\n    [Parsha.TAZRIA]: '\\u05EA\\u05D6\\u05E8\\u05D9\\u05E2',\n    [Parsha.METZORA]: '\\u05DE\\u05E6\\u05E8\\u05E2',\n    [Parsha.ACHREI_MOS]: '\\u05D0\\u05D7\\u05E8\\u05D9 \\u05DE\\u05D5\\u05EA',\n    [Parsha.KEDOSHIM]: '\\u05E7\\u05D3\\u05D5\\u05E9\\u05D9\\u05DD',\n    [Parsha.EMOR]: '\\u05D0\\u05DE\\u05D5\\u05E8',\n    [Parsha.BEHAR]: '\\u05D1\\u05D4\\u05E8',\n    [Parsha.BECHUKOSAI]: '\\u05D1\\u05D7\\u05E7\\u05EA\\u05D9',\n    [Parsha.BAMIDBAR]: '\\u05D1\\u05DE\\u05D3\\u05D1\\u05E8',\n    [Parsha.NASSO]: '\\u05E0\\u05E9\\u05D0',\n    [Parsha.BEHAALOSCHA]: '\\u05D1\\u05D4\\u05E2\\u05DC\\u05EA\\u05DA',\n    [Parsha.SHLACH]: '\\u05E9\\u05DC\\u05D7 \\u05DC\\u05DA',\n    [Parsha.KORACH]: '\\u05E7\\u05E8\\u05D7',\n    [Parsha.CHUKAS]: '\\u05D7\\u05D5\\u05E7\\u05EA',\n    [Parsha.BALAK]: '\\u05D1\\u05DC\\u05E7',\n    [Parsha.PINCHAS]: '\\u05E4\\u05D9\\u05E0\\u05D7\\u05E1',\n    [Parsha.MATOS]: '\\u05DE\\u05D8\\u05D5\\u05EA',\n    [Parsha.MASEI]: '\\u05DE\\u05E1\\u05E2\\u05D9',\n    [Parsha.DEVARIM]: '\\u05D3\\u05D1\\u05E8\\u05D9\\u05DD',\n    [Parsha.VAESCHANAN]: '\\u05D5\\u05D0\\u05EA\\u05D7\\u05E0\\u05DF',\n    [Parsha.EIKEV]: '\\u05E2\\u05E7\\u05D1',\n    [Parsha.REEH]: '\\u05E8\\u05D0\\u05D4',\n    [Parsha.SHOFTIM]: '\\u05E9\\u05D5\\u05E4\\u05D8\\u05D9\\u05DD',\n    [Parsha.KI_SEITZEI]: '\\u05DB\\u05D9 \\u05EA\\u05E6\\u05D0',\n    [Parsha.KI_SAVO]: '\\u05DB\\u05D9 \\u05EA\\u05D1\\u05D5\\u05D0',\n    [Parsha.NITZAVIM]: '\\u05E0\\u05E6\\u05D1\\u05D9\\u05DD',\n    [Parsha.VAYEILECH]: '\\u05D5\\u05D9\\u05DC\\u05DA',\n    [Parsha.HAAZINU]: '\\u05D4\\u05D0\\u05D6\\u05D9\\u05E0\\u05D5',\n    [Parsha.VZOS_HABERACHA]: '\\u05D5\\u05D6\\u05D0\\u05EA \\u05D4\\u05D1\\u05E8\\u05DB\\u05D4 ',\n    [Parsha.VAYAKHEL_PEKUDEI]: '\\u05D5\\u05D9\\u05E7\\u05D4\\u05DC \\u05E4\\u05E7\\u05D5\\u05D3\\u05D9',\n    [Parsha.TAZRIA_METZORA]: '\\u05EA\\u05D6\\u05E8\\u05D9\\u05E2 \\u05DE\\u05E6\\u05E8\\u05E2',\n    [Parsha.ACHREI_MOS_KEDOSHIM]: '\\u05D0\\u05D7\\u05E8\\u05D9 \\u05DE\\u05D5\\u05EA \\u05E7\\u05D3\\u05D5\\u05E9\\u05D9\\u05DD',\n    [Parsha.BEHAR_BECHUKOSAI]: '\\u05D1\\u05D4\\u05E8 \\u05D1\\u05D7\\u05E7\\u05EA\\u05D9',\n    [Parsha.CHUKAS_BALAK]: '\\u05D7\\u05D5\\u05E7\\u05EA \\u05D1\\u05DC\\u05E7',\n    [Parsha.MATOS_MASEI]: '\\u05DE\\u05D8\\u05D5\\u05EA \\u05DE\\u05E1\\u05E2\\u05D9',\n    [Parsha.NITZAVIM_VAYEILECH]: '\\u05E0\\u05E6\\u05D1\\u05D9\\u05DD \\u05D5\\u05D9\\u05DC\\u05DA',\n    [Parsha.SHKALIM]: '\\u05E9\\u05E7\\u05DC\\u05D9\\u05DD',\n    [Parsha.ZACHOR]: '\\u05D6\\u05DB\\u05D5\\u05E8',\n    [Parsha.PARA]: '\\u05E4\\u05E8\\u05D4',\n    [Parsha.HACHODESH]: '\\u05D4\\u05D7\\u05D3\\u05E9',\n    [Parsha.SHUVA]: '\\u05E9\\u05D5\\u05D1\\u05D4',\n    [Parsha.SHIRA]: '\\u05E9\\u05D9\\u05E8\\u05D4',\n    [Parsha.HAGADOL]: '\\u05D4\\u05D2\\u05D3\\u05D5\\u05DC',\n    [Parsha.CHAZON]: '\\u05D7\\u05D6\\u05D5\\u05DF',\n    [Parsha.NACHAMU]: '\\u05E0\\u05D7\\u05DE\\u05D5',\n  };\n\n  /**\n   * returns if the {@link #formatDayOfWeek(JewishDate)} will use the long format such as\n   * &#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF; or short such as &#x05D0; when formatting the day of week in\n   * {@link #isHebrewFormat() Hebrew}.\n   *\n   * @return the longWeekFormat\n   * @see #setLongWeekFormat(boolean)\n   * @see #formatDayOfWeek(JewishDate)\n   */\n  public isLongWeekFormat(): boolean {\n    return this.longWeekFormat;\n  }\n\n  /**\n   * Setting to control if the {@link #formatDayOfWeek(JewishDate)} will use the long format such as\n   * &#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF; or short such as &#x05D0; when formatting the day of week in\n   * {@link #isHebrewFormat() Hebrew}.\n   *\n   * @param longWeekFormat\n   *            the longWeekFormat to set\n   */\n  public setLongWeekFormat(longWeekFormat: boolean): void {\n    this.longWeekFormat = longWeekFormat;\n\n    this.weekFormat = {\n      weekday: longWeekFormat ? 'long' : 'short',\n    };\n  }\n\n  /**\n   * The <a href=\"https://en.wikipedia.org/wiki/Geresh#Punctuation_mark\">gersh</a> character is the &#x05F3; char\n   * that is similar to a single quote and is used in formatting Hebrew numbers.\n   */\n  private static readonly GERESH: string = '\\u05F3';\n\n  /**\n   * The <a href=\"https://en.wikipedia.org/wiki/Gershayim#Punctuation_mark\">gershyim</a> character is the &#x05F4; char\n   * that is similar to a double quote and is used in formatting Hebrew numbers.\n   */\n  private static readonly GERSHAYIM: string = '\\u05F4';\n\n  /**\n   * Transliterated month names.&nbsp; Defaults to [\"Nissan\", \"Iyar\", \"Sivan\", \"Tammuz\", \"Av\", \"Elul\", \"Tishrei\", \"Cheshvan\",\n   * \"Kislev\", \"Teves\", \"Shevat\", \"Adar\", \"Adar II\", \"Adar I\" ].\n   * @see #getTransliteratedMonthList()\n   * @see #setTransliteratedMonthList(String[])\n   */\n  private transliteratedMonths: string[] = ['Nissan', 'Iyar', 'Sivan', 'Tammuz', 'Av', 'Elul', 'Tishrei', 'Cheshvan',\n    'Kislev', 'Teves', 'Shevat', 'Adar', 'Adar II', 'Adar I'];\n\n  /**\n   * The Hebrew omer prefix charachter. It defaults to &#x05D1; producing &#x05D1;&#x05E2;&#x05D5;&#x05DE;&#x05E8;,\n   * but can be set to &#x05DC; to produce &#x05DC;&#x05E2;&#x05D5;&#x05DE;&#x05E8; (or any other prefix).\n   * @see #getHebrewOmerPrefix()\n   * @see #setHebrewOmerPrefix(String)\n   */\n  private hebrewOmerPrefix: string = '\\u05D1';\n\n  /**\n   * The default value for formatting Shabbos (Saturday).&nbsp; Defaults to Shabbos.\n   * @see #getTransliteratedShabbosDayOfWeek()\n   * @see #setTransliteratedShabbosDayOfWeek(String)\n   */\n  private transliteratedShabbosDayOfWeek: string = 'Shabbos';\n\n  /**\n   * Returns the day of Shabbos transliterated into Latin chars. The default uses Ashkenazi pronunciation \"Shabbos\".\n   * This can be overwritten using the {@link #setTransliteratedShabbosDayOfWeek(String)}\n   *\n   * @return the transliteratedShabbos. The default list of months uses Ashkenazi pronunciation \"Shabbos\".\n   * @see #setTransliteratedShabbosDayOfWeek(String)\n   * @see #formatDayOfWeek(JewishDate)\n   */\n  public getTransliteratedShabbosDayOfWeek(): string {\n    return this.transliteratedShabbosDayOfWeek;\n  }\n\n  /**\n   * Setter to override the default transliterated name of \"Shabbos\" to alternate spelling such as \"Shabbat\" used by\n   * the {@link #formatDayOfWeek(JewishDate)}\n   *\n   * @param transliteratedShabbos\n   *            the transliteratedShabbos to set\n   *\n   * @see #getTransliteratedShabbosDayOfWeek()\n   * @see #formatDayOfWeek(JewishDate)\n   */\n  public setTransliteratedShabbosDayOfWeek(transliteratedShabbos: string): void {\n    this.transliteratedShabbosDayOfWeek = transliteratedShabbos;\n  }\n\n  /**\n   * See {@link #getTransliteratedHolidayList()} and {@link #setTransliteratedHolidayList(String[])}.\n   */\n  private transliteratedHolidays: string[] = ['Erev Pesach', 'Pesach', 'Chol Hamoed Pesach', 'Pesach Sheni',\n    'Erev Shavuos', 'Shavuos', 'Seventeenth of Tammuz', 'Tishah B\\'Av', 'Tu B\\'Av', 'Erev Rosh Hashana',\n    'Rosh Hashana', 'Fast of Gedalyah', 'Erev Yom Kippur', 'Yom Kippur', 'Erev Succos', 'Succos',\n    'Chol Hamoed Succos', 'Hoshana Rabbah', 'Shemini Atzeres', 'Simchas Torah', 'Erev Chanukah', 'Chanukah',\n    'Tenth of Teves', 'Tu B\\'Shvat', 'Fast of Esther', 'Purim', 'Shushan Purim', 'Purim Katan', 'Rosh Chodesh',\n    'Yom HaShoah', 'Yom Hazikaron', 'Yom Ha\\'atzmaut', 'Yom Yerushalayim', 'Lag B\\'Omer', 'Shushan Purim Katan',\n    'Isru Chag'];\n\n  /**\n   * Returns the array of holidays transliterated into Latin chars. This is used by the\n   * {@link #formatYomTov(JewishCalendar)} when formatting the Yom Tov String. The default list of months uses\n   * Ashkenazi pronunciation in typical American English spelling.\n   *\n   * @return the array of transliterated holidays. The default list is currently [\"Erev Pesach\", \"Pesach\",\n   *         \"Chol Hamoed Pesach\", \"Pesach Sheni\", \"Erev Shavuos\", \"Shavuos\", \"Seventeenth of Tammuz\", \"Tishah B'Av\",\n   *         \"Tu B'Av\", \"Erev Rosh Hashana\", \"Rosh Hashana\", \"Fast of Gedalyah\", \"Erev Yom Kippur\", \"Yom Kippur\",\n   *         \"Erev Succos\", \"Succos\", \"Chol Hamoed Succos\", \"Hoshana Rabbah\", \"Shemini Atzeres\", \"Simchas Torah\",\n   *         \"Erev Chanukah\", \"Chanukah\", \"Tenth of Teves\", \"Tu B'Shvat\", \"Fast of Esther\", \"Purim\", \"Shushan Purim\",\n   *         \"Purim Katan\", \"Rosh Chodesh\", \"Yom HaShoah\", \"Yom Hazikaron\", \"Yom Ha'atzmaut\", \"Yom Yerushalayim\",\n   *         \"Lag B'Omer\",\"Shushan Purim Katan\", \"Isru Chag\"].\n   *\n   * @see #setTransliteratedMonthList(String[])\n   * @see #formatYomTov(JewishCalendar)\n   * @see #isHebrewFormat()\n   */\n  public getTransliteratedHolidayList(): string[] {\n    return this.transliteratedHolidays;\n  }\n\n  /**\n   * Sets the array of holidays transliterated into Latin chars. This is used by the\n   * {@link #formatYomTov(JewishCalendar)} when formatting the Yom Tov String.\n   *\n   * @param transliteratedHolidays\n   *            the transliteratedHolidays to set. Ensure that the sequence exactly matches the list returned by the\n   *            default\n   */\n  public setTransliteratedHolidayList(transliteratedHolidays: string[]): void {\n    this.transliteratedHolidays = transliteratedHolidays;\n  }\n\n  /**\n   * Hebrew holiday array in the following format.<br><code>[\"&#x05E2;&#x05E8;&#x05D1; &#x05E4;&#x05E1;&#x05D7;\",\n   * \"&#x05E4;&#x05E1;&#x05D7;\", \"&#x05D7;&#x05D5;&#x05DC; &#x05D4;&#x05DE;&#x05D5;&#x05E2;&#x05D3;\n   * &#x05E4;&#x05E1;&#x05D7;\", \"&#x05E4;&#x05E1;&#x05D7; &#x05E9;&#x05E0;&#x05D9;\", \"&#x05E2;&#x05E8;&#x05D1;\n   * &#x05E9;&#x05D1;&#x05D5;&#x05E2;&#x05D5;&#x05EA;\", \"&#x05E9;&#x05D1;&#x05D5;&#x05E2;&#x05D5;&#x05EA;\",\n   * \"&#x05E9;&#x05D1;&#x05E2;&#x05D4; &#x05E2;&#x05E9;&#x05E8; &#x05D1;&#x05EA;&#x05DE;&#x05D5;&#x05D6;\",\n   * \"&#x05EA;&#x05E9;&#x05E2;&#x05D4; &#x05D1;&#x05D0;&#x05D1;\",\n   * \"&#x05D8;&#x05F4;&#x05D5; &#x05D1;&#x05D0;&#x05D1;\",\n   * \"&#x05E2;&#x05E8;&#x05D1; &#x05E8;&#x05D0;&#x05E9; &#x05D4;&#x05E9;&#x05E0;&#x05D4;\",\n   * \"&#x05E8;&#x05D0;&#x05E9; &#x05D4;&#x05E9;&#x05E0;&#x05D4;\",\n   * \"&#x05E6;&#x05D5;&#x05DD; &#x05D2;&#x05D3;&#x05DC;&#x05D9;&#x05D4;\",\n   * \"&#x05E2;&#x05E8;&#x05D1; &#x05D9;&#x05D5;&#x05DD; &#x05DB;&#x05D9;&#x05E4;&#x05D5;&#x05E8;\",\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05DB;&#x05D9;&#x05E4;&#x05D5;&#x05E8;\",\n   * \"&#x05E2;&#x05E8;&#x05D1; &#x05E1;&#x05D5;&#x05DB;&#x05D5;&#x05EA;\",\n   * \"&#x05E1;&#x05D5;&#x05DB;&#x05D5;&#x05EA;\",\n   * \"&#x05D7;&#x05D5;&#x05DC; &#x05D4;&#x05DE;&#x05D5;&#x05E2;&#x05D3; &#x05E1;&#x05D5;&#x05DB;&#x05D5;&#x05EA;\",\n   * \"&#x05D4;&#x05D5;&#x05E9;&#x05E2;&#x05E0;&#x05D0; &#x05E8;&#x05D1;&#x05D4;\",\n   * \"&#x05E9;&#x05DE;&#x05D9;&#x05E0;&#x05D9; &#x05E2;&#x05E6;&#x05E8;&#x05EA;\",\n   * \"&#x05E9;&#x05DE;&#x05D7;&#x05EA; &#x05EA;&#x05D5;&#x05E8;&#x05D4;\",\n   * \"&#x05E2;&#x05E8;&#x05D1; &#x05D7;&#x05E0;&#x05D5;&#x05DB;&#x05D4;\",\n   * \"&#x05D7;&#x05E0;&#x05D5;&#x05DB;&#x05D4;\", \"&#x05E2;&#x05E9;&#x05E8;&#x05D4; &#x05D1;&#x05D8;&#x05D1;&#x05EA;\",\n   * \"&#x05D8;&#x05F4;&#x05D5; &#x05D1;&#x05E9;&#x05D1;&#x05D8;\",\n   * \"&#x05EA;&#x05E2;&#x05E0;&#x05D9;&#x05EA; &#x05D0;&#x05E1;&#x05EA;&#x05E8;\",\n   * \"&#x05E4;&#x05D5;&#x05E8;&#x05D9;&#x05DD;\",\n   * \"&#x05E9;&#x05D5;&#x05E9;&#x05DF; &#x05E4;&#x05D5;&#x05E8;&#x05D9;&#x05DD;\",\n   * \"&#x05E4;&#x05D5;&#x05E8;&#x05D9;&#x05DD; &#x05E7;&#x05D8;&#x05DF;\",\n   * \"&#x05E8;&#x05D0;&#x05E9; &#x05D7;&#x05D5;&#x05D3;&#x05E9;\",\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05D4;&#x05E9;&#x05D5;&#x05D0;&#x05D4;\",\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05D4;&#x05D6;&#x05D9;&#x05DB;&#x05E8;&#x05D5;&#x05DF;\",\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05D4;&#x05E2;&#x05E6;&#x05DE;&#x05D0;&#x05D5;&#x05EA;\",\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05D9;&#x05E8;&#x05D5;&#x05E9;&#x05DC;&#x05D9;&#x05DD;\",\n   * \"&#x05DC;&#x05F4;&#x05D2; &#x05D1;&#x05E2;&#x05D5;&#x05DE;&#x05E8;\",\n   * \"&#x05E9;&#x05D5;&#x05E9;&#x05DF; &#x05E4;&#x05D5;&#x05E8;&#x05D9;&#x05DD; &#x05E7;&#x05D8;&#x05DF;\"]</code>\n   */\n  private static readonly hebrewHolidays: string[] = ['\\u05E2\\u05E8\\u05D1 \\u05E4\\u05E1\\u05D7', '\\u05E4\\u05E1\\u05D7',\n    '\\u05D7\\u05D5\\u05DC \\u05D4\\u05DE\\u05D5\\u05E2\\u05D3 \\u05E4\\u05E1\\u05D7',\n    '\\u05E4\\u05E1\\u05D7 \\u05E9\\u05E0\\u05D9', '\\u05E2\\u05E8\\u05D1 \\u05E9\\u05D1\\u05D5\\u05E2\\u05D5\\u05EA',\n    '\\u05E9\\u05D1\\u05D5\\u05E2\\u05D5\\u05EA',\n    '\\u05E9\\u05D1\\u05E2\\u05D4 \\u05E2\\u05E9\\u05E8 \\u05D1\\u05EA\\u05DE\\u05D5\\u05D6',\n    '\\u05EA\\u05E9\\u05E2\\u05D4 \\u05D1\\u05D0\\u05D1', '\\u05D8\\u05F4\\u05D5 \\u05D1\\u05D0\\u05D1',\n    '\\u05E2\\u05E8\\u05D1 \\u05E8\\u05D0\\u05E9 \\u05D4\\u05E9\\u05E0\\u05D4',\n    '\\u05E8\\u05D0\\u05E9 \\u05D4\\u05E9\\u05E0\\u05D4', '\\u05E6\\u05D5\\u05DD \\u05D2\\u05D3\\u05DC\\u05D9\\u05D4',\n    '\\u05E2\\u05E8\\u05D1 \\u05D9\\u05D5\\u05DD \\u05DB\\u05D9\\u05E4\\u05D5\\u05E8',\n    '\\u05D9\\u05D5\\u05DD \\u05DB\\u05D9\\u05E4\\u05D5\\u05E8', '\\u05E2\\u05E8\\u05D1 \\u05E1\\u05D5\\u05DB\\u05D5\\u05EA',\n    '\\u05E1\\u05D5\\u05DB\\u05D5\\u05EA',\n    '\\u05D7\\u05D5\\u05DC \\u05D4\\u05DE\\u05D5\\u05E2\\u05D3 \\u05E1\\u05D5\\u05DB\\u05D5\\u05EA',\n    '\\u05D4\\u05D5\\u05E9\\u05E2\\u05E0\\u05D0 \\u05E8\\u05D1\\u05D4',\n    '\\u05E9\\u05DE\\u05D9\\u05E0\\u05D9 \\u05E2\\u05E6\\u05E8\\u05EA',\n    '\\u05E9\\u05DE\\u05D7\\u05EA \\u05EA\\u05D5\\u05E8\\u05D4', '\\u05E2\\u05E8\\u05D1 \\u05D7\\u05E0\\u05D5\\u05DB\\u05D4',\n    '\\u05D7\\u05E0\\u05D5\\u05DB\\u05D4', '\\u05E2\\u05E9\\u05E8\\u05D4 \\u05D1\\u05D8\\u05D1\\u05EA',\n    '\\u05D8\\u05F4\\u05D5 \\u05D1\\u05E9\\u05D1\\u05D8', '\\u05EA\\u05E2\\u05E0\\u05D9\\u05EA \\u05D0\\u05E1\\u05EA\\u05E8',\n    '\\u05E4\\u05D5\\u05E8\\u05D9\\u05DD', '\\u05E9\\u05D5\\u05E9\\u05DF \\u05E4\\u05D5\\u05E8\\u05D9\\u05DD',\n    '\\u05E4\\u05D5\\u05E8\\u05D9\\u05DD \\u05E7\\u05D8\\u05DF', '\\u05E8\\u05D0\\u05E9 \\u05D7\\u05D5\\u05D3\\u05E9',\n    '\\u05D9\\u05D5\\u05DD \\u05D4\\u05E9\\u05D5\\u05D0\\u05D4',\n    '\\u05D9\\u05D5\\u05DD \\u05D4\\u05D6\\u05D9\\u05DB\\u05E8\\u05D5\\u05DF',\n    '\\u05D9\\u05D5\\u05DD \\u05D4\\u05E2\\u05E6\\u05DE\\u05D0\\u05D5\\u05EA',\n    '\\u05D9\\u05D5\\u05DD \\u05D9\\u05E8\\u05D5\\u05E9\\u05DC\\u05D9\\u05DD',\n    '\\u05DC\\u05F4\\u05D2 \\u05D1\\u05E2\\u05D5\\u05DE\\u05E8',\n    '\\u05E9\\u05D5\\u05E9\\u05DF \\u05E4\\u05D5\\u05E8\\u05D9\\u05DD \\u05E7\\u05D8\\u05DF',\n    '\\u05D0\\u05E1\\u05E8\\u05D5 \\u05D7\\u05D2'];\n\n  /**\n   * Formats the Yom Tov (holiday) in Hebrew or transliterated Latin characters.\n   *\n   * @param jewishCalendar the JewishCalendar\n   * @return the formatted holiday or an empty String if the day is not a holiday.\n   * @see #isHebrewFormat()\n   */\n  public formatYomTov(jewishCalendar: JewishCalendar): string {\n    const index: number = jewishCalendar.getYomTovIndex();\n    if (index === JewishCalendar.CHANUKAH) {\n      const dayOfChanukah: number = jewishCalendar.getDayOfChanukah();\n      return this.hebrewFormat\n        ? (`${this.formatHebrewNumber(dayOfChanukah)} ${HebrewDateFormatter.hebrewHolidays[index]}`)\n        : (`${this.transliteratedHolidays[index]} ${dayOfChanukah}`);\n    }\n    if (index === -1) return '';\n    return this.hebrewFormat ? HebrewDateFormatter.hebrewHolidays[index] : this.transliteratedHolidays[index];\n  }\n\n  /**\n   * Formats a day as Rosh Chodesh in the format of in the format of &#x05E8;&#x05D0;&#x05E9;\n   * &#x05D7;&#x05D5;&#x05D3;&#x05E9; &#x05E9;&#x05D1;&#x05D8; or Rosh Chodesh Shevat. If it\n   * is not Rosh Chodesh, an empty <code>String</code> will be returned.\n   * @param jewishCalendar the JewishCalendar\n   * @return The formatted <code>String</code> in the format of &#x05E8;&#x05D0;&#x05E9;\n   * &#x05D7;&#x05D5;&#x05D3;&#x05E9; &#x05E9;&#x05D1;&#x05D8; or Rosh Chodesh Shevat. If it\n   * is not Rosh Chodesh, an empty <code>String</code> will be returned.\n   */\n  public formatRoshChodesh(jewishCalendar: JewishCalendar): string {\n    if (!jewishCalendar.isRoshChodesh()) return '';\n\n    let formattedRoshChodesh: string;\n    let month: number = jewishCalendar.getJewishMonth();\n    if (jewishCalendar.getJewishDayOfMonth() === 30) {\n      if (month < JewishCalendar.ADAR || (month === JewishCalendar.ADAR && jewishCalendar.isJewishLeapYear())) {\n        month++;\n      } else { // roll to Nissan\n        month = JewishCalendar.NISSAN;\n      }\n    }\n\n    // This method is only about formatting, so we shouldn't make any changes to the params passed in...\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const _jewishCalendar = jewishCalendar.clone() as JewishCalendar;\n    _jewishCalendar.setJewishMonth(month);\n    formattedRoshChodesh = this.hebrewFormat ? HebrewDateFormatter.hebrewHolidays[JewishCalendar.ROSH_CHODESH]\n      : this.transliteratedHolidays[JewishCalendar.ROSH_CHODESH];\n    formattedRoshChodesh += ` ${this.formatMonth(_jewishCalendar)}`;\n    return formattedRoshChodesh;\n  }\n\n  /**\n   * Returns if the formatter is set to use Hebrew formatting in the various formatting methods.\n   *\n   * @return the hebrewFormat\n   * @see #setHebrewFormat(boolean)\n   * @see #format(JewishDate)\n   * @see #formatDayOfWeek(JewishDate)\n   * @see #formatMonth(JewishDate)\n   * @see #formatOmer(JewishCalendar)\n   * @see #formatParsha(JewishCalendar)\n   * @see #formatYomTov(JewishCalendar)\n   */\n  public isHebrewFormat(): boolean {\n    return this.hebrewFormat;\n  }\n\n  /**\n   * Sets the formatter to format in Hebrew in the various formatting methods.\n   *\n   * @param hebrewFormat\n   *            the hebrewFormat to set\n   * @see #isHebrewFormat()\n   * @see #format(JewishDate)\n   * @see #formatDayOfWeek(JewishDate)\n   * @see #formatMonth(JewishDate)\n   * @see #formatOmer(JewishCalendar)\n   * @see #formatParsha(JewishCalendar)\n   * @see #formatYomTov(JewishCalendar)\n   */\n  public setHebrewFormat(hebrewFormat: boolean): void {\n    this.hebrewFormat = hebrewFormat;\n  }\n\n  /**\n   * Returns the Hebrew Omer prefix.&nbsp; By default it is the letter &#x05D1; producing\n   * &#x05D1;&#x05E2;&#x05D5;&#x05DE;&#x05E8;, but it can be set to &#x05DC; to produce\n   * &#x05DC;&#x05E2;&#x05D5;&#x05DE;&#x05E8; (or any other prefix) using the {@link #setHebrewOmerPrefix(String)}.\n   *\n   * @return the hebrewOmerPrefix\n   *\n   * @see #hebrewOmerPrefix\n   * @see #setHebrewOmerPrefix(String)\n   * @see #formatOmer(JewishCalendar)\n   */\n  public getHebrewOmerPrefix(): string {\n    return this.hebrewOmerPrefix;\n  }\n\n  /**\n   * Method to set the Hebrew Omer prefix. By default it is the letter &#x5D1;, but this allows setting it to a\n   * &#x5DC; (or any other prefix).\n   *\n   * @param hebrewOmerPrefix\n   *            the hebrewOmerPrefix to set. You can use the Unicode &#92;u05DC to set it to &#x5DC;.\n   * @see #getHebrewOmerPrefix()\n   * @see #formatOmer(JewishCalendar)\n   */\n  public setHebrewOmerPrefix(hebrewOmerPrefix: string): void {\n    this.hebrewOmerPrefix = hebrewOmerPrefix;\n  }\n\n  /**\n   * Returns the array of months transliterated into Latin chars. The default list of months uses Ashkenazi\n   * pronunciation in typical American English spelling. This list has a length of 14 with 3 variations for Adar -\n   * \"Adar\", \"Adar II\", \"Adar I\"\n   *\n   * @return the array of months beginning in Nissan and ending in \"Adar\", \"Adar II\", \"Adar I\". The default list is\n   *         currently [\"Nissan\", \"Iyar\", \"Sivan\", \"Tammuz\", \"Av\", \"Elul\", \"Tishrei\", \"Cheshvan\", \"Kislev\", \"Teves\",\n   *         \"Shevat\", \"Adar\", \"Adar II\", \"Adar I\"].\n   * @see #setTransliteratedMonthList(String[])\n   */\n  public getTransliteratedMonthList(): string[] {\n    return this.transliteratedMonths;\n  }\n\n  /**\n   * Setter method to allow overriding of the default list of months transliterated into Latin chars. The default\n   * uses Ashkenazi American English transliteration.\n   *\n   * @param transliteratedMonths\n   *            an array of 14 month names that defaults to [\"Nissan\", \"Iyar\", \"Sivan\", \"Tamuz\", \"Av\", \"Elul\", \"Tishrei\",\n   *            \"Heshvan\", \"Kislev\", \"Tevet\", \"Shevat\", \"Adar\", \"Adar II\", \"Adar I\"].\n   * @see #getTransliteratedMonthList()\n   */\n  public setTransliteratedMonthList(transliteratedMonths: string[]): void {\n    this.transliteratedMonths = transliteratedMonths;\n  }\n\n  /**\n   * Unicode list of Hebrew months in the following format <code>[\"\\u05E0\\u05D9\\u05E1\\u05DF\",\"\\u05D0\\u05D9\\u05D9\\u05E8\",\n   * \"\\u05E1\\u05D9\\u05D5\\u05DF\",\"\\u05EA\\u05DE\\u05D5\\u05D6\",\"\\u05D0\\u05D1\",\"\\u05D0\\u05DC\\u05D5\\u05DC\",\n   * \"\\u05EA\\u05E9\\u05E8\\u05D9\",\"\\u05D7\\u05E9\\u05D5\\u05DF\",\"\\u05DB\\u05E1\\u05DC\\u05D5\",\"\\u05D8\\u05D1\\u05EA\",\n   * \"\\u05E9\\u05D1\\u05D8\",\"\\u05D0\\u05D3\\u05E8\",\"\\u05D0\\u05D3\\u05E8 \\u05D1\",\"\\u05D0\\u05D3\\u05E8 \\u05D0\"]</code>\n   *\n   * @see #formatMonth(JewishDate)\n   */\n  private hebrewMonths: string[] = ['\\u05E0\\u05D9\\u05E1\\u05DF', '\\u05D0\\u05D9\\u05D9\\u05E8',\n    '\\u05E1\\u05D9\\u05D5\\u05DF', '\\u05EA\\u05DE\\u05D5\\u05D6', '\\u05D0\\u05D1', '\\u05D0\\u05DC\\u05D5\\u05DC',\n    '\\u05EA\\u05E9\\u05E8\\u05D9', '\\u05D7\\u05E9\\u05D5\\u05DF', '\\u05DB\\u05E1\\u05DC\\u05D5',\n    '\\u05D8\\u05D1\\u05EA', '\\u05E9\\u05D1\\u05D8', '\\u05D0\\u05D3\\u05E8', '\\u05D0\\u05D3\\u05E8 \\u05D1',\n    '\\u05D0\\u05D3\\u05E8 \\u05D0'];\n\n  /**\n   * Unicode list of Hebrew days of week in the format of <code>[\"&#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF;\",\n   * \"&#x05E9;&#x05E0;&#x05D9;\",\"&#x05E9;&#x05DC;&#x05D9;&#x05E9;&#x05D9;\",\"&#x05E8;&#x05D1;&#x05D9;&#x05E2;&#x05D9;\",\n   * \"&#x05D7;&#x05DE;&#x05D9;&#x05E9;&#x05D9;\",\"&#x05E9;&#x05E9;&#x05D9;\",\"&#x05E9;&#x05D1;&#x05EA;\"]</code>\n   */\n  private static readonly hebrewDaysOfWeek: string[] = ['\\u05E8\\u05D0\\u05E9\\u05D5\\u05DF', '\\u05E9\\u05E0\\u05D9',\n    '\\u05E9\\u05DC\\u05D9\\u05E9\\u05D9', '\\u05E8\\u05D1\\u05D9\\u05E2\\u05D9', '\\u05D7\\u05DE\\u05D9\\u05E9\\u05D9',\n    '\\u05E9\\u05E9\\u05D9', '\\u05E9\\u05D1\\u05EA'];\n\n  /**\n   * Formats the day of week. If {@link #isHebrewFormat() Hebrew formatting} is set, it will display in the format\n   * &#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF; etc. If Hebrew formatting is not in use it will return it in the format\n   * of Sunday etc. There are various formatting options that will affect the output.\n   *\n   * @param jewishDate the JewishDate Object\n   * @return the formatted day of week\n   * @see #isHebrewFormat()\n   * @see #isLongWeekFormat()\n   */\n  public formatDayOfWeek(jewishDate: JewishDate): string {\n    if (this.hebrewFormat) {\n      if (this.isLongWeekFormat()) {\n        return HebrewDateFormatter.hebrewDaysOfWeek[jewishDate.getDayOfWeek() - 1];\n      }\n\n      if (jewishDate.getDayOfWeek() === 7) {\n        return this.formatHebrewNumber(300);\n      }\n\n      return this.formatHebrewNumber(jewishDate.getDayOfWeek());\n    }\n\n    if (jewishDate.getDayOfWeek() === 7) {\n      if (this.isLongWeekFormat()) {\n        return this.getTransliteratedShabbosDayOfWeek();\n      }\n\n      return this.getTransliteratedShabbosDayOfWeek().substring(0, 3);\n    }\n\n    const dateTime = jewishDate.getDate();\n    return this.weekFormat\n      ? dateTime.toLocaleString(this.weekFormat)\n      : dateTime.toISO();\n  }\n\n  /**\n   * Returns whether the class is set to use the Geresh &#x5F3; and Gershayim &#x5F4; in formatting Hebrew dates and\n   * numbers. When true and output would look like &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x5DB;\n   * (or &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x5DA;). When set to false, this output\n   * would display as &#x5DB;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;.\n   *\n   * @return true if set to use the Geresh &#x5F3; and Gershayim &#x5F4; in formatting Hebrew dates and numbers.\n   */\n  public isUseGershGershayim(): boolean {\n    return this.useGershGershayim;\n  }\n\n  /**\n   * Sets whether to use the Geresh &#x5F3; and Gershayim &#x5F4; in formatting Hebrew dates and numbers. The default\n   * value is true and output would look like &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x5DB;\n   * (or &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x5DA;). When set to false, this output would\n   * display as &#x5DB;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB; (or\n   * &#x5DB;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DA;). Single digit days or month or years such as &#x05DB;&#x05F3;\n   * &#x05E9;&#x05D1;&#x05D8; &#x05D5;&#x05F3; &#x05D0;&#x05DC;&#x05E4;&#x05D9;&#x05DD; show the use of the Geresh.\n   *\n   * @param useGershGershayim\n   *            set this to false to omit the Geresh &#x5F3; and Gershayim &#x5F4; in formatting\n   */\n  public setUseGershGershayim(useGershGershayim: boolean): void {\n    this.useGershGershayim = useGershGershayim;\n  }\n\n  /**\n   * Returns whether the class is set to use the &#x05DE;&#x05E0;&#x05E6;&#x05E4;&#x05F4;&#x05DA; letters when\n   * formatting years ending in 20, 40, 50, 80 and 90 to produce &#x05EA;&#x05E9;&#x05F4;&#x05E4; if false or\n   * &#x05EA;&#x05E9;&#x05F4;&#x05E3; if true. Traditionally non-final form letters are used, so the year\n   * 5780 would be formatted as &#x05EA;&#x05E9;&#x05F4;&#x05E4; if the default false is used here. If this returns\n   * true, the format &#x05EA;&#x05E9;&#x05F4;&#x05E3; would be used.\n   *\n   * @return true if set to use final form letters when formatting Hebrew years. The default value is false.\n   */\n  public isUseFinalFormLetters(): boolean {\n    return this.useFinalFormLetters;\n  }\n\n  /**\n   * When formatting a Hebrew Year, traditionally years ending in 20, 40, 50, 80 and 90 are formatted using non-final\n   * form letters for example &#x05EA;&#x05E9;&#x05F4;&#x05E4; for the year 5780. Setting this to true (the default\n   * is false) will use the final form letters for &#x05DE;&#x05E0;&#x05E6;&#x05E4;&#x05F4;&#x05DA; and will format\n   * the year 5780 as &#x05EA;&#x05E9;&#x05F4;&#x05E3;.\n   *\n   * @param useFinalFormLetters\n   *            Set this to true to use final form letters when formatting Hebrew years.\n   */\n  public setUseFinalFormLetters(useFinalFormLetters: boolean): void {\n    this.useFinalFormLetters = useFinalFormLetters;\n  }\n\n  /**\n   * Returns whether the class is set to use the thousands digit when formatting. When formatting a Hebrew Year,\n   * traditionally the thousands digit is omitted and output for a year such as 5729 (1969 Gregorian) would be\n   * calculated for 729 and format as &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;. When set to true the long format year such\n   * as &#x5D4;&#x5F3; &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8; for 5729/1969 is returned.\n   *\n   * @return true if set to use the thousands digit when formatting Hebrew dates and numbers.\n   */\n  public isUseLongHebrewYears(): boolean {\n    return this.useLonghebrewYears;\n  }\n\n  /**\n   * When formatting a Hebrew Year, traditionally the thousands digit is omitted and output for a year such as 5729\n   * (1969 Gregorian) would be calculated for 729 and format as &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;. This method\n   * allows setting this to true to return the long format year such as &#x5D4;&#x5F3;\n   * &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8; for 5729/1969.\n   *\n   * @param useLongHebrewYears\n   *            Set this to true to use the long formatting\n   */\n  public setUseLongHebrewYears(useLongHebrewYears: boolean): void {\n    this.useLonghebrewYears = useLongHebrewYears;\n  }\n\n  /**\n   * Formats the Jewish date. If the formatter is set to Hebrew, it will format in the form, \"day Month year\" for\n   * example &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;, and the format\n   * \"21 Shevat, 5729\" if not.\n   *\n   * @param jewishDate\n   *            the JewishDate to be formatted\n   * @return the formatted date. If the formatter is set to Hebrew, it will format in the form, \"day Month year\" for\n   *         example &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;, and the format\n   *         \"21 Shevat, 5729\" if not.\n   */\n  public format(jewishDate: JewishDate): string {\n    if (this.isHebrewFormat()) {\n      return `${this.formatHebrewNumber(jewishDate.getJewishDayOfMonth())} ${this.formatMonth(jewishDate)} ${this.formatHebrewNumber(jewishDate.getJewishYear())}`;\n    }\n    return `${jewishDate.getJewishDayOfMonth()} ${this.formatMonth(jewishDate)}, ${jewishDate.getJewishYear()}`;\n  }\n\n  /**\n   * Returns a string of the current Hebrew month such as \"Tishrei\". Returns a string of the current Hebrew month such\n   * as \"&#x5D0;&#x5D3;&#x5E8; &#x5D1;&#x5F3;\".\n   *\n   * @param jewishDate\n   *            the JewishDate to format\n   * @return the formatted month name\n   * @see #isHebrewFormat()\n   * @see #setHebrewFormat(boolean)\n   * @see #getTransliteratedMonthList()\n   * @see #setTransliteratedMonthList(String[])\n   */\n  public formatMonth(jewishDate: JewishDate): string {\n    const month: number = jewishDate.getJewishMonth();\n    if (this.isHebrewFormat()) {\n      if (jewishDate.isJewishLeapYear() && month === JewishDate.ADAR) {\n        return this.hebrewMonths[13] + (this.useGershGershayim ? HebrewDateFormatter.GERESH : ''); // return Adar I, not Adar in a leap year\n      } else if (jewishDate.isJewishLeapYear() && month === JewishDate.ADAR_II) {\n        return this.hebrewMonths[12] + (this.useGershGershayim ? HebrewDateFormatter.GERESH : '');\n      }\n      return this.hebrewMonths[month - 1];\n    }\n\n    if (jewishDate.isJewishLeapYear() && month === JewishDate.ADAR) {\n      return this.transliteratedMonths[13]; // return Adar I, not Adar in a leap year\n    }\n\n    return this.transliteratedMonths[month - 1];\n  }\n\n  /**\n   * Returns a String of the Omer day in the form &#x5DC;&#x5F4;&#x5D2; &#x5D1;&#x05E2;&#x05D5;&#x05DE;&#x5E8; if\n   * Hebrew Format is set, or \"Omer X\" or \"Lag B'Omer\" if not. An empty string if there is no Omer this day.\n   *\n   * @param jewishCalendar\n   *            the JewishCalendar to be formatted\n   *\n   * @return a String of the Omer day in the form or an empty string if there is no Omer this day. The default\n   *         formatting has a &#x5D1;&#x5F3; prefix that would output &#x5D1;&#x05E2;&#x05D5;&#x05DE;&#x5E8;, but this\n   *         can be set via the {@link #setHebrewOmerPrefix(String)} method to use a &#x5DC; and output\n   *         &#x5DC;&#x5F4;&#x5D2; &#x5DC;&#x05E2;&#x05D5;&#x05DE;&#x5E8;.\n   * @see #isHebrewFormat()\n   * @see #getHebrewOmerPrefix()\n   * @see #setHebrewOmerPrefix(String)\n   */\n  public formatOmer(jewishCalendar: JewishCalendar): string {\n    const omer: number = jewishCalendar.getDayOfOmer();\n    if (omer === -1) {\n      return '';\n    }\n\n    if (this.hebrewFormat) {\n      return `${this.formatHebrewNumber(omer)} ${this.hebrewOmerPrefix}עומר`;\n    }\n\n    if (omer === 33) { // if Lag B'Omer\n      return this.transliteratedHolidays[33];\n    }\n\n    return `Omer ${omer}`;\n  }\n\n  /**\n   * Formats a molad.\n   * TODO: Experimental and incomplete\n   *\n   * @param moladChalakim - the chalakim of the molad\n   * @return the formatted molad. FIXME: define proper format in English and Hebrew.\n   */\n  private static formatMolad(moladChalakim: number): string {\n    let adjustedChalakim: number = moladChalakim;\n    const MINUTE_CHALAKIM: number = 18;\n    const HOUR_CHALAKIM: number = 1080;\n    const DAY_CHALAKIM: number = 24 * HOUR_CHALAKIM;\n\n    let days: number = adjustedChalakim / DAY_CHALAKIM;\n    adjustedChalakim -= (days * DAY_CHALAKIM);\n    const hours: number = Math.trunc(adjustedChalakim / HOUR_CHALAKIM);\n    if (hours >= 6) {\n      days += 1;\n    }\n    adjustedChalakim -= (hours * HOUR_CHALAKIM);\n    const minutes: number = Math.trunc(adjustedChalakim / MINUTE_CHALAKIM);\n    adjustedChalakim -= minutes * MINUTE_CHALAKIM;\n    return `Day: ${days % 7} hours: ${hours}, minutes: ${minutes}, chalakim: ${adjustedChalakim}`;\n  }\n\n  /**\n   * Returns the kviah in the traditional 3 letter Hebrew format where the first letter represents the day of week of\n   * Rosh Hashana, the second letter represents the lengths of Cheshvan and Kislev ({@link JewishDate#SHELAIMIM\n   * Shelaimim} , {@link JewishDate#KESIDRAN Kesidran} or {@link JewishDate#CHASERIM Chaserim}) and the 3rd letter\n   * represents the day of week of Pesach. For example 5729 (1969) would return &#x5D1;&#x5E9;&#x5D4; (Rosh Hashana on\n   * Monday, Shelaimim, and Pesach on Thursday), while 5771 (2011) would return &#x5D4;&#x5E9;&#x5D2; (Rosh Hashana on\n   * Thursday, Shelaimim, and Pesach on Tuesday).\n   *\n   * @param jewishYear\n   *            the Jewish year\n   * @return the Hebrew String such as &#x5D1;&#x5E9;&#x5D4; for 5729 (1969) and &#x5D4;&#x5E9;&#x5D2; for 5771\n   *         (2011).\n   */\n  public getFormattedKviah(jewishYear: number): string {\n    const jewishDate: JewishDate = new JewishDate(jewishYear, JewishDate.TISHREI, 1); // set date to Rosh Hashana\n    const kviah: number = jewishDate.getCheshvanKislevKviah();\n    const roshHashanaDayOfweek: number = jewishDate.getDayOfWeek();\n    let returnValue: string = this.formatHebrewNumber(roshHashanaDayOfweek);\n    returnValue += (kviah === JewishDate.CHASERIM ? '\\u05D7' : kviah === JewishDate.SHELAIMIM ? '\\u05E9' : '\\u05DB');\n    jewishDate.setJewishDate(jewishYear, JewishDate.NISSAN, 15); // set to Pesach of the given year\n    const pesachDayOfweek: number = jewishDate.getDayOfWeek();\n    returnValue += this.formatHebrewNumber(pesachDayOfweek);\n    returnValue = returnValue.replace(new RegExp(HebrewDateFormatter.GERESH, 'g'), ''); // geresh is never used in the kviah format\n    // boolean isLeapYear = JewishDate.isJewishLeapYear(jewishYear);\n    // for efficiency we can avoid the expensive recalculation of the pesach day of week by adding 1 day to Rosh\n    // Hashana for a 353-day year, 2 for a 354-day year, 3 for a 355 or 383-day year, 4 for a 384-day year and 5 for\n    // a 385-day year\n    return returnValue;\n  }\n\n  /**\n   * Formats the <a href=\"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a> Bavli in the format of\n   * \"&#x05E2;&#x05D9;&#x05E8;&#x05D5;&#x05D1;&#x05D9;&#x05DF; &#x05E0;&#x05F4;&#x05D1;\" in {@link #isHebrewFormat() Hebrew},\n   * or the transliterated format of \"Eruvin 52\".\n   * @param daf the Daf to be formatted.\n   * @return the formatted daf.\n   */\n  public formatDafYomiBavli(daf: Daf): string {\n    if (this.hebrewFormat) {\n      return `${daf.getMasechta()} ${this.formatHebrewNumber(daf.getDaf())}`;\n    }\n    return `${daf.getMasechtaTransliterated()} ${daf.getDaf()}`;\n  }\n\n  /**\n   * Formats the <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud#Daf_Yomi_Yerushalmi\">Daf Yomi Yerushalmi</a> in the format\n   * of \"&#x05E2;&#x05D9;&#x05E8;&#x05D5;&#x05D1;&#x05D9;&#x05DF; &#x05E0;&#x05F4;&#x05D1;\" in {@link #isHebrewFormat() Hebrew}, or\n   * the transliterated format of \"Eruvin 52\".\n   *\n   * @param daf the Daf to be formatted.\n   * @return the formatted daf.\n   */\n  public formatDafYomiYerushalmi(daf: Daf | null): string {\n    if (daf === null) {\n      return this.hebrewFormat ? Daf.getYerushalmiMasechtos()[39] : Daf.getYerushalmiMasechtosTransliterated()[39];\n    }\n\n    return this.hebrewFormat\n        ? `${daf.getYerushalmiMasechta()} ${this.formatHebrewNumber(daf.getDaf())}`\n        : `${daf.getYerushalmiMasechtaTransliterated()} ${daf.getDaf()}`;\n  }\n\n  /**\n   * Returns a Hebrew formatted string of a number. The method can calculate from 0 to 9999.\n   * <ul>\n   * <li>Single digit numbers such as 3, 30 and 100 will be returned with a &#x5F3; (<a\n   * href=\"https://en.wikipedia.org/wiki/Geresh\">Geresh</a>) appended as at the end. For example &#x5D2;&#x5F3;,\n   * &#x5DC;&#x5F3; and &#x5E7;&#x5F3;</li>\n   * <li>multi digit numbers such as 21 and 769 will be returned with a &#x5F4; (<a\n   * href=\"https://en.wikipedia.org/wiki/Gershayim\">Gershayim</a>) between the second to last and last letters. For\n   * example &#x5DB;&#x5F4;&#x5D0;, &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;</li>\n   * <li>15 and 16 will be returned as &#x5D8;&#x5F4;&#x5D5; and &#x5D8;&#x5F4;&#x5D6;</li>\n   * <li>Single digit numbers (years assumed) such as 6000 (%1000=0) will be returned as &#x5D5;&#x5F3;\n   * &#x5D0;&#x5DC;&#x5E4;&#x5D9;&#x5DD;</li>\n   * <li>0 will return &#x5D0;&#x5E4;&#x05E1;</li>\n   * </ul>\n   *\n   * @param num\n   *            the number to be formatted. It will trow an IllegalArgumentException if the number is &lt; 0 or &gt; 9999.\n   * @return the Hebrew formatted number such as &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;\n   * @see #isUseFinalFormLetters()\n   * @see #isUseGershGershayim()\n   * @see #isHebrewFormat()\n   *\n   */\n  public formatHebrewNumber(num: number): string {\n    if (num !== Math.trunc(num)) throw new IllegalArgumentException('number must be an integer.');\n\n    if (num < 0) {\n      throw new IllegalArgumentException('negative numbers can\\'t be formatted');\n    } else if (num > 9999) {\n      throw new IllegalArgumentException('numbers > 9999 can\\'t be formatted');\n    }\n\n    const ALAFIM: string = '\\u05D0\\u05DC\\u05E4\\u05D9\\u05DD';\n    const EFES: string = '\\u05D0\\u05E4\\u05E1';\n\n    const jHundreds: string[] = ['', '\\u05E7', '\\u05E8', '\\u05E9', '\\u05EA', '\\u05EA\\u05E7', '\\u05EA\\u05E8',\n      '\\u05EA\\u05E9', '\\u05EA\\u05EA', '\\u05EA\\u05EA\\u05E7'];\n    const jTens: string[] = ['', '\\u05D9', '\\u05DB', '\\u05DC', '\\u05DE', '\\u05E0', '\\u05E1', '\\u05E2',\n      '\\u05E4', '\\u05E6'];\n    const jTenEnds: string[] = ['', '\\u05D9', '\\u05DA', '\\u05DC', '\\u05DD', '\\u05DF', '\\u05E1', '\\u05E2',\n      '\\u05E3', '\\u05E5'];\n    const tavTaz: string[] = ['\\u05D8\\u05D5', '\\u05D8\\u05D6'];\n    const jOnes: string[] = ['', '\\u05D0', '\\u05D1', '\\u05D2', '\\u05D3', '\\u05D4', '\\u05D5', '\\u05D6',\n      '\\u05D7', '\\u05D8'];\n\n    if (num === 0) { // do we really need this? Should it be applicable to a date?\n      return EFES;\n    }\n    const shortNumber: number = num % 1000; // discard thousands\n    // next check for all possible single Hebrew digit years\n    const singleDigitNumber: boolean = (shortNumber < 11 || (shortNumber < 100 && shortNumber % 10 === 0) || (shortNumber <= 400 && shortNumber % 100 === 0));\n    const thousands: number = Math.trunc(num / 1000); // get # thousands\n    let sb: string = '';\n    // append thousands to String\n    if (num % 1000 === 0) { // in year is 5000, 4000 etc\n      sb = sb.concat(jOnes[thousands]);\n      if (this.isUseGershGershayim()) {\n        sb = sb.concat(HebrewDateFormatter.GERESH);\n      }\n      sb = sb.concat(' ');\n      sb = sb.concat(ALAFIM); // add # of thousands plus the word \"thousand\" (overide alafim boolean)\n      return sb;\n    } else if (this.useLonghebrewYears && num >= 1000) { // if alafim boolean display thousands\n      sb = sb.concat(jOnes[thousands]);\n      if (this.isUseGershGershayim()) {\n        sb = sb.concat(HebrewDateFormatter.GERESH); // append thousands quote\n      }\n      sb = sb.concat(' ');\n    }\n    num = num % 1000; // remove 1000s\n    const hundreds: number = Math.trunc(num / 100); // # of hundreds\n    sb = sb.concat(jHundreds[hundreds]); // add hundreds to String\n    num = num % 100; // remove 100s\n    if (num === 15) { // special case 15\n      sb = sb.concat(tavTaz[0]);\n    } else if (num === 16) { // special case 16\n      sb = sb.concat(tavTaz[1]);\n    } else {\n      const tens: number = Math.trunc(num / 10);\n      if (num % 10 === 0) { // if evenly divisible by 10\n        if (!singleDigitNumber) {\n          if (this.isUseFinalFormLetters()) {\n            sb = sb.concat(jTenEnds[tens]); // years like 5780 will end with a final form &#x05E3;\n          } else {\n            sb = sb.concat(jTens[tens]); // years like 5780 will end with a regular &#x05E4;\n          }\n        } else {\n          sb = sb.concat(jTens[tens]); // standard letters so years like 5050 will end with a regular nun\n        }\n      } else {\n        sb = sb.concat(jTens[tens]);\n        num = num % 10;\n        sb = sb.concat(jOnes[num]);\n      }\n    }\n    if (this.isUseGershGershayim()) {\n      if (singleDigitNumber) {\n        sb = sb.concat(HebrewDateFormatter.GERESH); // append single quote\n      } else { // append double quote before last digit\n        sb = sb.substr(0, sb.length - 1)\n          .concat(HebrewDateFormatter.GERSHAYIM)\n          .concat(sb.substr(sb.length - 1, 1));\n      }\n    }\n    return sb;\n  }\n\n  /**\n   * Returns the map of transliterated parshiyos used by this formatter.\n   *\n   * @return the map of transliterated Parshios\n   */\n  public getTransliteratedParshiosList(): Record<Parsha, string> {\n    return this.transliteratedParshaMap;\n  }\n\n  /**\n   * Setter method to allow overriding of the default list of parshiyos transliterated into Latin chars. The\n   * default uses Ashkenazi American English transliteration.\n   *\n   * @param transliteratedParshaMap\n   *            the transliterated Parshios as an EnumMap to set\n   * @see #getTransliteratedParshiosList()\n   */\n  public setTransliteratedParshiosList(transliteratedParshaMap: Record<Parsha, string>): void {\n    this.transliteratedParshaMap = transliteratedParshaMap;\n  }\n\n  /**\n   * Returns a String with the name of the current parsha(ios). This method gets the current <em>parsha</em> by\n   * calling {@link JewishCalendar#getParshah()} that does not return a <em>parsha</em> for any non-<em>Shabbos</em>\n   * or a <em>Shabbos</em> that occurs on a <em>Yom Tov</em>, and will return an empty <code>String</code> in those\n   * cases. If the class {@link #isHebrewFormat() is set to format in Hebrew} it will return a <code>String</code>\n   * of the current parsha(ios) in Hebrew for example &#x05D1;&#x05E8;&#x05D0;&#x05E9;&#x05D9;&#x05EA; or\n   * &#x05E0;&#x05E6;&#x05D1;&#x05D9;&#x05DD; &#x05D5;&#x05D9;&#x05DC;&#x05DA; or an empty string if there\n   * are none. If not set to Hebrew, it returns a string of the parsha(ios) transliterated into Latin chars. The\n   * default uses Ashkenazi pronunciation in typical American English spelling, for example Bereshis or\n   * Nitzavim Vayeilech or an empty string if there are none.\n   *\n   * @param jewishCalendar the JewishCalendar Object\n   * @return today's parsha(ios) in Hebrew for example, if the formatter is set to format in Hebrew, returns a string\n   *         of the current parsha(ios) in Hebrew for example &#x05D1;&#x05E8;&#x05D0;&#x05E9;&#x05D9;&#x05EA; or\n   *         &#x05E0;&#x05E6;&#x05D1;&#x05D9;&#x05DD; &#x05D5;&#x05D9;&#x05DC;&#x05DA; or an empty string if\n   *         there are none. If not set to Hebrew, it returns a string of the parsha(ios) transliterated into Latin\n   *         chars. The default uses Ashkenazi pronunciation in typical American English spelling, for example\n   *         Bereshis or Nitzavim Vayeilech or an empty string if there are none.\n   * @see #formatParsha(JewishCalendar)\n   * @see #isHebrewFormat()\n   * @see JewishCalendar#getParshah()\n   */\n  public formatParsha(jewishCalendar: JewishCalendar): string;\n  /**\n   * Returns a String with the name of the current parsha(ios). This method overloads {@link\n   * HebrewDateFormatter#formatParsha(JewishCalendar)} and unlike that method, it will format the <em>parsha</em> passed\n   * to this method regardless of the day of week. This is the way to format a <em>parsha</em> retrieved from calling\n   * {@link JewishCalendar#getUpcomingParshah()}.\n   *\n   * @param parsha a JewishCalendar.Parsha object\n   * @return today's parsha(ios) in Hebrew for example, if the formatter is set to format in Hebrew, returns a string\n   *         of the current parsha(ios) in Hebrew for example &#x05D1;&#x05E8;&#x05D0;&#x05E9;&#x05D9;&#x05EA; or\n   *         &#x05E0;&#x05E6;&#x05D1;&#x05D9;&#x05DD; &#x05D5;&#x05D9;&#x05DC;&#x05DA; or an empty string if\n   *         there are none. If not set to Hebrew, it returns a string of the parsha(ios) transliterated into Latin\n   *         chars. The default uses Ashkenazi pronunciation in typical American English spelling, for example\n   *         Bereshis or Nitzavim Vayeilech or an empty string if there are none.\n   * @see #formatParsha(JewishCalendar)\n   * @see JewishCalendar#getUpcomingParshah()\n   */\n  public formatParsha(parsha: Parsha): string\n  public formatParsha(jewishCalendarOrParsha: JewishCalendar | Parsha): string {\n    if (jewishCalendarOrParsha instanceof JewishCalendar) {\n      const parsha: Parsha = jewishCalendarOrParsha.getParsha();\n      return this.formatParsha(parsha);\n    }\n\n    return this.hebrewFormat\n      ? this.hebrewParshaMap[jewishCalendarOrParsha] || ''\n      : this.transliteratedParshaMap[jewishCalendarOrParsha] || '';\n  }\n\n  /**\n   * Returns a String with the name of the current special parsha of Shekalim, Zachor, Parah or Hachodesh or an\n   * empty String for a non-special parsha. If the formatter is set to format in Hebrew, it returns a string of\n   * the current special parsha in Hebrew, for example &#x05E9;&#x05E7;&#x05DC;&#x05D9;&#x05DD;,\n   * &#x05D6;&#x05DB;&#x05D5;&#x05E8;, &#x05E4;&#x05E8;&#x05D4; or &#x05D4;&#x05D7;&#x05D3;&#x05E9;. An empty\n   * string if the date is not a special parsha. If not set to Hebrew, it returns a string of the special parsha\n   * transliterated into Latin chars. The default uses Ashkenazi pronunciation in typical American English spelling\n   * Shekalim, Zachor, Parah or Hachodesh.\n   *\n   * @param jewishCalendar the JewishCalendar Object\n   * @return today's special parsha. If the formatter is set to format in Hebrew, returns a string\n   *         of the current special parsha  in Hebrew for in the format of &#x05E9;&#x05E7;&#x05DC;&#x05D9;&#x05DD;,\n   *         &#x05D6;&#x05DB;&#x05D5;&#x05E8;, &#x05E4;&#x05E8;&#x05D4; or &#x05D4;&#x05D7;&#x05D3;&#x05E9; or an empty\n   *         string if there are none. If not set to Hebrew, it returns a string of the special parsha transliterated\n   *         into Latin chars. The default uses Ashkenazi pronunciation in typical American English spelling of Shekalim,\n   *         Zachor, Parah or Hachodesh. An empty string if there are none.\n   */\n  public formatSpecialParsha(jewishCalendar: JewishCalendar): string {\n    const specialParsha: Parsha = jewishCalendar.getSpecialShabbos();\n    return this.hebrewFormat\n      ? this.hebrewParshaMap[specialParsha] || ''\n      : this.transliteratedParshaMap[specialParsha] || '';\n  }\n}\n","import * as _Luxon from 'luxon';\n\nimport { GeoLocation } from './util/GeoLocation';\nimport { ZmanimCalendar } from './ZmanimCalendar';\nimport { ComplexZmanimCalendar } from './ComplexZmanimCalendar';\nimport { JsonOutput, ZmanimFormatter } from './util/ZmanimFormatter';\n\nexport function getZmanimJson(options: Options): JsonOutput {\n  const geoLocation: GeoLocation = new GeoLocation(options.locationName || null, options.latitude, options.longitude,\n    options.elevation || 0, options.timeZoneId);\n\n  const zmanimCalendar: ZmanimCalendar = options.complexZmanim\n    ? new ComplexZmanimCalendar(geoLocation)\n    : new ZmanimCalendar(geoLocation);\n  zmanimCalendar.setDate(options.date || _Luxon.DateTime.local());\n  return ZmanimFormatter.toJSON(zmanimCalendar);\n}\n\nexport interface Options {\n  /**\n   * @default The current local date. The time is ignored.\n   */\n  date?: Date | string | number | _Luxon.DateTime;\n  /**\n   * IANA timezone ID\n   */\n  timeZoneId: string;\n  locationName?: string;\n  latitude: number;\n  longitude: number;\n  /**\n   * @default 0\n   */\n  elevation?: number;\n  /**\n   * Whether to use `ComplexZmanimCalendar` instead of `ZmanimCalendar`\n   * @default false\n   */\n  complexZmanim?: boolean;\n}\n\nexport * from './util/Time';\nexport * from './util/GeoLocation';\nexport * from './util/GeoLocationUtils';\nexport * from './util/Zman';\nexport * from './polyfills/Utils';\n\nexport * from './util/NOAACalculator';\nexport * from './util/SunTimesCalculator';\n\nexport * from './AstronomicalCalendar';\nexport * from './ZmanimCalendar';\nexport * from './ComplexZmanimCalendar';\n\nexport * from './hebrewcalendar/JewishDate';\nexport * from './hebrewcalendar/JewishCalendar';\nexport * from './hebrewcalendar/Daf';\nexport * from './hebrewcalendar/YomiCalculator';\nexport * from './hebrewcalendar/YerushalmiYomiCalculator';\n\nexport * from './hebrewcalendar/HebrewDateFormatter';\nexport * from './util/ZmanimFormatter';\n\nexport const Luxon = _Luxon;\n\n// Exported explicitly as a convenience.\nexport const DateTime = _Luxon.DateTime;\n"],"sourceRoot":""}